<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="326.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >gi_model</text>
<text id="details" x="10.00" y="309" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="309" > </text>
<g id="frames">
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;* std::__do_uninit_fill_n&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;*, unsigned long, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; (445,824 samples, 3.43%)</title><rect x="1066.6" y="85" width="40.5" height="15.0" fill="rgb(201,201,59)" rx="2" ry="2" />
<text  x="1069.57" y="95.5" >std..</text>
</g>
<g >
<title>History&lt;double, double&gt;::at_time (6,452,254 samples, 49.66%)</title><rect x="398.6" y="117" width="586.0" height="15.0" fill="rgb(209,209,62)" rx="2" ry="2" />
<text  x="401.60" y="127.5" >History&lt;double, double&gt;::at_time</text>
</g>
<g >
<title>__memcg_slab_free_hook (469,526 samples, 3.61%)</title><rect x="253.5" y="85" width="42.7" height="15.0" fill="rgb(229,93,93)" rx="2" ry="2" />
<text  x="256.55" y="95.5" >__me..</text>
</g>
<g >
<title>do_exit (444,418 samples, 3.42%)</title><rect x="1147.5" y="181" width="40.3" height="15.0" fill="rgb(229,92,92)" rx="2" ry="2" />
<text  x="1150.47" y="191.5" >do_..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (168,129 samples, 1.29%)</title><rect x="341.9" y="229" width="15.2" height="15.0" fill="rgb(215,72,72)" rx="2" ry="2" />
<text  x="344.87" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;std::array&lt;double, 5ul&gt;, std::allocator&lt;std::array&lt;double, 5ul&gt; &gt; &gt;::_M_range_check (922,264 samples, 7.10%)</title><rect x="773.7" y="53" width="83.8" height="15.0" fill="rgb(196,196,57)" rx="2" ry="2" />
<text  x="776.73" y="63.5" >std::vect..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (444,418 samples, 3.42%)</title><rect x="1147.5" y="245" width="40.3" height="15.0" fill="rgb(215,72,72)" rx="2" ry="2" />
<text  x="1150.47" y="255.5" >ent..</text>
</g>
<g >
<title>exit_mmap (444,418 samples, 3.42%)</title><rect x="1147.5" y="149" width="40.3" height="15.0" fill="rgb(234,99,99)" rx="2" ry="2" />
<text  x="1150.47" y="159.5" >exi..</text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;* std::__uninitialized_fill_n&lt;false&gt;::__uninit_fill_n&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;*, unsigned long, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; (445,824 samples, 3.43%)</title><rect x="1066.6" y="101" width="40.5" height="15.0" fill="rgb(215,215,64)" rx="2" ry="2" />
<text  x="1069.57" y="111.5" >std..</text>
</g>
<g >
<title>do_syscall_64 (444,418 samples, 3.42%)</title><rect x="1147.5" y="229" width="40.3" height="15.0" fill="rgb(204,57,57)" rx="2" ry="2" />
<text  x="1150.47" y="239.5" >do_..</text>
</g>
<g >
<title>free_pgd_range (444,418 samples, 3.42%)</title><rect x="1147.5" y="117" width="40.3" height="15.0" fill="rgb(205,57,57)" rx="2" ry="2" />
<text  x="1150.47" y="127.5" >fre..</text>
</g>
<g >
<title>do_syscall_64 (23,871 samples, 0.18%)</title><rect x="1187.8" y="213" width="2.2" height="15.0" fill="rgb(204,57,57)" rx="2" ry="2" />
<text  x="1190.83" y="223.5" ></text>
</g>
<g >
<title>[unknown] (671,101 samples, 5.17%)</title><rect x="296.2" y="245" width="60.9" height="15.0" fill="rgb(205,58,58)" rx="2" ry="2" />
<text  x="299.19" y="255.5" >[unkno..</text>
</g>
<g >
<title>cfree (502,972 samples, 3.87%)</title><rect x="296.2" y="181" width="45.7" height="15.0" fill="rgb(220,80,80)" rx="2" ry="2" />
<text  x="299.19" y="191.5" >cfree</text>
</g>
<g >
<title>load_elf_binary (23,871 samples, 0.18%)</title><rect x="1187.8" y="149" width="2.2" height="15.0" fill="rgb(220,79,79)" rx="2" ry="2" />
<text  x="1190.83" y="159.5" ></text>
</g>
<g >
<title>_start (8,702,008 samples, 66.98%)</title><rect x="357.1" y="245" width="790.4" height="15.0" fill="rgb(244,114,114)" rx="2" ry="2" />
<text  x="360.14" y="255.5" >_start</text>
</g>
<g >
<title>perf_event_exec (23,871 samples, 0.18%)</title><rect x="1187.8" y="117" width="2.2" height="15.0" fill="rgb(214,71,71)" rx="2" ry="2" />
<text  x="1190.83" y="127.5" ></text>
</g>
<g >
<title>RingBuffer&lt;std::array&lt;double, 5ul&gt; &gt;::operator[] (922,264 samples, 7.10%)</title><rect x="773.7" y="85" width="83.8" height="15.0" fill="rgb(199,199,58)" rx="2" ry="2" />
<text  x="776.73" y="95.5" >RingBuffe..</text>
</g>
<g >
<title>__mod_memcg_lruvec_state (444,418 samples, 3.42%)</title><rect x="1147.5" y="53" width="40.3" height="15.0" fill="rgb(246,118,118)" rx="2" ry="2" />
<text  x="1150.47" y="63.5" >__m..</text>
</g>
<g >
<title>lruvec_stat_mod_folio.constprop.0 (444,418 samples, 3.42%)</title><rect x="1147.5" y="85" width="40.3" height="15.0" fill="rgb(205,57,57)" rx="2" ry="2" />
<text  x="1150.47" y="95.5" >lru..</text>
</g>
<g >
<title>[ld-linux-x86-64.so.2] (1,088,839 samples, 8.38%)</title><rect x="104.2" y="149" width="98.9" height="15.0" fill="rgb(242,112,112)" rx="2" ry="2" />
<text  x="107.19" y="159.5" >[ld-linux-x..</text>
</g>
<g >
<title>DDEint&lt;&amp; (456,498 samples, 3.51%)</title><rect x="357.1" y="165" width="41.5" height="15.0" fill="rgb(214,70,70)" rx="2" ry="2" />
<text  x="360.14" y="175.5" >DDE..</text>
</g>
<g >
<title>std::vector&lt;std::array&lt;double, 5ul&gt;, std::allocator&lt;std::array&lt;double, 5ul&gt; &gt; &gt;::size (474,695 samples, 3.65%)</title><rect x="814.4" y="37" width="43.1" height="15.0" fill="rgb(210,210,62)" rx="2" ry="2" />
<text  x="817.38" y="47.5" >std:..</text>
</g>
<g >
<title>kmem_cache_free (469,526 samples, 3.61%)</title><rect x="253.5" y="101" width="42.7" height="15.0" fill="rgb(253,128,128)" rx="2" ry="2" />
<text  x="256.55" y="111.5" >kmem..</text>
</g>
<g >
<title>[ld-linux-x86-64.so.2] (551,437 samples, 4.24%)</title><rect x="153.0" y="133" width="50.1" height="15.0" fill="rgb(242,112,112)" rx="2" ry="2" />
<text  x="156.00" y="143.5" >[ld-l..</text>
</g>
<g >
<title>task_work_run (469,526 samples, 3.61%)</title><rect x="253.5" y="181" width="42.7" height="15.0" fill="rgb(205,57,57)" rx="2" ry="2" />
<text  x="256.55" y="191.5" >task..</text>
</g>
<g >
<title>[ld-linux-x86-64.so.2] (555,695 samples, 4.28%)</title><rect x="203.1" y="133" width="50.4" height="15.0" fill="rgb(242,112,112)" rx="2" ry="2" />
<text  x="206.08" y="143.5" >[ld-l..</text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::allocator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt;::vector (445,824 samples, 3.43%)</title><rect x="1066.6" y="165" width="40.5" height="15.0" fill="rgb(224,224,68)" rx="2" ry="2" />
<text  x="1069.57" y="175.5" >std..</text>
</g>
<g >
<title>History&lt;double, double&gt;::resolve_prehistory (493,750 samples, 3.80%)</title><rect x="857.5" y="101" width="44.8" height="15.0" fill="rgb(219,219,66)" rx="2" ry="2" />
<text  x="860.49" y="111.5" >Hist..</text>
</g>
<g >
<title>DDEint_dopri_5&lt;&amp; (8,257,041 samples, 63.55%)</title><rect x="357.1" y="181" width="750.0" height="15.0" fill="rgb(246,117,117)" rx="2" ry="2" />
<text  x="360.14" y="191.5" >DDEint_dopri_5&lt;&amp;</text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::at (458,876 samples, 3.53%)</title><rect x="942.9" y="101" width="41.7" height="15.0" fill="rgb(191,191,56)" rx="2" ry="2" />
<text  x="945.93" y="111.5" >std..</text>
</g>
<g >
<title>[unknown] (502,972 samples, 3.87%)</title><rect x="296.2" y="213" width="45.7" height="15.0" fill="rgb(205,58,58)" rx="2" ry="2" />
<text  x="299.19" y="223.5" >[unk..</text>
</g>
<g >
<title>[ld-linux-x86-64.so.2] (2,681,596 samples, 20.64%)</title><rect x="10.0" y="181" width="243.5" height="15.0" fill="rgb(242,112,112)" rx="2" ry="2" />
<text  x="13.00" y="191.5" >[ld-linux-x86-64.so.2]</text>
</g>
<g >
<title>std::function&lt;double  (493,750 samples, 3.80%)</title><rect x="857.5" y="85" width="44.8" height="15.0" fill="rgb(179,179,51)" rx="2" ry="2" />
<text  x="860.49" y="95.5" >std:..</text>
</g>
<g >
<title>write (502,972 samples, 3.87%)</title><rect x="296.2" y="149" width="45.7" height="15.0" fill="rgb(225,87,87)" rx="2" ry="2" />
<text  x="299.19" y="159.5" >write</text>
</g>
<g >
<title>__alloc_pages_noprof (168,129 samples, 1.29%)</title><rect x="341.9" y="53" width="15.2" height="15.0" fill="rgb(201,51,51)" rx="2" ry="2" />
<text  x="344.87" y="63.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (502,972 samples, 3.87%)</title><rect x="296.2" y="133" width="45.7" height="15.0" fill="rgb(222,82,82)" rx="2" ry="2" />
<text  x="299.19" y="143.5" >asm_..</text>
</g>
<g >
<title>[unknown] (23,871 samples, 0.18%)</title><rect x="1187.8" y="245" width="2.2" height="15.0" fill="rgb(205,58,58)" rx="2" ry="2" />
<text  x="1190.83" y="255.5" ></text>
</g>
<g >
<title>destroy_inode (469,526 samples, 3.61%)</title><rect x="253.5" y="117" width="42.7" height="15.0" fill="rgb(216,73,73)" rx="2" ry="2" />
<text  x="256.55" y="127.5" >dest..</text>
</g>
<g >
<title>get_page_from_freelist (168,129 samples, 1.29%)</title><rect x="341.9" y="37" width="15.2" height="15.0" fill="rgb(252,125,125)" rx="2" ry="2" />
<text  x="344.87" y="47.5" ></text>
</g>
<g >
<title>do_execveat_common.isra.0 (168,129 samples, 1.29%)</title><rect x="341.9" y="181" width="15.2" height="15.0" fill="rgb(229,92,92)" rx="2" ry="2" />
<text  x="344.87" y="191.5" ></text>
</g>
<g >
<title>void std::_Construct&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt; const&amp;&gt; (445,824 samples, 3.43%)</title><rect x="1066.6" y="69" width="40.5" height="15.0" fill="rgb(215,215,64)" rx="2" ry="2" />
<text  x="1069.57" y="79.5" >voi..</text>
</g>
<g >
<title>[ld-linux-x86-64.so.2] (2,681,596 samples, 20.64%)</title><rect x="10.0" y="229" width="243.5" height="15.0" fill="rgb(242,112,112)" rx="2" ry="2" />
<text  x="13.00" y="239.5" >[ld-linux-x86-64.so.2]</text>
</g>
<g >
<title>load_elf_binary (168,129 samples, 1.29%)</title><rect x="341.9" y="149" width="15.2" height="15.0" fill="rgb(220,79,79)" rx="2" ry="2" />
<text  x="344.87" y="159.5" ></text>
</g>
<g >
<title>do_group_exit (444,418 samples, 3.42%)</title><rect x="1147.5" y="197" width="40.3" height="15.0" fill="rgb(216,73,73)" rx="2" ry="2" />
<text  x="1150.47" y="207.5" >do_..</text>
</g>
<g >
<title>DDEint_dopri_5&lt;&amp; (6,452,254 samples, 49.66%)</title><rect x="398.6" y="165" width="586.0" height="15.0" fill="rgb(246,117,117)" rx="2" ry="2" />
<text  x="401.60" y="175.5" >DDEint_dopri_5&lt;&amp;</text>
</g>
<g >
<title>__intel_pmu_enable_all.isra.0 (23,871 samples, 0.18%)</title><rect x="1187.8" y="85" width="2.2" height="15.0" fill="rgb(238,105,105)" rx="2" ry="2" />
<text  x="1190.83" y="95.5" ></text>
</g>
<g >
<title>move_page_tables (168,129 samples, 1.29%)</title><rect x="341.9" y="101" width="15.2" height="15.0" fill="rgb(227,90,90)" rx="2" ry="2" />
<text  x="344.87" y="111.5" ></text>
</g>
<g >
<title>[ld-linux-x86-64.so.2] (3,151,122 samples, 24.25%)</title><rect x="10.0" y="245" width="286.2" height="15.0" fill="rgb(242,112,112)" rx="2" ry="2" />
<text  x="13.00" y="255.5" >[ld-linux-x86-64.so.2]</text>
</g>
<g >
<title>[unknown] (502,972 samples, 3.87%)</title><rect x="296.2" y="165" width="45.7" height="15.0" fill="rgb(205,58,58)" rx="2" ry="2" />
<text  x="299.19" y="175.5" >[unk..</text>
</g>
<g >
<title>main (8,702,008 samples, 66.98%)</title><rect x="357.1" y="197" width="790.4" height="15.0" fill="rgb(242,112,112)" rx="2" ry="2" />
<text  x="360.14" y="207.5" >main</text>
</g>
<g >
<title>begin_new_exec (23,871 samples, 0.18%)</title><rect x="1187.8" y="133" width="2.2" height="15.0" fill="rgb(244,114,114)" rx="2" ry="2" />
<text  x="1190.83" y="143.5" ></text>
</g>
<g >
<title>std::enable_if&lt;is_invocable_r_v&lt;double, double  (493,750 samples, 3.80%)</title><rect x="857.5" y="53" width="44.8" height="15.0" fill="rgb(221,221,66)" rx="2" ry="2" />
<text  x="860.49" y="63.5" >std:..</text>
</g>
<g >
<title>bprm_execve (23,871 samples, 0.18%)</title><rect x="1187.8" y="165" width="2.2" height="15.0" fill="rgb(214,71,71)" rx="2" ry="2" />
<text  x="1190.83" y="175.5" ></text>
</g>
<g >
<title>perf_ctx_enable (23,871 samples, 0.18%)</title><rect x="1187.8" y="101" width="2.2" height="15.0" fill="rgb(225,86,86)" rx="2" ry="2" />
<text  x="1190.83" y="111.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::operator[] (456,498 samples, 3.51%)</title><rect x="357.1" y="149" width="41.5" height="15.0" fill="rgb(222,222,67)" rx="2" ry="2" />
<text  x="360.14" y="159.5" >std..</text>
</g>
<g >
<title>alloc_pages_mpol_noprof (168,129 samples, 1.29%)</title><rect x="341.9" y="69" width="15.2" height="15.0" fill="rgb(224,85,85)" rx="2" ry="2" />
<text  x="344.87" y="79.5" ></text>
</g>
<g >
<title>bprm_execve (168,129 samples, 1.29%)</title><rect x="341.9" y="165" width="15.2" height="15.0" fill="rgb(214,71,71)" rx="2" ry="2" />
<text  x="344.87" y="175.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (23,871 samples, 0.18%)</title><rect x="1187.8" y="229" width="2.2" height="15.0" fill="rgb(215,72,72)" rx="2" ry="2" />
<text  x="1190.83" y="239.5" ></text>
</g>
<g >
<title>[unknown] (502,972 samples, 3.87%)</title><rect x="296.2" y="229" width="45.7" height="15.0" fill="rgb(205,58,58)" rx="2" ry="2" />
<text  x="299.19" y="239.5" >[unk..</text>
</g>
<g >
<title>History&lt;double, double&gt;::interpolate (922,264 samples, 7.10%)</title><rect x="773.7" y="101" width="83.8" height="15.0" fill="rgb(187,187,54)" rx="2" ry="2" />
<text  x="776.73" y="111.5" >History&lt;d..</text>
</g>
<g >
<title>free_pgtables (444,418 samples, 3.42%)</title><rect x="1147.5" y="133" width="40.3" height="15.0" fill="rgb(204,55,55)" rx="2" ry="2" />
<text  x="1150.47" y="143.5" >fre..</text>
</g>
<g >
<title>__mmput (444,418 samples, 3.42%)</title><rect x="1147.5" y="165" width="40.3" height="15.0" fill="rgb(248,120,120)" rx="2" ry="2" />
<text  x="1150.47" y="175.5" >__m..</text>
</g>
<g >
<title>DDEint&lt;&amp; (6,452,254 samples, 49.66%)</title><rect x="398.6" y="149" width="586.0" height="15.0" fill="rgb(214,70,70)" rx="2" ry="2" />
<text  x="401.60" y="159.5" >DDEint&lt;&amp;</text>
</g>
<g >
<title>RingBuffer&lt;double&gt;::wrap (446,978 samples, 3.44%)</title><rect x="902.3" y="85" width="40.6" height="15.0" fill="rgb(220,220,66)" rx="2" ry="2" />
<text  x="905.33" y="95.5" >Rin..</text>
</g>
<g >
<title>___pte_free_tlb (444,418 samples, 3.42%)</title><rect x="1147.5" y="101" width="40.3" height="15.0" fill="rgb(237,105,105)" rx="2" ry="2" />
<text  x="1150.47" y="111.5" >___..</text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::vector (902,465 samples, 6.95%)</title><rect x="984.6" y="165" width="82.0" height="15.0" fill="rgb(212,212,63)" rx="2" ry="2" />
<text  x="987.60" y="175.5" >std::vect..</text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;* std::__uninitialized_fill_n_a&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;*, unsigned long, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; (445,824 samples, 3.43%)</title><rect x="1066.6" y="133" width="40.5" height="15.0" fill="rgb(212,212,63)" rx="2" ry="2" />
<text  x="1069.57" y="143.5" >std..</text>
</g>
<g >
<title>gi_model (12,968,649 samples, 99.82%)</title><rect x="10.0" y="261" width="1177.8" height="15.0" fill="rgb(237,104,104)" rx="2" ry="2" />
<text  x="13.00" y="271.5" >gi_model</text>
</g>
<g >
<title>sync_regs (502,972 samples, 3.87%)</title><rect x="296.2" y="117" width="45.7" height="15.0" fill="rgb(225,86,86)" rx="2" ry="2" />
<text  x="299.19" y="127.5" >sync..</text>
</g>
<g >
<title>__libc_start_main (8,702,008 samples, 66.98%)</title><rect x="357.1" y="229" width="790.4" height="15.0" fill="rgb(234,99,99)" rx="2" ry="2" />
<text  x="360.14" y="239.5" >__libc_start_main</text>
</g>
<g >
<title>std::__new_allocator&lt;double&gt;::deallocate (502,972 samples, 3.87%)</title><rect x="296.2" y="197" width="45.7" height="15.0" fill="rgb(224,224,68)" rx="2" ry="2" />
<text  x="299.19" y="207.5" >std:..</text>
</g>
<g >
<title>std::locale::_S_initialize (444,967 samples, 3.42%)</title><rect x="1107.1" y="165" width="40.4" height="15.0" fill="rgb(218,218,65)" rx="2" ry="2" />
<text  x="1110.06" y="175.5" >std..</text>
</g>
<g >
<title>__fput (469,526 samples, 3.61%)</title><rect x="253.5" y="165" width="42.7" height="15.0" fill="rgb(247,119,119)" rx="2" ry="2" />
<text  x="256.55" y="175.5" >__fput</text>
</g>
<g >
<title>_dl_catch_exception (555,695 samples, 4.28%)</title><rect x="203.1" y="165" width="50.4" height="15.0" fill="rgb(253,127,127)" rx="2" ry="2" />
<text  x="206.08" y="175.5" >_dl_c..</text>
</g>
<g >
<title>[ld-linux-x86-64.so.2] (555,695 samples, 4.28%)</title><rect x="203.1" y="149" width="50.4" height="15.0" fill="rgb(242,112,112)" rx="2" ry="2" />
<text  x="206.08" y="159.5" >[ld-l..</text>
</g>
<g >
<title>CompoundRingBuffer&lt;std::array&lt;double, 5ul&gt;, double&gt;::bisect (4,130,386 samples, 31.79%)</title><rect x="398.6" y="101" width="375.1" height="15.0" fill="rgb(208,208,62)" rx="2" ry="2" />
<text  x="401.60" y="111.5" >CompoundRingBuffer&lt;std::array&lt;double, 5ul&gt;, double..</text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;double const*, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;::__normal_iterator (450,686 samples, 3.47%)</title><rect x="1025.6" y="133" width="41.0" height="15.0" fill="rgb(224,224,67)" rx="2" ry="2" />
<text  x="1028.63" y="143.5" >__g..</text>
</g>
<g >
<title>std::_Function_handler&lt;double  (493,750 samples, 3.80%)</title><rect x="857.5" y="69" width="44.8" height="15.0" fill="rgb(221,221,66)" rx="2" ry="2" />
<text  x="860.49" y="79.5" >std:..</text>
</g>
<g >
<title>__x64_sys_exit_group (444,418 samples, 3.42%)</title><rect x="1147.5" y="213" width="40.3" height="15.0" fill="rgb(210,64,64)" rx="2" ry="2" />
<text  x="1150.47" y="223.5" >__x..</text>
</g>
<g >
<title>[ld-linux-x86-64.so.2] (2,681,596 samples, 20.64%)</title><rect x="10.0" y="213" width="243.5" height="15.0" fill="rgb(242,112,112)" rx="2" ry="2" />
<text  x="13.00" y="223.5" >[ld-linux-x86-64.so.2]</text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::_M_range_check (449,785 samples, 3.46%)</title><rect x="607.8" y="69" width="40.9" height="15.0" fill="rgb(193,193,56)" rx="2" ry="2" />
<text  x="610.81" y="79.5" >std..</text>
</g>
<g >
<title>do_execveat_common.isra.0 (23,871 samples, 0.18%)</title><rect x="1187.8" y="181" width="2.2" height="15.0" fill="rgb(229,92,92)" rx="2" ry="2" />
<text  x="1190.83" y="191.5" ></text>
</g>
<g >
<title>native_write_msr (23,871 samples, 0.18%)</title><rect x="1187.8" y="69" width="2.2" height="15.0" fill="rgb(236,102,102)" rx="2" ry="2" />
<text  x="1190.83" y="79.5" ></text>
</g>
<g >
<title>shift_arg_pages (168,129 samples, 1.29%)</title><rect x="341.9" y="117" width="15.2" height="15.0" fill="rgb(244,115,115)" rx="2" ry="2" />
<text  x="344.87" y="127.5" ></text>
</g>
<g >
<title>std::basic_ofstream&lt;char, std::char_traits&lt;char&gt; &gt;::basic_ofstream (444,967 samples, 3.42%)</title><rect x="1107.1" y="181" width="40.4" height="15.0" fill="rgb(226,226,68)" rx="2" ry="2" />
<text  x="1110.06" y="191.5" >std..</text>
</g>
<g >
<title>RingBuffer&lt;double&gt;::operator[] (446,978 samples, 3.44%)</title><rect x="902.3" y="101" width="40.6" height="15.0" fill="rgb(228,228,69)" rx="2" ry="2" />
<text  x="905.33" y="111.5" >Rin..</text>
</g>
<g >
<title>RingBuffer&lt;double&gt;::wrap (463,115 samples, 3.56%)</title><rect x="565.8" y="69" width="42.0" height="15.0" fill="rgb(220,220,66)" rx="2" ry="2" />
<text  x="568.75" y="79.5" >Rin..</text>
</g>
<g >
<title>__lruvec_stat_mod_folio (444,418 samples, 3.42%)</title><rect x="1147.5" y="69" width="40.3" height="15.0" fill="rgb(245,116,116)" rx="2" ry="2" />
<text  x="1150.47" y="79.5" >__l..</text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::at (1,377,039 samples, 10.60%)</title><rect x="648.7" y="69" width="125.0" height="15.0" fill="rgb(191,191,56)" rx="2" ry="2" />
<text  x="651.66" y="79.5" >std::vector&lt;dou..</text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::allocator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt;::_M_fill_initialize (445,824 samples, 3.43%)</title><rect x="1066.6" y="149" width="40.5" height="15.0" fill="rgb(222,222,67)" rx="2" ry="2" />
<text  x="1069.57" y="159.5" >std..</text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::_M_range_check (448,938 samples, 3.46%)</title><rect x="733.0" y="53" width="40.7" height="15.0" fill="rgb(193,193,56)" rx="2" ry="2" />
<text  x="735.95" y="63.5" >std..</text>
</g>
<g >
<title>__dentry_kill (469,526 samples, 3.61%)</title><rect x="253.5" y="133" width="42.7" height="15.0" fill="rgb(228,91,91)" rx="2" ry="2" />
<text  x="256.55" y="143.5" >__de..</text>
</g>
<g >
<title>[libc.so.6] (8,702,008 samples, 66.98%)</title><rect x="357.1" y="213" width="790.4" height="15.0" fill="rgb(220,79,79)" rx="2" ry="2" />
<text  x="360.14" y="223.5" >[libc.so.6]</text>
</g>
<g >
<title>[ld-linux-x86-64.so.2] (555,695 samples, 4.28%)</title><rect x="203.1" y="117" width="50.4" height="15.0" fill="rgb(242,112,112)" rx="2" ry="2" />
<text  x="206.08" y="127.5" >[ld-l..</text>
</g>
<g >
<title>__x64_sys_execve (23,871 samples, 0.18%)</title><rect x="1187.8" y="197" width="2.2" height="15.0" fill="rgb(246,117,117)" rx="2" ry="2" />
<text  x="1190.83" y="207.5" ></text>
</g>
<g >
<title>do_syscall_64 (469,526 samples, 3.61%)</title><rect x="253.5" y="213" width="42.7" height="15.0" fill="rgb(204,57,57)" rx="2" ry="2" />
<text  x="256.55" y="223.5" >do_s..</text>
</g>
<g >
<title>[ld-linux-x86-64.so.2] (2,125,901 samples, 16.36%)</title><rect x="10.0" y="165" width="193.1" height="15.0" fill="rgb(242,112,112)" rx="2" ry="2" />
<text  x="13.00" y="175.5" >[ld-linux-x86-64.so.2]</text>
</g>
<g >
<title>std::vector&lt;std::array&lt;double, 5ul&gt;, std::allocator&lt;std::array&lt;double, 5ul&gt; &gt; &gt;::at (922,264 samples, 7.10%)</title><rect x="773.7" y="69" width="83.8" height="15.0" fill="rgb(194,194,57)" rx="2" ry="2" />
<text  x="776.73" y="79.5" >std::vect..</text>
</g>
<g >
<title>gi_dde (6,452,254 samples, 49.66%)</title><rect x="398.6" y="133" width="586.0" height="15.0" fill="rgb(207,60,60)" rx="2" ry="2" />
<text  x="401.60" y="143.5" >gi_dde</text>
</g>
<g >
<title>dput (469,526 samples, 3.61%)</title><rect x="253.5" y="149" width="42.7" height="15.0" fill="rgb(237,104,104)" rx="2" ry="2" />
<text  x="256.55" y="159.5" >dput</text>
</g>
<g >
<title>perf-exec (23,871 samples, 0.18%)</title><rect x="1187.8" y="261" width="2.2" height="15.0" fill="rgb(229,93,93)" rx="2" ry="2" />
<text  x="1190.83" y="271.5" ></text>
</g>
<g >
<title>double&amp;&amp; std::forward&lt;double&gt; (493,750 samples, 3.80%)</title><rect x="857.5" y="37" width="44.8" height="15.0" fill="rgb(220,220,66)" rx="2" ry="2" />
<text  x="860.49" y="47.5" >doub..</text>
</g>
<g >
<title>__pmd_alloc (168,129 samples, 1.29%)</title><rect x="341.9" y="85" width="15.2" height="15.0" fill="rgb(216,74,74)" rx="2" ry="2" />
<text  x="344.87" y="95.5" ></text>
</g>
<g >
<title>all (12,992,520 samples, 100%)</title><rect x="10.0" y="277" width="1180.0" height="15.0" fill="rgb(209,63,63)" rx="2" ry="2" />
<text  x="13.00" y="287.5" ></text>
</g>
<g >
<title>setup_arg_pages (168,129 samples, 1.29%)</title><rect x="341.9" y="133" width="15.2" height="15.0" fill="rgb(219,78,78)" rx="2" ry="2" />
<text  x="344.87" y="143.5" ></text>
</g>
<g >
<title>[ld-linux-x86-64.so.2] (2,681,596 samples, 20.64%)</title><rect x="10.0" y="197" width="243.5" height="15.0" fill="rgb(242,112,112)" rx="2" ry="2" />
<text  x="13.00" y="207.5" >[ld-linux-x86-64.so.2]</text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;* std::uninitialized_fill_n&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;*, unsigned long, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; (445,824 samples, 3.43%)</title><rect x="1066.6" y="117" width="40.5" height="15.0" fill="rgb(186,186,54)" rx="2" ry="2" />
<text  x="1069.57" y="127.5" >std..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (469,526 samples, 3.61%)</title><rect x="253.5" y="229" width="42.7" height="15.0" fill="rgb(215,72,72)" rx="2" ry="2" />
<text  x="256.55" y="239.5" >entr..</text>
</g>
<g >
<title>__x64_sys_execve (168,129 samples, 1.29%)</title><rect x="341.9" y="197" width="15.2" height="15.0" fill="rgb(246,117,117)" rx="2" ry="2" />
<text  x="344.87" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::end (450,686 samples, 3.47%)</title><rect x="1025.6" y="149" width="41.0" height="15.0" fill="rgb(210,210,62)" rx="2" ry="2" />
<text  x="1028.63" y="159.5" >std..</text>
</g>
<g >
<title>RingBuffer&lt;double&gt;::operator[] (2,743,049 samples, 21.11%)</title><rect x="524.6" y="85" width="249.1" height="15.0" fill="rgb(228,228,69)" rx="2" ry="2" />
<text  x="527.60" y="95.5" >RingBuffer&lt;double&gt;::operator[]</text>
</g>
<g >
<title>syscall_exit_to_user_mode (469,526 samples, 3.61%)</title><rect x="253.5" y="197" width="42.7" height="15.0" fill="rgb(250,123,123)" rx="2" ry="2" />
<text  x="256.55" y="207.5" >sysc..</text>
</g>
<g >
<title>do_syscall_64 (168,129 samples, 1.29%)</title><rect x="341.9" y="213" width="15.2" height="15.0" fill="rgb(204,57,57)" rx="2" ry="2" />
<text  x="344.87" y="223.5" ></text>
</g>
</g>
</svg>
