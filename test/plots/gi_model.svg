<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="502" onload="init(evt)" viewBox="0 0 1200 502" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="502.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >gi_model</text>
<text id="details" x="10.00" y="485" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="485" > </text>
<g id="frames">
<g >
<title>perf_event_exec (24,868 samples, 0.04%)</title><rect x="1189.5" y="293" width="0.5" height="15.0" fill="rgb(214,71,71)" rx="2" ry="2" />
<text  x="1192.51" y="303.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (24,868 samples, 0.04%)</title><rect x="1189.5" y="405" width="0.5" height="15.0" fill="rgb(215,72,72)" rx="2" ry="2" />
<text  x="1192.51" y="415.5" ></text>
</g>
<g >
<title>CompoundRingBuffer&lt;std::array&lt;double, 5ul&gt;, double&gt;::bisect (12,375,732 samples, 20.57%)</title><rect x="406.2" y="261" width="242.6" height="15.0" fill="rgb(208,208,62)" rx="2" ry="2" />
<text  x="409.17" y="271.5" >CompoundRingBuffer&lt;std::array&lt;do..</text>
</g>
<g >
<title>do_coredump (1,334,453 samples, 2.22%)</title><rect x="1084.7" y="133" width="26.2" height="15.0" fill="rgb(207,61,61)" rx="2" ry="2" />
<text  x="1087.69" y="143.5" >d..</text>
</g>
<g >
<title>hrtimer_interrupt (444,246 samples, 0.74%)</title><rect x="640.1" y="197" width="8.7" height="15.0" fill="rgb(226,88,88)" rx="2" ry="2" />
<text  x="643.14" y="207.5" ></text>
</g>
<g >
<title>[ld-linux-x86-64.so.2] (592,349 samples, 0.98%)</title><rect x="40.3" y="309" width="11.7" height="15.0" fill="rgb(242,112,112)" rx="2" ry="2" />
<text  x="43.34" y="319.5" ></text>
</g>
<g >
<title>pow (458,687 samples, 0.76%)</title><rect x="1136.5" y="325" width="9.0" height="15.0" fill="rgb(254,128,128)" rx="2" ry="2" />
<text  x="1139.55" y="335.5" ></text>
</g>
<g >
<title>native_write_msr (24,868 samples, 0.04%)</title><rect x="1189.5" y="245" width="0.5" height="15.0" fill="rgb(236,102,102)" rx="2" ry="2" />
<text  x="1192.51" y="255.5" ></text>
</g>
<g >
<title>setup_arg_pages (182,415 samples, 0.30%)</title><rect x="73.3" y="309" width="3.6" height="15.0" fill="rgb(219,78,78)" rx="2" ry="2" />
<text  x="76.34" y="319.5" ></text>
</g>
<g >
<title>elf_core_dump (1,250,572 samples, 2.08%)</title><rect x="1086.3" y="117" width="24.6" height="15.0" fill="rgb(251,125,125)" rx="2" ry="2" />
<text  x="1089.33" y="127.5" >e..</text>
</g>
<g >
<title>filemap_map_pages (581,772 samples, 0.97%)</title><rect x="52.0" y="245" width="11.4" height="15.0" fill="rgb(227,89,89)" rx="2" ry="2" />
<text  x="54.96" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::vector (471,870 samples, 0.78%)</title><rect x="1180.3" y="325" width="9.2" height="15.0" fill="rgb(212,212,63)" rx="2" ry="2" />
<text  x="1183.26" y="335.5" ></text>
</g>
<g >
<title>vma_complete (182,415 samples, 0.30%)</title><rect x="73.3" y="261" width="3.6" height="15.0" fill="rgb(217,75,75)" rx="2" ry="2" />
<text  x="76.34" y="271.5" ></text>
</g>
<g >
<title>load_elf_binary (24,868 samples, 0.04%)</title><rect x="1189.5" y="325" width="0.5" height="15.0" fill="rgb(220,79,79)" rx="2" ry="2" />
<text  x="1192.51" y="335.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (1,334,453 samples, 2.22%)</title><rect x="1084.7" y="325" width="26.2" height="15.0" fill="rgb(212,67,67)" rx="2" ry="2" />
<text  x="1087.69" y="335.5" >[..</text>
</g>
<g >
<title>DDEint&lt;&amp; (33,246,790 samples, 55.25%)</title><rect x="284.6" y="309" width="652.0" height="15.0" fill="rgb(214,70,70)" rx="2" ry="2" />
<text  x="287.63" y="319.5" >DDEint&lt;&amp;</text>
</g>
<g >
<title>__intel_pmu_enable_all.isra.0 (24,868 samples, 0.04%)</title><rect x="1189.5" y="261" width="0.5" height="15.0" fill="rgb(238,105,105)" rx="2" ry="2" />
<text  x="1192.51" y="271.5" ></text>
</g>
<g >
<title>__rmqueue_pcplist (303,454 samples, 0.50%)</title><rect x="1104.9" y="37" width="6.0" height="15.0" fill="rgb(228,91,91)" rx="2" ry="2" />
<text  x="1107.90" y="47.5" ></text>
</g>
<g >
<title>std::vector&lt;RingBuffer&lt;std::array&lt;double, 5ul&gt; &gt;, std::allocator&lt;RingBuffer&lt;std::array&lt;double, 5ul&gt; &gt; &gt; &gt;::operator[] (443,170 samples, 0.74%)</title><rect x="648.8" y="245" width="8.7" height="15.0" fill="rgb(187,187,54)" rx="2" ry="2" />
<text  x="651.85" y="255.5" ></text>
</g>
<g >
<title>__x64_sys_execve (24,868 samples, 0.04%)</title><rect x="1189.5" y="373" width="0.5" height="15.0" fill="rgb(246,117,117)" rx="2" ry="2" />
<text  x="1192.51" y="383.5" ></text>
</g>
<g >
<title>__handle_mm_fault (581,772 samples, 0.97%)</title><rect x="52.0" y="277" width="11.4" height="15.0" fill="rgb(202,53,53)" rx="2" ry="2" />
<text  x="54.96" y="287.5" ></text>
</g>
<g >
<title>syscall_exit_to_user_mode (1,334,453 samples, 2.22%)</title><rect x="1084.7" y="181" width="26.2" height="15.0" fill="rgb(250,123,123)" rx="2" ry="2" />
<text  x="1087.69" y="191.5" >s..</text>
</g>
<g >
<title>begin_new_exec (24,868 samples, 0.04%)</title><rect x="1189.5" y="309" width="0.5" height="15.0" fill="rgb(244,114,114)" rx="2" ry="2" />
<text  x="1192.51" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (56,738,449 samples, 94.29%)</title><rect x="76.9" y="389" width="1112.6" height="15.0" fill="rgb(220,79,79)" rx="2" ry="2" />
<text  x="79.91" y="399.5" >[libc.so.6]</text>
</g>
<g >
<title>[ld-linux-x86-64.so.2] (592,349 samples, 0.98%)</title><rect x="40.3" y="325" width="11.7" height="15.0" fill="rgb(242,112,112)" rx="2" ry="2" />
<text  x="43.34" y="335.5" ></text>
</g>
<g >
<title>[ld-linux-x86-64.so.2] (592,349 samples, 0.98%)</title><rect x="40.3" y="277" width="11.7" height="15.0" fill="rgb(242,112,112)" rx="2" ry="2" />
<text  x="43.34" y="287.5" ></text>
</g>
<g >
<title>arch_get_unmapped_area_topdown_vmflags (592,349 samples, 0.98%)</title><rect x="40.3" y="149" width="11.7" height="15.0" fill="rgb(226,88,88)" rx="2" ry="2" />
<text  x="43.34" y="159.5" ></text>
</g>
<g >
<title>[unknown] (182,415 samples, 0.30%)</title><rect x="73.3" y="421" width="3.6" height="15.0" fill="rgb(205,58,58)" rx="2" ry="2" />
<text  x="76.34" y="431.5" ></text>
</g>
<g >
<title>double* std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;double const*, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;, double*, double&gt; (471,870 samples, 0.78%)</title><rect x="1180.3" y="309" width="9.2" height="15.0" fill="rgb(194,194,56)" rx="2" ry="2" />
<text  x="1183.26" y="319.5" ></text>
</g>
<g >
<title>__gnu_cxx::__verbose_terminate_handler (1,334,453 samples, 2.22%)</title><rect x="1084.7" y="277" width="26.2" height="15.0" fill="rgb(223,223,67)" rx="2" ry="2" />
<text  x="1087.69" y="287.5" >_..</text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::at (444,131 samples, 0.74%)</title><rect x="884.5" y="245" width="8.7" height="15.0" fill="rgb(191,191,56)" rx="2" ry="2" />
<text  x="887.49" y="255.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irq (10,476 samples, 0.02%)</title><rect x="1086.1" y="85" width="0.2" height="15.0" fill="rgb(229,92,92)" rx="2" ry="2" />
<text  x="1089.09" y="95.5" ></text>
</g>
<g >
<title>exc_page_fault (508,437 samples, 0.84%)</title><rect x="63.4" y="389" width="9.9" height="15.0" fill="rgb(208,62,62)" rx="2" ry="2" />
<text  x="66.37" y="399.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;double  (477,313 samples, 0.79%)</title><rect x="76.9" y="197" width="9.4" height="15.0" fill="rgb(221,221,66)" rx="2" ry="2" />
<text  x="79.91" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::operator[] (2,653,549 samples, 4.41%)</title><rect x="562.1" y="213" width="52.0" height="15.0" fill="rgb(222,222,67)" rx="2" ry="2" />
<text  x="565.07" y="223.5" >std::..</text>
</g>
<g >
<title>read_tsc (444,246 samples, 0.74%)</title><rect x="640.1" y="149" width="8.7" height="15.0" fill="rgb(201,52,52)" rx="2" ry="2" />
<text  x="643.14" y="159.5" ></text>
</g>
<g >
<title>[libc.so.6] (1,334,453 samples, 2.22%)</title><rect x="1084.7" y="229" width="26.2" height="15.0" fill="rgb(220,79,79)" rx="2" ry="2" />
<text  x="1087.69" y="239.5" >[..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (592,349 samples, 0.98%)</title><rect x="40.3" y="261" width="11.7" height="15.0" fill="rgb(215,72,72)" rx="2" ry="2" />
<text  x="43.34" y="271.5" ></text>
</g>
<g >
<title>__mutex_lock.constprop.0 (947,118 samples, 1.57%)</title><rect x="1086.3" y="53" width="18.6" height="15.0" fill="rgb(222,83,83)" rx="2" ry="2" />
<text  x="1089.33" y="63.5" ></text>
</g>
<g >
<title>[ld-linux-x86-64.so.2] (592,349 samples, 0.98%)</title><rect x="40.3" y="293" width="11.7" height="15.0" fill="rgb(242,112,112)" rx="2" ry="2" />
<text  x="43.34" y="303.5" ></text>
</g>
<g >
<title>double  (443,931 samples, 0.74%)</title><rect x="761.8" y="213" width="8.7" height="15.0" fill="rgb(254,129,129)" rx="2" ry="2" />
<text  x="764.78" y="223.5" ></text>
</g>
<g >
<title>do_user_addr_fault (581,772 samples, 0.97%)</title><rect x="52.0" y="309" width="11.4" height="15.0" fill="rgb(225,87,87)" rx="2" ry="2" />
<text  x="54.96" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;std::function&lt;double  (887,038 samples, 1.47%)</title><rect x="849.8" y="245" width="17.4" height="15.0" fill="rgb(199,199,58)" rx="2" ry="2" />
<text  x="852.78" y="255.5" ></text>
</g>
<g >
<title>ktime_get (444,246 samples, 0.74%)</title><rect x="640.1" y="165" width="8.7" height="15.0" fill="rgb(202,53,53)" rx="2" ry="2" />
<text  x="643.14" y="175.5" ></text>
</g>
<g >
<title>bprm_execve (182,415 samples, 0.30%)</title><rect x="73.3" y="341" width="3.6" height="15.0" fill="rgb(214,71,71)" rx="2" ry="2" />
<text  x="76.34" y="351.5" ></text>
</g>
<g >
<title>do_syscall_64 (592,349 samples, 0.98%)</title><rect x="40.3" y="245" width="11.7" height="15.0" fill="rgb(204,57,57)" rx="2" ry="2" />
<text  x="43.34" y="255.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (444,246 samples, 0.74%)</title><rect x="640.1" y="229" width="8.7" height="15.0" fill="rgb(216,74,74)" rx="2" ry="2" />
<text  x="643.14" y="239.5" ></text>
</g>
<g >
<title>RingBuffer&lt;double&gt;::size (884,192 samples, 1.47%)</title><rect x="622.8" y="245" width="17.3" height="15.0" fill="rgb(212,212,63)" rx="2" ry="2" />
<text  x="625.80" y="255.5" ></text>
</g>
<g >
<title>mutex_spin_on_owner (473,559 samples, 0.79%)</title><rect x="1095.6" y="37" width="9.3" height="15.0" fill="rgb(213,69,69)" rx="2" ry="2" />
<text  x="1098.62" y="47.5" ></text>
</g>
<g >
<title>RingBuffer&lt;double&gt;::size (444,125 samples, 0.74%)</title><rect x="893.2" y="261" width="8.7" height="15.0" fill="rgb(212,212,63)" rx="2" ry="2" />
<text  x="896.20" y="271.5" ></text>
</g>
<g >
<title>DDEint&lt;&amp; (56,738,449 samples, 94.29%)</title><rect x="76.9" y="357" width="1112.6" height="15.0" fill="rgb(214,70,70)" rx="2" ry="2" />
<text  x="79.91" y="367.5" >DDEint&lt;&amp;</text>
</g>
<g >
<title>__libc_start_main (56,738,449 samples, 94.29%)</title><rect x="76.9" y="405" width="1112.6" height="15.0" fill="rgb(234,99,99)" rx="2" ry="2" />
<text  x="79.91" y="415.5" >__libc_start_main</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1,334,453 samples, 2.22%)</title><rect x="1084.7" y="213" width="26.2" height="15.0" fill="rgb(215,72,72)" rx="2" ry="2" />
<text  x="1087.69" y="223.5" >e..</text>
</g>
<g >
<title>CompoundRingBuffer&lt;std::array&lt;double, 5ul&gt;, double&gt;::operator[] (443,170 samples, 0.74%)</title><rect x="648.8" y="261" width="8.7" height="15.0" fill="rgb(206,206,61)" rx="2" ry="2" />
<text  x="651.85" y="271.5" ></text>
</g>
<g >
<title>[ld-linux-x86-64.so.2] (1,063,265 samples, 1.77%)</title><rect x="19.5" y="341" width="20.8" height="15.0" fill="rgb(242,112,112)" rx="2" ry="2" />
<text  x="22.49" y="351.5" ></text>
</g>
<g >
<title>raise (1,334,453 samples, 2.22%)</title><rect x="1084.7" y="245" width="26.2" height="15.0" fill="rgb(224,85,85)" rx="2" ry="2" />
<text  x="1087.69" y="255.5" >r..</text>
</g>
<g >
<title>gi_model (60,150,829 samples, 99.96%)</title><rect x="10.0" y="437" width="1179.5" height="15.0" fill="rgb(237,104,104)" rx="2" ry="2" />
<text  x="13.00" y="447.5" >gi_model</text>
</g>
<g >
<title>do_syscall_64 (24,868 samples, 0.04%)</title><rect x="1189.5" y="389" width="0.5" height="15.0" fill="rgb(204,57,57)" rx="2" ry="2" />
<text  x="1192.51" y="399.5" ></text>
</g>
<g >
<title>__cxxabiv1::__terminate (1,334,453 samples, 2.22%)</title><rect x="1084.7" y="293" width="26.2" height="15.0" fill="rgb(216,216,65)" rx="2" ry="2" />
<text  x="1087.69" y="303.5" >_..</text>
</g>
<g >
<title>[unknown] (24,868 samples, 0.04%)</title><rect x="1189.5" y="421" width="0.5" height="15.0" fill="rgb(205,58,58)" rx="2" ry="2" />
<text  x="1192.51" y="431.5" ></text>
</g>
<g >
<title>pow (444,171 samples, 0.74%)</title><rect x="1006.5" y="309" width="8.7" height="15.0" fill="rgb(254,128,128)" rx="2" ry="2" />
<text  x="1009.47" y="319.5" ></text>
</g>
<g >
<title>[ld-linux-x86-64.so.2] (2,721,528 samples, 4.52%)</title><rect x="10.0" y="389" width="53.4" height="15.0" fill="rgb(242,112,112)" rx="2" ry="2" />
<text  x="13.00" y="399.5" >[ld-l..</text>
</g>
<g >
<title>std::_Function_base::_M_empty (443,484 samples, 0.74%)</title><rect x="692.3" y="245" width="8.7" height="15.0" fill="rgb(218,218,65)" rx="2" ry="2" />
<text  x="695.26" y="255.5" ></text>
</g>
<g >
<title>mas_empty_area_rev (592,349 samples, 0.98%)</title><rect x="40.3" y="117" width="11.7" height="15.0" fill="rgb(243,113,113)" rx="2" ry="2" />
<text  x="43.34" y="127.5" ></text>
</g>
<g >
<title>ksys_mmap_pgoff (592,349 samples, 0.98%)</title><rect x="40.3" y="229" width="11.7" height="15.0" fill="rgb(244,114,114)" rx="2" ry="2" />
<text  x="43.34" y="239.5" ></text>
</g>
<g >
<title>[ld-linux-x86-64.so.2] (2,721,528 samples, 4.52%)</title><rect x="10.0" y="357" width="53.4" height="15.0" fill="rgb(242,112,112)" rx="2" ry="2" />
<text  x="13.00" y="367.5" >[ld-l..</text>
</g>
<g >
<title>do_user_addr_fault (508,437 samples, 0.84%)</title><rect x="63.4" y="373" width="9.9" height="15.0" fill="rgb(225,87,87)" rx="2" ry="2" />
<text  x="66.37" y="383.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;double  (5,816,800 samples, 9.67%)</title><rect x="735.7" y="229" width="114.1" height="15.0" fill="rgb(221,221,66)" rx="2" ry="2" />
<text  x="738.72" y="239.5" >std::_Function..</text>
</g>
<g >
<title>gi_dde (31,925,122 samples, 53.05%)</title><rect x="310.5" y="293" width="626.1" height="15.0" fill="rgb(207,60,60)" rx="2" ry="2" />
<text  x="313.55" y="303.5" >gi_dde</text>
</g>
<g >
<title>RingBuffer&lt;double&gt;::operator[] (7,079,265 samples, 11.76%)</title><rect x="484.0" y="245" width="138.8" height="15.0" fill="rgb(228,228,69)" rx="2" ry="2" />
<text  x="486.98" y="255.5" >RingBuffer&lt;double..</text>
</g>
<g >
<title>std::enable_if&lt;is_invocable_r_v&lt;double, double  (2,246,660 samples, 3.73%)</title><rect x="805.7" y="213" width="44.1" height="15.0" fill="rgb(221,221,66)" rx="2" ry="2" />
<text  x="808.73" y="223.5" >std:..</text>
</g>
<g >
<title>DoPri_5&lt;&amp; (49,135,069 samples, 81.65%)</title><rect x="103.7" y="325" width="963.5" height="15.0" fill="rgb(234,100,100)" rx="2" ry="2" />
<text  x="106.69" y="335.5" >DoPri_5&lt;&amp;</text>
</g>
<g >
<title>RingBuffer&lt;double&gt;::operator[] (426,847 samples, 0.71%)</title><rect x="919.5" y="277" width="8.4" height="15.0" fill="rgb(228,228,69)" rx="2" ry="2" />
<text  x="922.50" y="287.5" ></text>
</g>
<g >
<title>vm_unmapped_area (592,349 samples, 0.98%)</title><rect x="40.3" y="133" width="11.7" height="15.0" fill="rgb(233,98,98)" rx="2" ry="2" />
<text  x="43.34" y="143.5" ></text>
</g>
<g >
<title>clockevents_program_event (444,246 samples, 0.74%)</title><rect x="640.1" y="181" width="8.7" height="15.0" fill="rgb(243,113,113)" rx="2" ry="2" />
<text  x="643.14" y="191.5" ></text>
</g>
<g >
<title>do_fault (508,437 samples, 0.84%)</title><rect x="63.4" y="325" width="9.9" height="15.0" fill="rgb(247,119,119)" rx="2" ry="2" />
<text  x="66.37" y="335.5" ></text>
</g>
<g >
<title>std::function&lt;double  (477,313 samples, 0.79%)</title><rect x="76.9" y="293" width="9.4" height="15.0" fill="rgb(179,179,51)" rx="2" ry="2" />
<text  x="79.91" y="303.5" ></text>
</g>
<g >
<title>__sysvec_apic_timer_interrupt (444,246 samples, 0.74%)</title><rect x="640.1" y="213" width="8.7" height="15.0" fill="rgb(241,110,110)" rx="2" ry="2" />
<text  x="643.14" y="223.5" ></text>
</g>
<g >
<title>RingBuffer&lt;double&gt;::wrap (441,687 samples, 0.73%)</title><rect x="518.9" y="229" width="8.6" height="15.0" fill="rgb(220,220,66)" rx="2" ry="2" />
<text  x="521.87" y="239.5" ></text>
</g>
<g >
<title>double std::__invoke_impl&lt;double, double  (887,627 samples, 1.48%)</title><rect x="832.4" y="197" width="17.4" height="15.0" fill="rgb(193,193,56)" rx="2" ry="2" />
<text  x="835.38" y="207.5" ></text>
</g>
<g >
<title>wait_for_completion_state (12,286 samples, 0.02%)</title><rect x="1086.1" y="101" width="0.2" height="15.0" fill="rgb(224,85,85)" rx="2" ry="2" />
<text  x="1089.09" y="111.5" ></text>
</g>
<g >
<title>get_page_from_freelist (303,454 samples, 0.50%)</title><rect x="1104.9" y="53" width="6.0" height="15.0" fill="rgb(252,125,125)" rx="2" ry="2" />
<text  x="1107.90" y="63.5" ></text>
</g>
<g >
<title>std::_Function_base::_M_empty (443,095 samples, 0.74%)</title><rect x="727.0" y="229" width="8.7" height="15.0" fill="rgb(218,218,65)" rx="2" ry="2" />
<text  x="730.03" y="239.5" ></text>
</g>
<g >
<title>std::function&lt;double  (7,589,404 samples, 12.61%)</title><rect x="701.0" y="245" width="148.8" height="15.0" fill="rgb(179,179,51)" rx="2" ry="2" />
<text  x="703.96" y="255.5" >std::function&lt;double </text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::size (443,567 samples, 0.74%)</title><rect x="614.1" y="213" width="8.7" height="15.0" fill="rgb(207,207,61)" rx="2" ry="2" />
<text  x="617.10" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::_M_range_check (444,131 samples, 0.74%)</title><rect x="884.5" y="229" width="8.7" height="15.0" fill="rgb(193,193,56)" rx="2" ry="2" />
<text  x="887.49" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::size (444,131 samples, 0.74%)</title><rect x="884.5" y="213" width="8.7" height="15.0" fill="rgb(207,207,61)" rx="2" ry="2" />
<text  x="887.49" y="223.5" ></text>
</g>
<g >
<title>handle_mm_fault (508,437 samples, 0.84%)</title><rect x="63.4" y="357" width="9.9" height="15.0" fill="rgb(232,97,97)" rx="2" ry="2" />
<text  x="66.37" y="367.5" ></text>
</g>
<g >
<title>__sqrt_finite (867,083 samples, 1.44%)</title><rect x="1110.9" y="325" width="17.0" height="15.0" fill="rgb(234,99,99)" rx="2" ry="2" />
<text  x="1113.85" y="335.5" ></text>
</g>
<g >
<title>pipe_write (947,118 samples, 1.57%)</title><rect x="1086.3" y="69" width="18.6" height="15.0" fill="rgb(235,100,100)" rx="2" ry="2" />
<text  x="1089.33" y="79.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::operator[] (1,770,463 samples, 2.94%)</title><rect x="1145.5" y="325" width="34.8" height="15.0" fill="rgb(222,222,67)" rx="2" ry="2" />
<text  x="1148.54" y="335.5" >st..</text>
</g>
<g >
<title>__kernel_write_iter (947,118 samples, 1.57%)</title><rect x="1086.3" y="85" width="18.6" height="15.0" fill="rgb(212,68,68)" rx="2" ry="2" />
<text  x="1089.33" y="95.5" ></text>
</g>
<g >
<title>RingBuffer&lt;std::array&lt;double, 5ul&gt; &gt;::operator[] (897,164 samples, 1.49%)</title><rect x="901.9" y="261" width="17.6" height="15.0" fill="rgb(199,199,58)" rx="2" ry="2" />
<text  x="904.91" y="271.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (443,898 samples, 0.74%)</title><rect x="910.8" y="245" width="8.7" height="15.0" fill="rgb(230,94,94)" rx="2" ry="2" />
<text  x="913.80" y="255.5" ></text>
</g>
<g >
<title>__alloc_pages_noprof (303,454 samples, 0.50%)</title><rect x="1104.9" y="69" width="6.0" height="15.0" fill="rgb(201,51,51)" rx="2" ry="2" />
<text  x="1107.90" y="79.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (444,246 samples, 0.74%)</title><rect x="640.1" y="245" width="8.7" height="15.0" fill="rgb(230,94,94)" rx="2" ry="2" />
<text  x="643.14" y="255.5" ></text>
</g>
<g >
<title>[ld-linux-x86-64.so.2] (1,063,265 samples, 1.77%)</title><rect x="19.5" y="325" width="20.8" height="15.0" fill="rgb(242,112,112)" rx="2" ry="2" />
<text  x="22.49" y="335.5" ></text>
</g>
<g >
<title>abort (1,334,453 samples, 2.22%)</title><rect x="1084.7" y="261" width="26.2" height="15.0" fill="rgb(250,123,123)" rx="2" ry="2" />
<text  x="1087.69" y="271.5" >a..</text>
</g>
<g >
<title>[ld-linux-x86-64.so.2] (2,721,528 samples, 4.52%)</title><rect x="10.0" y="405" width="53.4" height="15.0" fill="rgb(242,112,112)" rx="2" ry="2" />
<text  x="13.00" y="415.5" >[ld-l..</text>
</g>
<g >
<title>call_usermodehelper_exec (12,286 samples, 0.02%)</title><rect x="1086.1" y="117" width="0.2" height="15.0" fill="rgb(209,63,63)" rx="2" ry="2" />
<text  x="1089.09" y="127.5" ></text>
</g>
<g >
<title>get_signal (1,334,453 samples, 2.22%)</title><rect x="1084.7" y="149" width="26.2" height="15.0" fill="rgb(206,60,60)" rx="2" ry="2" />
<text  x="1087.69" y="159.5" >g..</text>
</g>
<g >
<title>do_syscall_64 (182,415 samples, 0.30%)</title><rect x="73.3" y="389" width="3.6" height="15.0" fill="rgb(204,57,57)" rx="2" ry="2" />
<text  x="76.34" y="399.5" ></text>
</g>
<g >
<title>__handle_mm_fault (508,437 samples, 0.84%)</title><rect x="63.4" y="341" width="9.9" height="15.0" fill="rgb(202,53,53)" rx="2" ry="2" />
<text  x="66.37" y="351.5" ></text>
</g>
<g >
<title>filemap_map_pages (508,437 samples, 0.84%)</title><rect x="63.4" y="309" width="9.9" height="15.0" fill="rgb(227,89,89)" rx="2" ry="2" />
<text  x="66.37" y="319.5" ></text>
</g>
<g >
<title>[ld-linux-x86-64.so.2] (3,229,965 samples, 5.37%)</title><rect x="10.0" y="421" width="63.3" height="15.0" fill="rgb(242,112,112)" rx="2" ry="2" />
<text  x="13.00" y="431.5" >[ld-li..</text>
</g>
<g >
<title>History&lt;double, double&gt;::resolve_prehistory (10,690,792 samples, 17.77%)</title><rect x="657.5" y="261" width="209.7" height="15.0" fill="rgb(219,219,66)" rx="2" ry="2" />
<text  x="660.54" y="271.5" >History&lt;double, double&gt;::re..</text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::_M_range_check (1,317,714 samples, 2.19%)</title><rect x="536.2" y="213" width="25.9" height="15.0" fill="rgb(193,193,56)" rx="2" ry="2" />
<text  x="539.23" y="223.5" >s..</text>
</g>
<g >
<title>asm_exc_page_fault (508,437 samples, 0.84%)</title><rect x="63.4" y="405" width="9.9" height="15.0" fill="rgb(222,82,82)" rx="2" ry="2" />
<text  x="66.37" y="415.5" ></text>
</g>
<g >
<title>do_fault (581,772 samples, 0.97%)</title><rect x="52.0" y="261" width="11.4" height="15.0" fill="rgb(247,119,119)" rx="2" ry="2" />
<text  x="54.96" y="271.5" ></text>
</g>
<g >
<title>do_execveat_common.isra.0 (24,868 samples, 0.04%)</title><rect x="1189.5" y="357" width="0.5" height="15.0" fill="rgb(229,92,92)" rx="2" ry="2" />
<text  x="1192.51" y="367.5" ></text>
</g>
<g >
<title>intel_uncore_fw_release_timer (443,898 samples, 0.74%)</title><rect x="910.8" y="165" width="8.7" height="15.0" fill="rgb(248,121,121)" rx="2" ry="2" />
<text  x="913.80" y="175.5" ></text>
</g>
<g >
<title>do_execveat_common.isra.0 (182,415 samples, 0.30%)</title><rect x="73.3" y="357" width="3.6" height="15.0" fill="rgb(229,92,92)" rx="2" ry="2" />
<text  x="76.34" y="367.5" ></text>
</g>
<g >
<title>handle_mm_fault (581,772 samples, 0.97%)</title><rect x="52.0" y="293" width="11.4" height="15.0" fill="rgb(232,97,97)" rx="2" ry="2" />
<text  x="54.96" y="303.5" ></text>
</g>
<g >
<title>std::function&lt;double  (477,313 samples, 0.79%)</title><rect x="76.9" y="277" width="9.4" height="15.0" fill="rgb(179,179,51)" rx="2" ry="2" />
<text  x="79.91" y="287.5" ></text>
</g>
<g >
<title>std::function&lt;double  (477,313 samples, 0.79%)</title><rect x="76.9" y="213" width="9.4" height="15.0" fill="rgb(179,179,51)" rx="2" ry="2" />
<text  x="79.91" y="223.5" ></text>
</g>
<g >
<title>arch_do_signal_or_restart (1,334,453 samples, 2.22%)</title><rect x="1084.7" y="165" width="26.2" height="15.0" fill="rgb(252,126,126)" rx="2" ry="2" />
<text  x="1087.69" y="175.5" >a..</text>
</g>
<g >
<title>all (60,175,697 samples, 100%)</title><rect x="10.0" y="453" width="1180.0" height="15.0" fill="rgb(209,63,63)" rx="2" ry="2" />
<text  x="13.00" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::at (4,858,460 samples, 8.07%)</title><rect x="527.5" y="229" width="95.3" height="15.0" fill="rgb(191,191,56)" rx="2" ry="2" />
<text  x="530.53" y="239.5" >std::vector..</text>
</g>
<g >
<title>shift_arg_pages (182,415 samples, 0.30%)</title><rect x="73.3" y="293" width="3.6" height="15.0" fill="rgb(244,115,115)" rx="2" ry="2" />
<text  x="76.34" y="303.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (581,772 samples, 0.97%)</title><rect x="52.0" y="341" width="11.4" height="15.0" fill="rgb(222,82,82)" rx="2" ry="2" />
<text  x="54.96" y="351.5" ></text>
</g>
<g >
<title>_dl_catch_exception (592,349 samples, 0.98%)</title><rect x="40.3" y="341" width="11.7" height="15.0" fill="rgb(253,127,127)" rx="2" ry="2" />
<text  x="43.34" y="351.5" ></text>
</g>
<g >
<title>__sysvec_apic_timer_interrupt (443,898 samples, 0.74%)</title><rect x="910.8" y="213" width="8.7" height="15.0" fill="rgb(241,110,110)" rx="2" ry="2" />
<text  x="913.80" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;std::function&lt;double  (477,313 samples, 0.79%)</title><rect x="76.9" y="309" width="9.4" height="15.0" fill="rgb(199,199,58)" rx="2" ry="2" />
<text  x="79.91" y="319.5" ></text>
</g>
<g >
<title>[ld-linux-x86-64.so.2] (2,721,528 samples, 4.52%)</title><rect x="10.0" y="373" width="53.4" height="15.0" fill="rgb(242,112,112)" rx="2" ry="2" />
<text  x="13.00" y="383.5" >[ld-l..</text>
</g>
<g >
<title>do_syscall_64 (1,334,453 samples, 2.22%)</title><rect x="1084.7" y="197" width="26.2" height="15.0" fill="rgb(204,57,57)" rx="2" ry="2" />
<text  x="1087.69" y="207.5" >d..</text>
</g>
<g >
<title>double&amp;&amp; std::forward&lt;double&gt; (448,668 samples, 0.75%)</title><rect x="683.5" y="245" width="8.8" height="15.0" fill="rgb(220,220,66)" rx="2" ry="2" />
<text  x="686.47" y="255.5" ></text>
</g>
<g >
<title>main (56,738,449 samples, 94.29%)</title><rect x="76.9" y="373" width="1112.6" height="15.0" fill="rgb(242,112,112)" rx="2" ry="2" />
<text  x="79.91" y="383.5" >main</text>
</g>
<g >
<title>[libm.so.6] (3,564,197 samples, 5.92%)</title><rect x="936.6" y="309" width="69.9" height="15.0" fill="rgb(204,55,55)" rx="2" ry="2" />
<text  x="939.58" y="319.5" >[libm.s..</text>
</g>
<g >
<title>[ld-linux-x86-64.so.2] (562,979 samples, 0.94%)</title><rect x="29.3" y="309" width="11.0" height="15.0" fill="rgb(242,112,112)" rx="2" ry="2" />
<text  x="32.30" y="319.5" ></text>
</g>
<g >
<title>vma_expand (182,415 samples, 0.30%)</title><rect x="73.3" y="277" width="3.6" height="15.0" fill="rgb(219,78,78)" rx="2" ry="2" />
<text  x="76.34" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::operator[] (443,801 samples, 0.74%)</title><rect x="927.9" y="277" width="8.7" height="15.0" fill="rgb(222,222,67)" rx="2" ry="2" />
<text  x="930.87" y="287.5" ></text>
</g>
<g >
<title>std::unexpected (1,334,453 samples, 2.22%)</title><rect x="1084.7" y="309" width="26.2" height="15.0" fill="rgb(190,190,55)" rx="2" ry="2" />
<text  x="1087.69" y="319.5" >s..</text>
</g>
<g >
<title>void std::_Construct&lt;std::function&lt;double  (477,313 samples, 0.79%)</title><rect x="76.9" y="229" width="9.4" height="15.0" fill="rgb(198,198,58)" rx="2" ry="2" />
<text  x="79.91" y="239.5" ></text>
</g>
<g >
<title>DDEint&lt;&amp; (477,313 samples, 0.79%)</title><rect x="76.9" y="341" width="9.4" height="15.0" fill="rgb(214,70,70)" rx="2" ry="2" />
<text  x="79.91" y="351.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (443,898 samples, 0.74%)</title><rect x="910.8" y="229" width="8.7" height="15.0" fill="rgb(216,74,74)" rx="2" ry="2" />
<text  x="913.80" y="239.5" ></text>
</g>
<g >
<title>_start (56,738,449 samples, 94.29%)</title><rect x="76.9" y="421" width="1112.6" height="15.0" fill="rgb(244,114,114)" rx="2" ry="2" />
<text  x="79.91" y="431.5" >_start</text>
</g>
<g >
<title>hrtimer_interrupt (443,898 samples, 0.74%)</title><rect x="910.8" y="197" width="8.7" height="15.0" fill="rgb(226,88,88)" rx="2" ry="2" />
<text  x="913.80" y="207.5" ></text>
</g>
<g >
<title>std::function&lt;double  (477,313 samples, 0.79%)</title><rect x="76.9" y="261" width="9.4" height="15.0" fill="rgb(179,179,51)" rx="2" ry="2" />
<text  x="79.91" y="271.5" ></text>
</g>
<g >
<title>__hrtimer_run_queues (443,898 samples, 0.74%)</title><rect x="910.8" y="181" width="8.7" height="15.0" fill="rgb(235,102,102)" rx="2" ry="2" />
<text  x="913.80" y="191.5" ></text>
</g>
<g >
<title>perf_ctx_enable (24,868 samples, 0.04%)</title><rect x="1189.5" y="277" width="0.5" height="15.0" fill="rgb(225,86,86)" rx="2" ry="2" />
<text  x="1192.51" y="287.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;double  (1,797,442 samples, 2.99%)</title><rect x="770.5" y="213" width="35.2" height="15.0" fill="rgb(209,209,62)" rx="2" ry="2" />
<text  x="773.48" y="223.5" >st..</text>
</g>
<g >
<title>History&lt;double, double&gt;::History (477,313 samples, 0.79%)</title><rect x="76.9" y="325" width="9.4" height="15.0" fill="rgb(213,213,63)" rx="2" ry="2" />
<text  x="79.91" y="335.5" ></text>
</g>
<g >
<title>double  (445,119 samples, 0.74%)</title><rect x="841.1" y="181" width="8.7" height="15.0" fill="rgb(254,129,129)" rx="2" ry="2" />
<text  x="844.05" y="191.5" ></text>
</g>
<g >
<title>do_mmap (592,349 samples, 0.98%)</title><rect x="40.3" y="197" width="11.7" height="15.0" fill="rgb(225,87,87)" rx="2" ry="2" />
<text  x="43.34" y="207.5" ></text>
</g>
<g >
<title>[libm.so.6] (892,313 samples, 1.48%)</title><rect x="1067.2" y="325" width="17.5" height="15.0" fill="rgb(204,55,55)" rx="2" ry="2" />
<text  x="1070.19" y="335.5" ></text>
</g>
<g >
<title>perf-exec (24,868 samples, 0.04%)</title><rect x="1189.5" y="437" width="0.5" height="15.0" fill="rgb(229,93,93)" rx="2" ry="2" />
<text  x="1192.51" y="447.5" ></text>
</g>
<g >
<title>DoPri_5&lt;&amp; (56,261,136 samples, 93.49%)</title><rect x="86.3" y="341" width="1103.2" height="15.0" fill="rgb(234,100,100)" rx="2" ry="2" />
<text  x="89.27" y="351.5" >DoPri_5&lt;&amp;</text>
</g>
<g >
<title>next_uptodate_folio (581,772 samples, 0.97%)</title><rect x="52.0" y="229" width="11.4" height="15.0" fill="rgb(204,57,57)" rx="2" ry="2" />
<text  x="54.96" y="239.5" ></text>
</g>
<g >
<title>std::function&lt;double  (477,313 samples, 0.79%)</title><rect x="76.9" y="245" width="9.4" height="15.0" fill="rgb(179,179,51)" rx="2" ry="2" />
<text  x="79.91" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::size (883,934 samples, 1.47%)</title><rect x="544.7" y="197" width="17.4" height="15.0" fill="rgb(207,207,61)" rx="2" ry="2" />
<text  x="547.73" y="207.5" ></text>
</g>
<g >
<title>anon_vma_interval_tree_insert (182,415 samples, 0.30%)</title><rect x="73.3" y="245" width="3.6" height="15.0" fill="rgb(223,84,84)" rx="2" ry="2" />
<text  x="76.34" y="255.5" ></text>
</g>
<g >
<title>thp_get_unmapped_area_vmflags (592,349 samples, 0.98%)</title><rect x="40.3" y="165" width="11.7" height="15.0" fill="rgb(254,129,129)" rx="2" ry="2" />
<text  x="43.34" y="175.5" ></text>
</g>
<g >
<title>bprm_execve (24,868 samples, 0.04%)</title><rect x="1189.5" y="341" width="0.5" height="15.0" fill="rgb(214,71,71)" rx="2" ry="2" />
<text  x="1192.51" y="351.5" ></text>
</g>
<g >
<title>double* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;double const*, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;, double*&gt; (471,870 samples, 0.78%)</title><rect x="1180.3" y="293" width="9.2" height="15.0" fill="rgb(205,205,61)" rx="2" ry="2" />
<text  x="1183.26" y="303.5" ></text>
</g>
<g >
<title>DDEint&lt;&amp; (443,821 samples, 0.74%)</title><rect x="95.0" y="325" width="8.7" height="15.0" fill="rgb(214,70,70)" rx="2" ry="2" />
<text  x="97.98" y="335.5" ></text>
</g>
<g >
<title>History&lt;double, double&gt;::at_time (28,394,701 samples, 47.19%)</title><rect x="362.7" y="277" width="556.8" height="15.0" fill="rgb(209,209,62)" rx="2" ry="2" />
<text  x="365.70" y="287.5" >History&lt;double, double&gt;::at_time</text>
</g>
<g >
<title>__x64_sys_execve (182,415 samples, 0.30%)</title><rect x="73.3" y="373" width="3.6" height="15.0" fill="rgb(246,117,117)" rx="2" ry="2" />
<text  x="76.34" y="383.5" ></text>
</g>
<g >
<title>alloc_pages_mpol_noprof (303,454 samples, 0.50%)</title><rect x="1104.9" y="85" width="6.0" height="15.0" fill="rgb(224,85,85)" rx="2" ry="2" />
<text  x="1107.90" y="95.5" ></text>
</g>
<g >
<title>double  (443,343 samples, 0.74%)</title><rect x="797.0" y="197" width="8.7" height="15.0" fill="rgb(254,129,129)" rx="2" ry="2" />
<text  x="800.03" y="207.5" ></text>
</g>
<g >
<title>RingBuffer&lt;double&gt;::operator[] (1,327,165 samples, 2.21%)</title><rect x="867.2" y="261" width="26.0" height="15.0" fill="rgb(228,228,69)" rx="2" ry="2" />
<text  x="870.18" y="271.5" >R..</text>
</g>
<g >
<title>__get_unmapped_area (592,349 samples, 0.98%)</title><rect x="40.3" y="181" width="11.7" height="15.0" fill="rgb(202,53,53)" rx="2" ry="2" />
<text  x="43.34" y="191.5" ></text>
</g>
<g >
<title>vm_mmap_pgoff (592,349 samples, 0.98%)</title><rect x="40.3" y="213" width="11.7" height="15.0" fill="rgb(235,102,102)" rx="2" ry="2" />
<text  x="43.34" y="223.5" ></text>
</g>
<g >
<title>load_elf_binary (182,415 samples, 0.30%)</title><rect x="73.3" y="325" width="3.6" height="15.0" fill="rgb(220,79,79)" rx="2" ry="2" />
<text  x="76.34" y="335.5" ></text>
</g>
<g >
<title>dump_user_range (1,250,572 samples, 2.08%)</title><rect x="1086.3" y="101" width="24.6" height="15.0" fill="rgb(224,86,86)" rx="2" ry="2" />
<text  x="1089.33" y="111.5" >d..</text>
</g>
<g >
<title>fmaxf32x (443,164 samples, 0.74%)</title><rect x="1127.9" y="325" width="8.6" height="15.0" fill="rgb(207,61,61)" rx="2" ry="2" />
<text  x="1130.86" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::operator[] (2,652,459 samples, 4.41%)</title><rect x="1015.2" y="309" width="52.0" height="15.0" fill="rgb(222,222,67)" rx="2" ry="2" />
<text  x="1018.18" y="319.5" >std::..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (182,415 samples, 0.30%)</title><rect x="73.3" y="405" width="3.6" height="15.0" fill="rgb(215,72,72)" rx="2" ry="2" />
<text  x="76.34" y="415.5" ></text>
</g>
<g >
<title>exc_page_fault (581,772 samples, 0.97%)</title><rect x="52.0" y="325" width="11.4" height="15.0" fill="rgb(208,62,62)" rx="2" ry="2" />
<text  x="54.96" y="335.5" ></text>
</g>
</g>
</svg>
