<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="454" onload="init(evt)" viewBox="0 0 1200 454" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="454.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >cv_model</text>
<text id="details" x="10.00" y="437" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="437" > </text>
<g id="frames">
<g >
<title>do_vmi_munmap (2,388,698 samples, 2.02%)</title><rect x="34.7" y="117" width="23.8" height="15.0" fill="rgb(253,127,127)" rx="2" ry="2" />
<text  x="37.68" y="127.5" >d..</text>
</g>
<g >
<title>[libc.so.6] (822,539 samples, 0.69%)</title><rect x="1172.7" y="165" width="8.2" height="15.0" fill="rgb(220,79,79)" rx="2" ry="2" />
<text  x="1175.68" y="175.5" ></text>
</g>
<g >
<title>std::array&lt;double, 5ul&gt;* std::__uninitialized_default_n&lt;std::array&lt;double, 5ul&gt;*, unsigned long&gt; (757,099 samples, 0.64%)</title><rect x="917.3" y="229" width="7.6" height="15.0" fill="rgb(215,215,64)" rx="2" ry="2" />
<text  x="920.33" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::operator= (5,881,095 samples, 4.96%)</title><rect x="966.5" y="293" width="58.6" height="15.0" fill="rgb(217,217,65)" rx="2" ry="2" />
<text  x="969.51" y="303.5" >std::v..</text>
</g>
<g >
<title>[libm.so.6] (2,859,130 samples, 2.41%)</title><rect x="746.3" y="245" width="28.5" height="15.0" fill="rgb(204,55,55)" rx="2" ry="2" />
<text  x="749.32" y="255.5" >[l..</text>
</g>
<g >
<title>void std::_Destroy&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; (822,539 samples, 0.69%)</title><rect x="1172.7" y="261" width="8.2" height="15.0" fill="rgb(191,191,55)" rx="2" ry="2" />
<text  x="1175.68" y="271.5" ></text>
</g>
<g >
<title>[ld-linux-x86-64.so.2] (2,388,698 samples, 2.02%)</title><rect x="34.7" y="245" width="23.8" height="15.0" fill="rgb(242,112,112)" rx="2" ry="2" />
<text  x="37.68" y="255.5" >[..</text>
</g>
<g >
<title>do_execveat_common.isra.0 (48,989 samples, 0.04%)</title><rect x="1189.5" y="309" width="0.5" height="15.0" fill="rgb(229,92,92)" rx="2" ry="2" />
<text  x="1192.51" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;* std::__do_uninit_fill_n&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;*, unsigned long, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; (3,111,043 samples, 2.62%)</title><rect x="1090.4" y="213" width="31.0" height="15.0" fill="rgb(201,201,59)" rx="2" ry="2" />
<text  x="1093.43" y="223.5" >st..</text>
</g>
<g >
<title>double* std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;double const*, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;, double*&gt; (1,041,516 samples, 0.88%)</title><rect x="1090.4" y="133" width="10.4" height="15.0" fill="rgb(211,211,63)" rx="2" ry="2" />
<text  x="1093.43" y="143.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::_Vector_base (2,340,955 samples, 1.98%)</title><rect x="1067.1" y="277" width="23.3" height="15.0" fill="rgb(210,210,63)" rx="2" ry="2" />
<text  x="1070.13" y="287.5" >s..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (48,989 samples, 0.04%)</title><rect x="1189.5" y="357" width="0.5" height="15.0" fill="rgb(215,72,72)" rx="2" ry="2" />
<text  x="1192.51" y="367.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;double&gt;::allocate (682,088 samples, 0.58%)</title><rect x="1083.6" y="229" width="6.8" height="15.0" fill="rgb(223,223,67)" rx="2" ry="2" />
<text  x="1086.64" y="239.5" ></text>
</g>
<g >
<title>[ld-linux-x86-64.so.2] (4,867,342 samples, 4.11%)</title><rect x="10.0" y="341" width="48.5" height="15.0" fill="rgb(242,112,112)" rx="2" ry="2" />
<text  x="13.00" y="351.5" >[ld-..</text>
</g>
<g >
<title>History&lt;double, double&gt;::save (7,774,703 samples, 6.56%)</title><rect x="868.2" y="293" width="77.4" height="15.0" fill="rgb(198,198,58)" rx="2" ry="2" />
<text  x="871.25" y="303.5" >History&lt;..</text>
</g>
<g >
<title>std::__new_allocator&lt;double&gt;::deallocate (822,539 samples, 0.69%)</title><rect x="1172.7" y="197" width="8.2" height="15.0" fill="rgb(224,224,68)" rx="2" ry="2" />
<text  x="1175.68" y="207.5" ></text>
</g>
<g >
<title>[ld-linux-x86-64.so.2] (4,867,342 samples, 4.11%)</title><rect x="10.0" y="357" width="48.5" height="15.0" fill="rgb(242,112,112)" rx="2" ry="2" />
<text  x="13.00" y="367.5" >[ld-..</text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::vector (3,112,228 samples, 2.63%)</title><rect x="84.4" y="245" width="30.9" height="15.0" fill="rgb(212,212,63)" rx="2" ry="2" />
<text  x="87.37" y="255.5" >st..</text>
</g>
<g >
<title>double* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;double const*, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;, double*&gt; (1,002,322 samples, 0.85%)</title><rect x="84.4" y="213" width="9.9" height="15.0" fill="rgb(205,205,61)" rx="2" ry="2" />
<text  x="87.37" y="223.5" ></text>
</g>
<g >
<title>double* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;double const*, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;, double*&gt; (1,041,516 samples, 0.88%)</title><rect x="1090.4" y="149" width="10.4" height="15.0" fill="rgb(205,205,61)" rx="2" ry="2" />
<text  x="1093.43" y="159.5" ></text>
</g>
<g >
<title>main (111,977,691 samples, 94.47%)</title><rect x="66.1" y="325" width="1114.8" height="15.0" fill="rgb(242,112,112)" rx="2" ry="2" />
<text  x="69.08" y="335.5" >main</text>
</g>
<g >
<title>__tlb_batch_free_encoded_pages (867,983 samples, 0.73%)</title><rect x="1180.9" y="245" width="8.6" height="15.0" fill="rgb(200,51,51)" rx="2" ry="2" />
<text  x="1183.87" y="255.5" ></text>
</g>
<g >
<title>do_exit (867,983 samples, 0.73%)</title><rect x="1180.9" y="309" width="8.6" height="15.0" fill="rgb(229,92,92)" rx="2" ry="2" />
<text  x="1183.87" y="319.5" ></text>
</g>
<g >
<title>std::array&lt;double, 5ul&gt;* std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;std::array&lt;double, 5ul&gt;*, unsigned long&gt; (757,099 samples, 0.64%)</title><rect x="917.3" y="213" width="7.6" height="15.0" fill="rgb(218,218,65)" rx="2" ry="2" />
<text  x="920.33" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::operator[] (2,506,348 samples, 2.11%)</title><rect x="789.5" y="261" width="24.9" height="15.0" fill="rgb(222,222,67)" rx="2" ry="2" />
<text  x="792.47" y="271.5" >s..</text>
</g>
<g >
<title>double* std::copy&lt;__gnu_cxx::__normal_iterator&lt;double const*, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;, double*&gt; (1,041,516 samples, 0.88%)</title><rect x="1090.4" y="117" width="10.4" height="15.0" fill="rgb(221,221,66)" rx="2" ry="2" />
<text  x="1093.43" y="127.5" ></text>
</g>
<g >
<title>std::vector&lt;std::array&lt;double, 5ul&gt;, std::allocator&lt;std::array&lt;double, 5ul&gt; &gt; &gt;::_M_range_check (6,707,103 samples, 5.66%)</title><rect x="604.5" y="181" width="66.8" height="15.0" fill="rgb(196,196,57)" rx="2" ry="2" />
<text  x="607.54" y="191.5" >std::ve..</text>
</g>
<g >
<title>std::_Deque_iterator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;&amp;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;*&gt;::_Deque_iterator (1,045,082 samples, 0.88%)</title><rect x="956.1" y="245" width="10.4" height="15.0" fill="rgb(201,201,59)" rx="2" ry="2" />
<text  x="959.11" y="255.5" ></text>
</g>
<g >
<title>RingBuffer&lt;double&gt;::wrap (693,890 samples, 0.59%)</title><rect x="883.4" y="261" width="6.9" height="15.0" fill="rgb(220,220,66)" rx="2" ry="2" />
<text  x="886.44" y="271.5" ></text>
</g>
<g >
<title>std::array&lt;double, 5ul&gt;* std::__uninitialized_default_n_a&lt;std::array&lt;double, 5ul&gt;*, unsigned long, std::array&lt;double, 5ul&gt; &gt; (757,099 samples, 0.64%)</title><rect x="917.3" y="245" width="7.6" height="15.0" fill="rgb(203,203,60)" rx="2" ry="2" />
<text  x="920.33" y="255.5" ></text>
</g>
<g >
<title>DDEint_dopri_5&lt;&amp; (106,004,364 samples, 89.43%)</title><rect x="66.1" y="309" width="1055.3" height="15.0" fill="rgb(246,117,117)" rx="2" ry="2" />
<text  x="69.08" y="319.5" >DDEint_dopri_5&lt;&amp;</text>
</g>
<g >
<title>__x64_sys_execve (48,989 samples, 0.04%)</title><rect x="1189.5" y="325" width="0.5" height="15.0" fill="rgb(246,117,117)" rx="2" ry="2" />
<text  x="1192.51" y="335.5" ></text>
</g>
<g >
<title>do_syscall_64 (48,989 samples, 0.04%)</title><rect x="1189.5" y="341" width="0.5" height="15.0" fill="rgb(204,57,57)" rx="2" ry="2" />
<text  x="1192.51" y="351.5" ></text>
</g>
<g >
<title>RingBuffer&lt;double&gt;::operator[] (670,988 samples, 0.57%)</title><rect x="739.6" y="245" width="6.7" height="15.0" fill="rgb(228,228,69)" rx="2" ry="2" />
<text  x="742.64" y="255.5" ></text>
</g>
<g >
<title>RingBuffer&lt;double&gt;::wrap (2,023,191 samples, 1.71%)</title><rect x="353.7" y="197" width="20.1" height="15.0" fill="rgb(220,220,66)" rx="2" ry="2" />
<text  x="356.68" y="207.5" ></text>
</g>
<g >
<title>[unknown] (48,989 samples, 0.04%)</title><rect x="1189.5" y="373" width="0.5" height="15.0" fill="rgb(205,58,58)" rx="2" ry="2" />
<text  x="1192.51" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::at (727,984 samples, 0.61%)</title><rect x="568.9" y="197" width="7.3" height="15.0" fill="rgb(191,191,56)" rx="2" ry="2" />
<text  x="571.95" y="207.5" ></text>
</g>
<g >
<title>[libc.so.6] (815,090 samples, 0.69%)</title><rect x="996.7" y="181" width="8.1" height="15.0" fill="rgb(220,79,79)" rx="2" ry="2" />
<text  x="999.68" y="191.5" ></text>
</g>
<g >
<title>[libc.so.6] (1,002,322 samples, 0.85%)</title><rect x="84.4" y="117" width="9.9" height="15.0" fill="rgb(220,79,79)" rx="2" ry="2" />
<text  x="87.37" y="127.5" ></text>
</g>
<g >
<title>cv_dde (61,280,123 samples, 51.70%)</title><rect x="179.4" y="261" width="610.1" height="15.0" fill="rgb(253,127,127)" rx="2" ry="2" />
<text  x="182.40" y="271.5" >cv_dde</text>
</g>
<g >
<title>[ld-linux-x86-64.so.2] (2,388,698 samples, 2.02%)</title><rect x="34.7" y="277" width="23.8" height="15.0" fill="rgb(242,112,112)" rx="2" ry="2" />
<text  x="37.68" y="287.5" >[..</text>
</g>
<g >
<title>native_write_msr (48,989 samples, 0.04%)</title><rect x="1189.5" y="197" width="0.5" height="15.0" fill="rgb(236,102,102)" rx="2" ry="2" />
<text  x="1192.51" y="207.5" ></text>
</g>
<g >
<title>double* std::__copy_move_a&lt;false, __gnu_cxx::__normal_iterator&lt;double const*, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;, double*&gt; (1,041,516 samples, 0.88%)</title><rect x="1090.4" y="101" width="10.4" height="15.0" fill="rgb(180,180,52)" rx="2" ry="2" />
<text  x="1093.43" y="111.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::~vector (822,539 samples, 0.69%)</title><rect x="1172.7" y="245" width="8.2" height="15.0" fill="rgb(197,197,58)" rx="2" ry="2" />
<text  x="1175.68" y="255.5" ></text>
</g>
<g >
<title>kmem_cache_alloc_noprof (842,834 samples, 0.71%)</title><rect x="1164.3" y="101" width="8.4" height="15.0" fill="rgb(247,119,119)" rx="2" ry="2" />
<text  x="1167.29" y="111.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (842,834 samples, 0.71%)</title><rect x="1164.3" y="229" width="8.4" height="15.0" fill="rgb(215,72,72)" rx="2" ry="2" />
<text  x="1167.29" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::~vector (865,758 samples, 0.73%)</title><rect x="1155.7" y="309" width="8.6" height="15.0" fill="rgb(197,197,58)" rx="2" ry="2" />
<text  x="1158.67" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::operator[] (696,731 samples, 0.59%)</title><rect x="782.5" y="245" width="7.0" height="15.0" fill="rgb(222,222,67)" rx="2" ry="2" />
<text  x="785.53" y="255.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::_M_allocate (1,037,266 samples, 0.88%)</title><rect x="1111.1" y="133" width="10.3" height="15.0" fill="rgb(212,212,63)" rx="2" ry="2" />
<text  x="1114.08" y="143.5" ></text>
</g>
<g >
<title>__x64_sys_execve (766,011 samples, 0.65%)</title><rect x="58.5" y="325" width="7.6" height="15.0" fill="rgb(246,117,117)" rx="2" ry="2" />
<text  x="61.46" y="335.5" ></text>
</g>
<g >
<title>std::queue&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::deque&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::allocator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt; &gt;::push (3,112,228 samples, 2.63%)</title><rect x="84.4" y="277" width="30.9" height="15.0" fill="rgb(219,219,66)" rx="2" ry="2" />
<text  x="87.37" y="287.5" >st..</text>
</g>
<g >
<title>double* std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;double const*, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;, double*&gt; (1,470,258 samples, 1.24%)</title><rect x="1052.5" y="245" width="14.6" height="15.0" fill="rgb(211,211,63)" rx="2" ry="2" />
<text  x="1055.49" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::at (786,705 samples, 0.66%)</title><rect x="875.6" y="245" width="7.8" height="15.0" fill="rgb(191,191,56)" rx="2" ry="2" />
<text  x="878.60" y="255.5" ></text>
</g>
<g >
<title>[ld-linux-x86-64.so.2] (2,388,698 samples, 2.02%)</title><rect x="34.7" y="229" width="23.8" height="15.0" fill="rgb(242,112,112)" rx="2" ry="2" />
<text  x="37.68" y="239.5" >[..</text>
</g>
<g >
<title>RingBuffer&lt;double&gt;::operator[] (727,984 samples, 0.61%)</title><rect x="568.9" y="213" width="7.3" height="15.0" fill="rgb(228,228,69)" rx="2" ry="2" />
<text  x="571.95" y="223.5" ></text>
</g>
<g >
<title>do_mmap (766,011 samples, 0.65%)</title><rect x="58.5" y="229" width="7.6" height="15.0" fill="rgb(225,87,87)" rx="2" ry="2" />
<text  x="61.46" y="239.5" ></text>
</g>
<g >
<title>RingBuffer&lt;std::array&lt;double, 5ul&gt; &gt;::wrap (2,846,592 samples, 2.40%)</title><rect x="576.2" y="197" width="28.3" height="15.0" fill="rgb(190,190,55)" rx="2" ry="2" />
<text  x="579.20" y="207.5" >Ri..</text>
</g>
<g >
<title>std::vector&lt;std::array&lt;double, 5ul&gt;, std::allocator&lt;std::array&lt;double, 5ul&gt; &gt; &gt;::operator[] (745,002 samples, 0.63%)</title><rect x="671.3" y="181" width="7.4" height="15.0" fill="rgb(226,226,68)" rx="2" ry="2" />
<text  x="674.31" y="191.5" ></text>
</g>
<g >
<title>double* std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;double const*, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;, double*, double&gt; (2,233,018 samples, 1.88%)</title><rect x="1044.9" y="277" width="22.2" height="15.0" fill="rgb(194,194,56)" rx="2" ry="2" />
<text  x="1047.90" y="287.5" >d..</text>
</g>
<g >
<title>begin_new_exec (48,989 samples, 0.04%)</title><rect x="1189.5" y="261" width="0.5" height="15.0" fill="rgb(244,114,114)" rx="2" ry="2" />
<text  x="1192.51" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::_M_range_check (786,705 samples, 0.66%)</title><rect x="875.6" y="229" width="7.8" height="15.0" fill="rgb(193,193,56)" rx="2" ry="2" />
<text  x="878.60" y="239.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (867,983 samples, 0.73%)</title><rect x="1180.9" y="373" width="8.6" height="15.0" fill="rgb(215,72,72)" rx="2" ry="2" />
<text  x="1183.87" y="383.5" ></text>
</g>
<g >
<title>double* std::__copy_move_a2&lt;false, double const*, double*&gt; (1,041,516 samples, 0.88%)</title><rect x="1090.4" y="69" width="10.4" height="15.0" fill="rgb(205,205,61)" rx="2" ry="2" />
<text  x="1093.43" y="79.5" ></text>
</g>
<g >
<title>RingBuffer&lt;double&gt;::operator[] (786,705 samples, 0.66%)</title><rect x="875.6" y="261" width="7.8" height="15.0" fill="rgb(228,228,69)" rx="2" ry="2" />
<text  x="878.60" y="271.5" ></text>
</g>
<g >
<title>load_elf_binary (48,989 samples, 0.04%)</title><rect x="1189.5" y="277" width="0.5" height="15.0" fill="rgb(220,79,79)" rx="2" ry="2" />
<text  x="1192.51" y="287.5" ></text>
</g>
<g >
<title>std::array&lt;double, 5ul&gt;* std::__fill_n_a&lt;std::array&lt;double, 5ul&gt;*, unsigned long, std::array&lt;double, 5ul&gt; &gt; (757,099 samples, 0.64%)</title><rect x="917.3" y="181" width="7.6" height="15.0" fill="rgb(223,223,67)" rx="2" ry="2" />
<text  x="920.33" y="191.5" ></text>
</g>
<g >
<title>RingBuffer&lt;std::array&lt;double, 5ul&gt; &gt;::operator[] (10,900,254 samples, 9.20%)</title><rect x="576.2" y="213" width="108.5" height="15.0" fill="rgb(199,199,58)" rx="2" ry="2" />
<text  x="579.20" y="223.5" >RingBuffer&lt;st..</text>
</g>
<g >
<title>vm_mmap_pgoff (766,011 samples, 0.65%)</title><rect x="58.5" y="245" width="7.6" height="15.0" fill="rgb(235,102,102)" rx="2" ry="2" />
<text  x="61.46" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;std::array&lt;double, 5ul&gt;, std::allocator&lt;std::array&lt;double, 5ul&gt; &gt; &gt;::_M_default_initialize (757,099 samples, 0.64%)</title><rect x="917.3" y="261" width="7.6" height="15.0" fill="rgb(208,208,62)" rx="2" ry="2" />
<text  x="920.33" y="271.5" ></text>
</g>
<g >
<title>do_group_exit (867,983 samples, 0.73%)</title><rect x="1180.9" y="325" width="8.6" height="15.0" fill="rgb(216,73,73)" rx="2" ry="2" />
<text  x="1183.87" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::operator[] (986,643 samples, 0.83%)</title><rect x="480.0" y="197" width="9.8" height="15.0" fill="rgb(222,222,67)" rx="2" ry="2" />
<text  x="482.97" y="207.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;::deallocate (842,834 samples, 0.71%)</title><rect x="1164.3" y="261" width="8.4" height="15.0" fill="rgb(199,199,59)" rx="2" ry="2" />
<text  x="1167.29" y="271.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::~_Vector_base (822,539 samples, 0.69%)</title><rect x="1172.7" y="229" width="8.2" height="15.0" fill="rgb(195,195,57)" rx="2" ry="2" />
<text  x="1175.68" y="239.5" ></text>
</g>
<g >
<title>History&lt;double, double&gt;::at_time (49,449,554 samples, 41.72%)</title><rect x="247.4" y="245" width="492.2" height="15.0" fill="rgb(209,209,62)" rx="2" ry="2" />
<text  x="250.35" y="255.5" >History&lt;double, double&gt;::at_time</text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::_M_range_check (1,243,165 samples, 1.05%)</title><rect x="373.8" y="197" width="12.4" height="15.0" fill="rgb(193,193,56)" rx="2" ry="2" />
<text  x="376.83" y="207.5" ></text>
</g>
<g >
<title>double* std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;double const*, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;, double*&gt; (1,002,322 samples, 0.85%)</title><rect x="84.4" y="197" width="9.9" height="15.0" fill="rgb(211,211,63)" rx="2" ry="2" />
<text  x="87.37" y="207.5" ></text>
</g>
<g >
<title>__libc_start_main (111,977,691 samples, 94.47%)</title><rect x="66.1" y="357" width="1114.8" height="15.0" fill="rgb(234,99,99)" rx="2" ry="2" />
<text  x="69.08" y="367.5" >__libc_start_main</text>
</g>
<g >
<title>__munmap (842,834 samples, 0.71%)</title><rect x="1164.3" y="245" width="8.4" height="15.0" fill="rgb(207,60,60)" rx="2" ry="2" />
<text  x="1167.29" y="255.5" ></text>
</g>
<g >
<title>arch_get_unmapped_area_topdown_vmflags (766,011 samples, 0.65%)</title><rect x="58.5" y="181" width="7.6" height="15.0" fill="rgb(226,88,88)" rx="2" ry="2" />
<text  x="61.46" y="191.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2,388,698 samples, 2.02%)</title><rect x="34.7" y="213" width="23.8" height="15.0" fill="rgb(215,72,72)" rx="2" ry="2" />
<text  x="37.68" y="223.5" >e..</text>
</g>
<g >
<title>CompoundRingBuffer&lt;std::array&lt;double, 5ul&gt;, double&gt;::operator[] (1,154,886 samples, 0.97%)</title><rect x="557.5" y="213" width="11.4" height="15.0" fill="rgb(206,206,61)" rx="2" ry="2" />
<text  x="560.45" y="223.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::allocator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt;::_M_deallocate (842,834 samples, 0.71%)</title><rect x="1164.3" y="277" width="8.4" height="15.0" fill="rgb(226,226,68)" rx="2" ry="2" />
<text  x="1167.29" y="287.5" ></text>
</g>
<g >
<title>[libc.so.6] (111,977,691 samples, 94.47%)</title><rect x="66.1" y="341" width="1114.8" height="15.0" fill="rgb(220,79,79)" rx="2" ry="2" />
<text  x="69.08" y="351.5" >[libc.so.6]</text>
</g>
<g >
<title>cv_model (118,479,027 samples, 99.96%)</title><rect x="10.0" y="389" width="1179.5" height="15.0" fill="rgb(228,91,91)" rx="2" ry="2" />
<text  x="13.00" y="399.5" >cv_model</text>
</g>
<g >
<title>double* std::copy&lt;__gnu_cxx::__normal_iterator&lt;double const*, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;, double*&gt; (868,151 samples, 0.73%)</title><rect x="1058.5" y="229" width="8.6" height="15.0" fill="rgb(221,221,66)" rx="2" ry="2" />
<text  x="1061.48" y="239.5" ></text>
</g>
<g >
<title>tlb_finish_mmu (867,983 samples, 0.73%)</title><rect x="1180.9" y="261" width="8.6" height="15.0" fill="rgb(250,123,123)" rx="2" ry="2" />
<text  x="1183.87" y="271.5" ></text>
</g>
<g >
<title>RingBuffer&lt;double&gt;::operator[] (16,893,558 samples, 14.25%)</title><rect x="321.6" y="213" width="168.2" height="15.0" fill="rgb(228,228,69)" rx="2" ry="2" />
<text  x="324.61" y="223.5" >RingBuffer&lt;double&gt;::o..</text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::operator[] (2,748,772 samples, 2.32%)</title><rect x="429.7" y="181" width="27.4" height="15.0" fill="rgb(222,222,67)" rx="2" ry="2" />
<text  x="432.69" y="191.5" >s..</text>
</g>
<g >
<title>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::_M_deallocate (822,539 samples, 0.69%)</title><rect x="1172.7" y="213" width="8.2" height="15.0" fill="rgb(213,213,64)" rx="2" ry="2" />
<text  x="1175.68" y="223.5" ></text>
</g>
<g >
<title>cfree (822,539 samples, 0.69%)</title><rect x="1172.7" y="181" width="8.2" height="15.0" fill="rgb(220,80,80)" rx="2" ry="2" />
<text  x="1175.68" y="191.5" ></text>
</g>
<g >
<title>kmem_cache_alloc_noprof (2,388,698 samples, 2.02%)</title><rect x="34.7" y="53" width="23.8" height="15.0" fill="rgb(247,119,119)" rx="2" ry="2" />
<text  x="37.68" y="63.5" >k..</text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;*&gt; (822,539 samples, 0.69%)</title><rect x="1172.7" y="277" width="8.2" height="15.0" fill="rgb(185,185,53)" rx="2" ry="2" />
<text  x="1175.68" y="287.5" ></text>
</g>
<g >
<title>double* std::copy&lt;__gnu_cxx::__normal_iterator&lt;double const*, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;, double*&gt; (1,002,322 samples, 0.85%)</title><rect x="84.4" y="181" width="9.9" height="15.0" fill="rgb(221,221,66)" rx="2" ry="2" />
<text  x="87.37" y="191.5" ></text>
</g>
<g >
<title>[libc.so.6] (881,545 samples, 0.74%)</title><rect x="1146.9" y="245" width="8.8" height="15.0" fill="rgb(220,79,79)" rx="2" ry="2" />
<text  x="1149.90" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::vector (3,111,043 samples, 2.62%)</title><rect x="1090.4" y="181" width="31.0" height="15.0" fill="rgb(212,212,63)" rx="2" ry="2" />
<text  x="1093.43" y="191.5" >st..</text>
</g>
<g >
<title>pow (777,689 samples, 0.66%)</title><rect x="774.8" y="245" width="7.7" height="15.0" fill="rgb(254,128,128)" rx="2" ry="2" />
<text  x="777.79" y="255.5" ></text>
</g>
<g >
<title>double* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;double const*, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;, double*&gt; (1,470,258 samples, 1.24%)</title><rect x="1052.5" y="261" width="14.6" height="15.0" fill="rgb(205,205,61)" rx="2" ry="2" />
<text  x="1055.49" y="271.5" ></text>
</g>
<g >
<title>_dl_catch_exception (2,388,698 samples, 2.02%)</title><rect x="34.7" y="293" width="23.8" height="15.0" fill="rgb(253,127,127)" rx="2" ry="2" />
<text  x="37.68" y="303.5" >_..</text>
</g>
<g >
<title>perf_event_exec (48,989 samples, 0.04%)</title><rect x="1189.5" y="245" width="0.5" height="15.0" fill="rgb(214,71,71)" rx="2" ry="2" />
<text  x="1192.51" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::vector (721,344 samples, 0.61%)</title><rect x="983.9" y="261" width="7.2" height="15.0" fill="rgb(212,212,63)" rx="2" ry="2" />
<text  x="986.88" y="271.5" ></text>
</g>
<g >
<title>[ld-linux-x86-64.so.2] (4,867,342 samples, 4.11%)</title><rect x="10.0" y="373" width="48.5" height="15.0" fill="rgb(242,112,112)" rx="2" ry="2" />
<text  x="13.00" y="383.5" >[ld-..</text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::at (689,609 samples, 0.58%)</title><rect x="489.8" y="213" width="6.9" height="15.0" fill="rgb(191,191,56)" rx="2" ry="2" />
<text  x="492.79" y="223.5" ></text>
</g>
<g >
<title>double* std::__copy_move_a&lt;false, __gnu_cxx::__normal_iterator&lt;double const*, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;, double*&gt; (1,002,322 samples, 0.85%)</title><rect x="84.4" y="165" width="9.9" height="15.0" fill="rgb(180,180,52)" rx="2" ry="2" />
<text  x="87.37" y="175.5" ></text>
</g>
<g >
<title>double* std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;double const*, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;, double*, double&gt; (1,002,322 samples, 0.85%)</title><rect x="84.4" y="229" width="9.9" height="15.0" fill="rgb(194,194,56)" rx="2" ry="2" />
<text  x="87.37" y="239.5" ></text>
</g>
<g >
<title>DDEint&lt;&amp; (63,786,471 samples, 53.82%)</title><rect x="179.4" y="277" width="635.0" height="15.0" fill="rgb(214,70,70)" rx="2" ry="2" />
<text  x="182.40" y="287.5" >DDEint&lt;&amp;</text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::operator&lt;&lt; &lt;std::char_traits&lt;char&gt; &gt; (818,074 samples, 0.69%)</title><rect x="1138.8" y="309" width="8.1" height="15.0" fill="rgb(208,208,62)" rx="2" ry="2" />
<text  x="1141.75" y="319.5" ></text>
</g>
<g >
<title>__memcg_slab_post_alloc_hook (2,388,698 samples, 2.02%)</title><rect x="34.7" y="37" width="23.8" height="15.0" fill="rgb(202,53,53)" rx="2" ry="2" />
<text  x="37.68" y="47.5" >_..</text>
</g>
<g >
<title>anon_vma_clone (842,834 samples, 0.71%)</title><rect x="1164.3" y="117" width="8.4" height="15.0" fill="rgb(206,59,59)" rx="2" ry="2" />
<text  x="1167.29" y="127.5" ></text>
</g>
<g >
<title>[ld-linux-x86-64.so.2] (2,478,644 samples, 2.09%)</title><rect x="10.0" y="293" width="24.7" height="15.0" fill="rgb(242,112,112)" rx="2" ry="2" />
<text  x="13.00" y="303.5" >[..</text>
</g>
<g >
<title>thp_get_unmapped_area_vmflags (766,011 samples, 0.65%)</title><rect x="58.5" y="197" width="7.6" height="15.0" fill="rgb(254,129,129)" rx="2" ry="2" />
<text  x="61.46" y="207.5" ></text>
</g>
<g >
<title>History&lt;double, double&gt;::interpolate (19,673,616 samples, 16.60%)</title><rect x="496.7" y="229" width="195.8" height="15.0" fill="rgb(187,187,54)" rx="2" ry="2" />
<text  x="499.65" y="239.5" >History&lt;double, double&gt;::..</text>
</g>
<g >
<title>void std::vector&lt;double, std::allocator&lt;double&gt; &gt;::_M_realloc_append&lt;double const&amp;&gt; (881,545 samples, 0.74%)</title><rect x="1146.9" y="293" width="8.8" height="15.0" fill="rgb(219,219,66)" rx="2" ry="2" />
<text  x="1149.90" y="303.5" ></text>
</g>
<g >
<title>std::array&lt;double, 5ul&gt;* std::fill_n&lt;std::array&lt;double, 5ul&gt;*, unsigned long, std::array&lt;double, 5ul&gt; &gt; (757,099 samples, 0.64%)</title><rect x="917.3" y="197" width="7.6" height="15.0" fill="rgb(188,188,54)" rx="2" ry="2" />
<text  x="920.33" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::allocator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt;::_M_fill_initialize (3,111,043 samples, 2.62%)</title><rect x="1090.4" y="277" width="31.0" height="15.0" fill="rgb(222,222,67)" rx="2" ry="2" />
<text  x="1093.43" y="287.5" >st..</text>
</g>
<g >
<title>[ld-linux-x86-64.so.2] (2,388,698 samples, 2.02%)</title><rect x="34.7" y="261" width="23.8" height="15.0" fill="rgb(242,112,112)" rx="2" ry="2" />
<text  x="37.68" y="271.5" >[..</text>
</g>
<g >
<title>do_vmi_align_munmap (2,388,698 samples, 2.02%)</title><rect x="34.7" y="101" width="23.8" height="15.0" fill="rgb(207,60,60)" rx="2" ry="2" />
<text  x="37.68" y="111.5" >d..</text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::push_back (881,545 samples, 0.74%)</title><rect x="1146.9" y="309" width="8.8" height="15.0" fill="rgb(222,222,67)" rx="2" ry="2" />
<text  x="1149.90" y="319.5" ></text>
</g>
<g >
<title>do_syscall_64 (842,834 samples, 0.71%)</title><rect x="1164.3" y="213" width="8.4" height="15.0" fill="rgb(204,57,57)" rx="2" ry="2" />
<text  x="1167.29" y="223.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::operator!=&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;*, std::vector&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::allocator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt; &gt; (944,084 samples, 0.80%)</title><rect x="1129.4" y="309" width="9.4" height="15.0" fill="rgb(204,204,60)" rx="2" ry="2" />
<text  x="1132.35" y="319.5" ></text>
</g>
<g >
<title>double* std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;double const*, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;, double*, double&gt; (1,041,516 samples, 0.88%)</title><rect x="1090.4" y="165" width="10.4" height="15.0" fill="rgb(194,194,56)" rx="2" ry="2" />
<text  x="1093.43" y="175.5" ></text>
</g>
<g >
<title>do_syscall_64 (2,388,698 samples, 2.02%)</title><rect x="34.7" y="197" width="23.8" height="15.0" fill="rgb(204,57,57)" rx="2" ry="2" />
<text  x="37.68" y="207.5" >d..</text>
</g>
<g >
<title>[libc.so.6] (798,493 samples, 0.67%)</title><rect x="1121.4" y="309" width="8.0" height="15.0" fill="rgb(220,79,79)" rx="2" ry="2" />
<text  x="1124.40" y="319.5" ></text>
</g>
<g >
<title>__x64_sys_exit_group (867,983 samples, 0.73%)</title><rect x="1180.9" y="341" width="8.6" height="15.0" fill="rgb(210,64,64)" rx="2" ry="2" />
<text  x="1183.87" y="351.5" ></text>
</g>
<g >
<title>all (118,528,016 samples, 100%)</title><rect x="10.0" y="405" width="1180.0" height="15.0" fill="rgb(209,63,63)" rx="2" ry="2" />
<text  x="13.00" y="415.5" ></text>
</g>
<g >
<title>CompoundRingBuffer&lt;std::array&lt;double, 5ul&gt;, double&gt;::update (4,191,022 samples, 3.54%)</title><rect x="875.6" y="277" width="41.7" height="15.0" fill="rgb(199,199,58)" rx="2" ry="2" />
<text  x="878.60" y="287.5" >Com..</text>
</g>
<g >
<title>___slab_alloc (842,834 samples, 0.71%)</title><rect x="1164.3" y="85" width="8.4" height="15.0" fill="rgb(227,90,90)" rx="2" ry="2" />
<text  x="1167.29" y="95.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::_M_allocate (789,288 samples, 0.67%)</title><rect x="94.3" y="197" width="7.9" height="15.0" fill="rgb(212,212,63)" rx="2" ry="2" />
<text  x="97.34" y="207.5" ></text>
</g>
<g >
<title>cfree (815,090 samples, 0.69%)</title><rect x="996.7" y="197" width="8.1" height="15.0" fill="rgb(220,80,80)" rx="2" ry="2" />
<text  x="999.68" y="207.5" ></text>
</g>
<g >
<title>bprm_execve (48,989 samples, 0.04%)</title><rect x="1189.5" y="293" width="0.5" height="15.0" fill="rgb(214,71,71)" rx="2" ry="2" />
<text  x="1192.51" y="303.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::_Vector_impl_data::_M_copy_data (1,744,167 samples, 1.47%)</title><rect x="966.5" y="245" width="17.4" height="15.0" fill="rgb(201,201,59)" rx="2" ry="2" />
<text  x="969.51" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::operator[] (922,729 samples, 0.78%)</title><rect x="908.1" y="261" width="9.2" height="15.0" fill="rgb(222,222,67)" rx="2" ry="2" />
<text  x="911.14" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;* std::__uninitialized_fill_n_a&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;*, unsigned long, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; (3,111,043 samples, 2.62%)</title><rect x="1090.4" y="261" width="31.0" height="15.0" fill="rgb(212,212,63)" rx="2" ry="2" />
<text  x="1093.43" y="271.5" >st..</text>
</g>
<g >
<title>elf_load (766,011 samples, 0.65%)</title><rect x="58.5" y="261" width="7.6" height="15.0" fill="rgb(253,127,127)" rx="2" ry="2" />
<text  x="61.46" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::size (2,035,960 samples, 1.72%)</title><rect x="1004.8" y="277" width="20.3" height="15.0" fill="rgb(207,207,61)" rx="2" ry="2" />
<text  x="1007.79" y="287.5" ></text>
</g>
<g >
<title>__get_unmapped_area (766,011 samples, 0.65%)</title><rect x="58.5" y="213" width="7.6" height="15.0" fill="rgb(202,53,53)" rx="2" ry="2" />
<text  x="61.46" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;RingBuffer&lt;std::array&lt;double, 5ul&gt; &gt;, std::allocator&lt;RingBuffer&lt;std::array&lt;double, 5ul&gt; &gt; &gt; &gt;::operator[] (783,438 samples, 0.66%)</title><rect x="684.7" y="213" width="7.8" height="15.0" fill="rgb(187,187,54)" rx="2" ry="2" />
<text  x="687.71" y="223.5" ></text>
</g>
<g >
<title>CompoundRingBuffer&lt;std::array&lt;double, 5ul&gt;, double&gt;::bisect (23,481,005 samples, 19.81%)</title><rect x="262.9" y="229" width="233.8" height="15.0" fill="rgb(208,208,62)" rx="2" ry="2" />
<text  x="265.89" y="239.5" >CompoundRingBuffer&lt;std::array&lt;d..</text>
</g>
<g >
<title>__intel_pmu_enable_all.isra.0 (48,989 samples, 0.04%)</title><rect x="1189.5" y="213" width="0.5" height="15.0" fill="rgb(238,105,105)" rx="2" ry="2" />
<text  x="1192.51" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::_S_relocate (881,545 samples, 0.74%)</title><rect x="1146.9" y="277" width="8.8" height="15.0" fill="rgb(181,181,52)" rx="2" ry="2" />
<text  x="1149.90" y="287.5" ></text>
</g>
<g >
<title>[ld-linux-x86-64.so.2] (4,867,342 samples, 4.11%)</title><rect x="10.0" y="309" width="48.5" height="15.0" fill="rgb(242,112,112)" rx="2" ry="2" />
<text  x="13.00" y="319.5" >[ld-..</text>
</g>
<g >
<title>std::vector&lt;RingBuffer&lt;std::array&lt;double, 5ul&gt; &gt;, std::allocator&lt;RingBuffer&lt;std::array&lt;double, 5ul&gt; &gt; &gt; &gt;::operator[] (1,154,886 samples, 0.97%)</title><rect x="557.5" y="197" width="11.4" height="15.0" fill="rgb(187,187,54)" rx="2" ry="2" />
<text  x="560.45" y="207.5" ></text>
</g>
<g >
<title>double* std::__relocate_a&lt;double*, double*, std::allocator&lt;double&gt; &gt; (881,545 samples, 0.74%)</title><rect x="1146.9" y="261" width="8.8" height="15.0" fill="rgb(221,221,67)" rx="2" ry="2" />
<text  x="1149.90" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;std::array&lt;double, 5ul&gt;, std::allocator&lt;std::array&lt;double, 5ul&gt; &gt; &gt;::vector (757,099 samples, 0.64%)</title><rect x="917.3" y="277" width="7.6" height="15.0" fill="rgb(215,215,64)" rx="2" ry="2" />
<text  x="920.33" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::at (9,418,312 samples, 7.95%)</title><rect x="386.2" y="197" width="93.8" height="15.0" fill="rgb(191,191,56)" rx="2" ry="2" />
<text  x="389.20" y="207.5" >std::vector..</text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::size (3,941,050 samples, 3.32%)</title><rect x="692.5" y="181" width="39.2" height="15.0" fill="rgb(207,207,61)" rx="2" ry="2" />
<text  x="695.51" y="191.5" >std..</text>
</g>
<g >
<title>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::_M_create_storage (789,288 samples, 0.67%)</title><rect x="94.3" y="213" width="7.9" height="15.0" fill="rgb(208,208,62)" rx="2" ry="2" />
<text  x="97.34" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;std::array&lt;double, 5ul&gt;, std::allocator&lt;std::array&lt;double, 5ul&gt; &gt; &gt;::at (7,452,105 samples, 6.29%)</title><rect x="604.5" y="197" width="74.2" height="15.0" fill="rgb(194,194,57)" rx="2" ry="2" />
<text  x="607.54" y="207.5" >std::vec..</text>
</g>
<g >
<title>DDEint_dopri_5&lt;&amp; (74,919,292 samples, 63.21%)</title><rect x="122.4" y="293" width="745.8" height="15.0" fill="rgb(246,117,117)" rx="2" ry="2" />
<text  x="125.39" y="303.5" >DDEint_dopri_5&lt;&amp;</text>
</g>
<g >
<title>do_vmi_munmap (842,834 samples, 0.71%)</title><rect x="1164.3" y="165" width="8.4" height="15.0" fill="rgb(253,127,127)" rx="2" ry="2" />
<text  x="1167.29" y="175.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::_M_allocate (2,340,955 samples, 1.98%)</title><rect x="1067.1" y="245" width="23.3" height="15.0" fill="rgb(212,212,63)" rx="2" ry="2" />
<text  x="1070.13" y="255.5" >s..</text>
</g>
<g >
<title>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::_Vector_impl::_Vector_impl (1,320,618 samples, 1.11%)</title><rect x="102.2" y="213" width="13.1" height="15.0" fill="rgb(178,178,51)" rx="2" ry="2" />
<text  x="105.20" y="223.5" ></text>
</g>
<g >
<title>double* std::__copy_move_a2&lt;false, double const*, double*&gt; (1,002,322 samples, 0.85%)</title><rect x="84.4" y="133" width="9.9" height="15.0" fill="rgb(205,205,61)" rx="2" ry="2" />
<text  x="87.37" y="143.5" ></text>
</g>
<g >
<title>mmap_region (2,388,698 samples, 2.02%)</title><rect x="34.7" y="133" width="23.8" height="15.0" fill="rgb(228,92,92)" rx="2" ry="2" />
<text  x="37.68" y="143.5" >m..</text>
</g>
<g >
<title>std::vector&lt;std::array&lt;double, 5ul&gt;, std::allocator&lt;std::array&lt;double, 5ul&gt; &gt; &gt;::~vector (2,087,661 samples, 1.76%)</title><rect x="924.9" y="277" width="20.7" height="15.0" fill="rgb(200,200,59)" rx="2" ry="2" />
<text  x="927.86" y="287.5" ></text>
</g>
<g >
<title>std::array&lt;double, 5ul&gt;::operator[] (793,136 samples, 0.67%)</title><rect x="731.7" y="229" width="7.9" height="15.0" fill="rgb(218,218,65)" rx="2" ry="2" />
<text  x="734.75" y="239.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::array&lt;double, 5ul&gt;, std::allocator&lt;std::array&lt;double, 5ul&gt; &gt; &gt;::~_Vector_base (1,061,498 samples, 0.90%)</title><rect x="935.1" y="261" width="10.5" height="15.0" fill="rgb(198,198,58)" rx="2" ry="2" />
<text  x="938.08" y="271.5" ></text>
</g>
<g >
<title>free_pages_and_swap_cache (867,983 samples, 0.73%)</title><rect x="1180.9" y="229" width="8.6" height="15.0" fill="rgb(219,78,78)" rx="2" ry="2" />
<text  x="1183.87" y="239.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::_Vector_impl::_Vector_impl (721,344 samples, 0.61%)</title><rect x="983.9" y="245" width="7.2" height="15.0" fill="rgb(178,178,51)" rx="2" ry="2" />
<text  x="986.88" y="255.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;double&gt;::deallocate (815,090 samples, 0.69%)</title><rect x="996.7" y="213" width="8.1" height="15.0" fill="rgb(224,224,68)" rx="2" ry="2" />
<text  x="999.68" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::size (2,300,879 samples, 1.94%)</title><rect x="457.1" y="181" width="22.9" height="15.0" fill="rgb(207,207,61)" rx="2" ry="2" />
<text  x="460.06" y="191.5" >s..</text>
</g>
<g >
<title>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::_Vector_base (1,037,266 samples, 0.88%)</title><rect x="1111.1" y="165" width="10.3" height="15.0" fill="rgb(210,210,63)" rx="2" ry="2" />
<text  x="1114.08" y="175.5" ></text>
</g>
<g >
<title>__split_vma (842,834 samples, 0.71%)</title><rect x="1164.3" y="133" width="8.4" height="15.0" fill="rgb(236,102,102)" rx="2" ry="2" />
<text  x="1167.29" y="143.5" ></text>
</g>
<g >
<title>do_execveat_common.isra.0 (766,011 samples, 0.65%)</title><rect x="58.5" y="309" width="7.6" height="15.0" fill="rgb(229,92,92)" rx="2" ry="2" />
<text  x="61.46" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;* std::__uninitialized_fill_n&lt;false&gt;::__uninit_fill_n&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;*, unsigned long, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; (3,111,043 samples, 2.62%)</title><rect x="1090.4" y="229" width="31.0" height="15.0" fill="rgb(215,215,64)" rx="2" ry="2" />
<text  x="1093.43" y="239.5" >st..</text>
</g>
<g >
<title>ksys_mmap_pgoff (2,388,698 samples, 2.02%)</title><rect x="34.7" y="181" width="23.8" height="15.0" fill="rgb(244,114,114)" rx="2" ry="2" />
<text  x="37.68" y="191.5" >k..</text>
</g>
<g >
<title>vm_mmap_pgoff (2,388,698 samples, 2.02%)</title><rect x="34.7" y="165" width="23.8" height="15.0" fill="rgb(235,102,102)" rx="2" ry="2" />
<text  x="37.68" y="175.5" >v..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (766,011 samples, 0.65%)</title><rect x="58.5" y="357" width="7.6" height="15.0" fill="rgb(215,72,72)" rx="2" ry="2" />
<text  x="61.46" y="367.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::_Vector_impl_data::_M_swap_data (1,744,167 samples, 1.47%)</title><rect x="966.5" y="261" width="17.4" height="15.0" fill="rgb(201,201,59)" rx="2" ry="2" />
<text  x="969.51" y="271.5" ></text>
</g>
<g >
<title>perf_ctx_enable (48,989 samples, 0.04%)</title><rect x="1189.5" y="229" width="0.5" height="15.0" fill="rgb(225,86,86)" rx="2" ry="2" />
<text  x="1192.51" y="239.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (818,074 samples, 0.69%)</title><rect x="1138.8" y="293" width="8.1" height="15.0" fill="rgb(192,192,56)" rx="2" ry="2" />
<text  x="1141.75" y="303.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::_M_create_storage (2,340,955 samples, 1.98%)</title><rect x="1067.1" y="261" width="23.3" height="15.0" fill="rgb(208,208,62)" rx="2" ry="2" />
<text  x="1070.13" y="271.5" >s..</text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::at (3,941,050 samples, 3.32%)</title><rect x="692.5" y="213" width="39.2" height="15.0" fill="rgb(191,191,56)" rx="2" ry="2" />
<text  x="695.51" y="223.5" >std..</text>
</g>
<g >
<title>std::deque&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::allocator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt;::push_back (3,112,228 samples, 2.63%)</title><rect x="84.4" y="261" width="30.9" height="15.0" fill="rgb(202,202,59)" rx="2" ry="2" />
<text  x="87.37" y="271.5" >st..</text>
</g>
<g >
<title>std::deque&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::allocator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt;::front (2,095,973 samples, 1.77%)</title><rect x="945.6" y="277" width="20.9" height="15.0" fill="rgb(175,175,50)" rx="2" ry="2" />
<text  x="948.65" y="287.5" ></text>
</g>
<g >
<title>load_elf_binary (766,011 samples, 0.65%)</title><rect x="58.5" y="277" width="7.6" height="15.0" fill="rgb(220,79,79)" rx="2" ry="2" />
<text  x="61.46" y="287.5" ></text>
</g>
<g >
<title>std::deque&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::allocator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt;::begin (2,095,973 samples, 1.77%)</title><rect x="945.6" y="261" width="20.9" height="15.0" fill="rgb(211,211,63)" rx="2" ry="2" />
<text  x="948.65" y="271.5" ></text>
</g>
<g >
<title>std::queue&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::deque&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::allocator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt; &gt;::front (2,095,973 samples, 1.77%)</title><rect x="945.6" y="293" width="20.9" height="15.0" fill="rgb(188,188,54)" rx="2" ry="2" />
<text  x="948.65" y="303.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::~_Vector_base (1,379,624 samples, 1.16%)</title><rect x="991.1" y="245" width="13.7" height="15.0" fill="rgb(195,195,57)" rx="2" ry="2" />
<text  x="994.06" y="255.5" ></text>
</g>
<g >
<title>vm_area_dup (2,388,698 samples, 2.02%)</title><rect x="34.7" y="69" width="23.8" height="15.0" fill="rgb(252,125,125)" rx="2" ry="2" />
<text  x="37.68" y="79.5" >v..</text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::_M_move_assign (3,845,135 samples, 3.24%)</title><rect x="966.5" y="277" width="38.3" height="15.0" fill="rgb(175,175,50)" rx="2" ry="2" />
<text  x="969.51" y="287.5" >std..</text>
</g>
<g >
<title>std::vector&lt;std::array&lt;double, 5ul&gt;, std::allocator&lt;std::array&lt;double, 5ul&gt; &gt; &gt;::size (5,054,656 samples, 4.26%)</title><rect x="621.0" y="165" width="50.3" height="15.0" fill="rgb(210,210,62)" rx="2" ry="2" />
<text  x="623.99" y="175.5" >std::..</text>
</g>
<g >
<title>__vm_munmap (842,834 samples, 0.71%)</title><rect x="1164.3" y="181" width="8.4" height="15.0" fill="rgb(228,92,92)" rx="2" ry="2" />
<text  x="1167.29" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;std::array&lt;double, 5ul&gt;, std::allocator&lt;std::array&lt;double, 5ul&gt; &gt; &gt;::operator[] (601,557 samples, 0.51%)</title><rect x="678.7" y="197" width="6.0" height="15.0" fill="rgb(226,226,68)" rx="2" ry="2" />
<text  x="681.73" y="207.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::allocator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt;::~_Vector_base (842,834 samples, 0.71%)</title><rect x="1164.3" y="293" width="8.4" height="15.0" fill="rgb(207,207,61)" rx="2" ry="2" />
<text  x="1167.29" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::_M_range_check (3,941,050 samples, 3.32%)</title><rect x="692.5" y="197" width="39.2" height="15.0" fill="rgb(193,193,56)" rx="2" ry="2" />
<text  x="695.51" y="207.5" >std..</text>
</g>
<g >
<title>RingBuffer&lt;double&gt;::operator[] (3,941,050 samples, 3.32%)</title><rect x="692.5" y="229" width="39.2" height="15.0" fill="rgb(228,228,69)" rx="2" ry="2" />
<text  x="695.51" y="239.5" >Rin..</text>
</g>
<g >
<title>bprm_execve (766,011 samples, 0.65%)</title><rect x="58.5" y="293" width="7.6" height="15.0" fill="rgb(214,71,71)" rx="2" ry="2" />
<text  x="61.46" y="303.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::_M_deallocate (815,090 samples, 0.69%)</title><rect x="996.7" y="229" width="8.1" height="15.0" fill="rgb(213,213,64)" rx="2" ry="2" />
<text  x="999.68" y="239.5" ></text>
</g>
<g >
<title>double* std::__copy_move_a1&lt;false, double const*, double*&gt; (868,151 samples, 0.73%)</title><rect x="1058.5" y="197" width="8.6" height="15.0" fill="rgb(212,212,63)" rx="2" ry="2" />
<text  x="1061.48" y="207.5" ></text>
</g>
<g >
<title>double* std::__copy_move_a1&lt;false, double const*, double*&gt; (1,002,322 samples, 0.85%)</title><rect x="84.4" y="149" width="9.9" height="15.0" fill="rgb(212,212,63)" rx="2" ry="2" />
<text  x="87.37" y="159.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::allocator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt;::vector (3,111,043 samples, 2.62%)</title><rect x="1090.4" y="293" width="31.0" height="15.0" fill="rgb(224,224,68)" rx="2" ry="2" />
<text  x="1093.43" y="303.5" >st..</text>
</g>
<g >
<title>perf-exec (48,989 samples, 0.04%)</title><rect x="1189.5" y="389" width="0.5" height="15.0" fill="rgb(229,93,93)" rx="2" ry="2" />
<text  x="1192.51" y="399.5" ></text>
</g>
<g >
<title>do_vmi_align_munmap (842,834 samples, 0.71%)</title><rect x="1164.3" y="149" width="8.4" height="15.0" fill="rgb(207,60,60)" rx="2" ry="2" />
<text  x="1167.29" y="159.5" ></text>
</g>
<g >
<title>__x64_sys_munmap (842,834 samples, 0.71%)</title><rect x="1164.3" y="197" width="8.4" height="15.0" fill="rgb(201,52,52)" rx="2" ry="2" />
<text  x="1167.29" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::vector (5,448,152 samples, 4.60%)</title><rect x="1036.2" y="293" width="54.2" height="15.0" fill="rgb(212,212,63)" rx="2" ry="2" />
<text  x="1039.19" y="303.5" >std::..</text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::operator[] (1,118,025 samples, 0.94%)</title><rect x="1025.1" y="293" width="11.1" height="15.0" fill="rgb(222,222,67)" rx="2" ry="2" />
<text  x="1028.06" y="303.5" ></text>
</g>
<g >
<title>do_mmap (2,388,698 samples, 2.02%)</title><rect x="34.7" y="149" width="23.8" height="15.0" fill="rgb(225,87,87)" rx="2" ry="2" />
<text  x="37.68" y="159.5" >d..</text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::allocator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt;::~vector (1,665,373 samples, 1.41%)</title><rect x="1164.3" y="309" width="16.6" height="15.0" fill="rgb(209,209,62)" rx="2" ry="2" />
<text  x="1167.29" y="319.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::_M_get_Tp_allocator (1,032,261 samples, 0.87%)</title><rect x="1100.8" y="165" width="10.3" height="15.0" fill="rgb(199,199,58)" rx="2" ry="2" />
<text  x="1103.80" y="175.5" ></text>
</g>
<g >
<title>do_syscall_64 (867,983 samples, 0.73%)</title><rect x="1180.9" y="357" width="8.6" height="15.0" fill="rgb(204,57,57)" rx="2" ry="2" />
<text  x="1183.87" y="367.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;*&gt; (822,539 samples, 0.69%)</title><rect x="1172.7" y="293" width="8.2" height="15.0" fill="rgb(175,175,50)" rx="2" ry="2" />
<text  x="1175.68" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;RingBuffer&lt;std::array&lt;double, 5ul&gt; &gt;, std::allocator&lt;RingBuffer&lt;std::array&lt;double, 5ul&gt; &gt; &gt; &gt;::size (1,787,698 samples, 1.51%)</title><rect x="890.3" y="261" width="17.8" height="15.0" fill="rgb(226,226,68)" rx="2" ry="2" />
<text  x="893.34" y="271.5" ></text>
</g>
<g >
<title>exit_mmap (867,983 samples, 0.73%)</title><rect x="1180.9" y="277" width="8.6" height="15.0" fill="rgb(234,99,99)" rx="2" ry="2" />
<text  x="1183.87" y="287.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::_M_create_storage (1,037,266 samples, 0.88%)</title><rect x="1111.1" y="149" width="10.3" height="15.0" fill="rgb(208,208,62)" rx="2" ry="2" />
<text  x="1114.08" y="159.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::operator[] (707,307 samples, 0.60%)</title><rect x="115.3" y="277" width="7.1" height="15.0" fill="rgb(222,222,67)" rx="2" ry="2" />
<text  x="118.35" y="287.5" ></text>
</g>
<g >
<title>__split_vma (2,388,698 samples, 2.02%)</title><rect x="34.7" y="85" width="23.8" height="15.0" fill="rgb(236,102,102)" rx="2" ry="2" />
<text  x="37.68" y="95.5" >_..</text>
</g>
<g >
<title>__mmput (867,983 samples, 0.73%)</title><rect x="1180.9" y="293" width="8.6" height="15.0" fill="rgb(248,120,120)" rx="2" ry="2" />
<text  x="1183.87" y="303.5" ></text>
</g>
<g >
<title>[ld-linux-x86-64.so.2] (4,867,342 samples, 4.11%)</title><rect x="10.0" y="325" width="48.5" height="15.0" fill="rgb(242,112,112)" rx="2" ry="2" />
<text  x="13.00" y="335.5" >[ld-..</text>
</g>
<g >
<title>[unknown] (766,011 samples, 0.65%)</title><rect x="58.5" y="373" width="7.6" height="15.0" fill="rgb(205,58,58)" rx="2" ry="2" />
<text  x="61.46" y="383.5" ></text>
</g>
<g >
<title>double* std::__copy_move_a1&lt;false, double const*, double*&gt; (1,041,516 samples, 0.88%)</title><rect x="1090.4" y="85" width="10.4" height="15.0" fill="rgb(212,212,63)" rx="2" ry="2" />
<text  x="1093.43" y="95.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::~vector (1,379,624 samples, 1.16%)</title><rect x="991.1" y="261" width="13.7" height="15.0" fill="rgb(197,197,58)" rx="2" ry="2" />
<text  x="994.06" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::operator[] (5,406,874 samples, 4.56%)</title><rect x="814.4" y="277" width="53.8" height="15.0" fill="rgb(222,222,67)" rx="2" ry="2" />
<text  x="817.42" y="287.5" >std::..</text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::size (786,705 samples, 0.66%)</title><rect x="875.6" y="213" width="7.8" height="15.0" fill="rgb(207,207,61)" rx="2" ry="2" />
<text  x="878.60" y="223.5" ></text>
</g>
<g >
<title>_start (111,977,691 samples, 94.47%)</title><rect x="66.1" y="373" width="1114.8" height="15.0" fill="rgb(244,114,114)" rx="2" ry="2" />
<text  x="69.08" y="383.5" >_start</text>
</g>
<g >
<title>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::_Vector_base (2,109,906 samples, 1.78%)</title><rect x="94.3" y="229" width="21.0" height="15.0" fill="rgb(210,210,63)" rx="2" ry="2" />
<text  x="97.34" y="239.5" ></text>
</g>
<g >
<title>do_syscall_64 (766,011 samples, 0.65%)</title><rect x="58.5" y="341" width="7.6" height="15.0" fill="rgb(204,57,57)" rx="2" ry="2" />
<text  x="61.46" y="351.5" ></text>
</g>
<g >
<title>double* std::__copy_move_a&lt;false, __gnu_cxx::__normal_iterator&lt;double const*, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;, double*&gt; (868,151 samples, 0.73%)</title><rect x="1058.5" y="213" width="8.6" height="15.0" fill="rgb(180,180,52)" rx="2" ry="2" />
<text  x="1061.48" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;* std::uninitialized_fill_n&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;*, unsigned long, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; (3,111,043 samples, 2.62%)</title><rect x="1090.4" y="245" width="31.0" height="15.0" fill="rgb(186,186,54)" rx="2" ry="2" />
<text  x="1093.43" y="255.5" >st..</text>
</g>
<g >
<title>DDEint&lt;&amp; (4,398,660 samples, 3.71%)</title><rect x="78.6" y="293" width="43.8" height="15.0" fill="rgb(214,70,70)" rx="2" ry="2" />
<text  x="81.60" y="303.5" >DDEi..</text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::_M_range_check (2,158,297 samples, 1.82%)</title><rect x="408.2" y="181" width="21.5" height="15.0" fill="rgb(193,193,56)" rx="2" ry="2" />
<text  x="411.21" y="191.5" >s..</text>
</g>
<g >
<title>void std::_Construct&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt; const&amp;&gt; (3,111,043 samples, 2.62%)</title><rect x="1090.4" y="197" width="31.0" height="15.0" fill="rgb(215,215,64)" rx="2" ry="2" />
<text  x="1093.43" y="207.5" >vo..</text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::size (1,512,843 samples, 1.28%)</title><rect x="414.6" y="165" width="15.1" height="15.0" fill="rgb(207,207,61)" rx="2" ry="2" />
<text  x="417.63" y="175.5" ></text>
</g>
</g>
</svg>
