<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="502" onload="init(evt)" viewBox="0 0 1200 502" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="502.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >cv_model</text>
<text id="details" x="10.00" y="485" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="485" > </text>
<g id="frames">
<g >
<title>__pte_offset_map_lock (1,139,796 samples, 0.42%)</title><rect x="1091.6" y="165" width="5.0" height="15.0" fill="rgb(239,106,106)" rx="2" ry="2" />
<text  x="1094.64" y="175.5" ></text>
</g>
<g >
<title>exc_page_fault (1,139,796 samples, 0.42%)</title><rect x="1091.6" y="245" width="5.0" height="15.0" fill="rgb(208,62,62)" rx="2" ry="2" />
<text  x="1094.64" y="255.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::_M_allocate (1,123,325 samples, 0.42%)</title><rect x="1013.1" y="117" width="4.9" height="15.0" fill="rgb(212,212,63)" rx="2" ry="2" />
<text  x="1016.05" y="127.5" ></text>
</g>
<g >
<title>std::array&lt;double, 5ul&gt;* std::__addressof&lt;std::array&lt;double, 5ul&gt; &gt; (1,147,993 samples, 0.43%)</title><rect x="908.9" y="229" width="5.1" height="15.0" fill="rgb(182,182,52)" rx="2" ry="2" />
<text  x="911.95" y="239.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;*, std::vector&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::allocator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt; &gt;::operator++ (1,141,112 samples, 0.42%)</title><rect x="993.3" y="341" width="5.0" height="15.0" fill="rgb(198,198,58)" rx="2" ry="2" />
<text  x="996.33" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::_M_range_check (1,135,609 samples, 0.42%)</title><rect x="870.0" y="261" width="5.0" height="15.0" fill="rgb(193,193,56)" rx="2" ry="2" />
<text  x="873.02" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::at (1,145,374 samples, 0.42%)</title><rect x="425.7" y="245" width="5.1" height="15.0" fill="rgb(191,191,56)" rx="2" ry="2" />
<text  x="428.74" y="255.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::_Vector_impl::_Vector_impl (1,131,802 samples, 0.42%)</title><rect x="1170.1" y="213" width="5.0" height="15.0" fill="rgb(178,178,51)" rx="2" ry="2" />
<text  x="1173.10" y="223.5" ></text>
</g>
<g >
<title>DoPri_5&lt;&amp; (218,873,326 samples, 81.21%)</title><rect x="30.1" y="341" width="958.2" height="15.0" fill="rgb(234,100,100)" rx="2" ry="2" />
<text  x="33.07" y="351.5" >DoPri_5&lt;&amp;</text>
</g>
<g >
<title>void std::_Destroy&lt;double*&gt; (1,129,225 samples, 0.42%)</title><rect x="1120.9" y="229" width="5.0" height="15.0" fill="rgb(193,193,56)" rx="2" ry="2" />
<text  x="1123.95" y="239.5" ></text>
</g>
<g >
<title>RingBuffer&lt;double&gt;::operator[] (4,524,466 samples, 1.68%)</title><rect x="855.2" y="293" width="19.8" height="15.0" fill="rgb(228,228,69)" rx="2" ry="2" />
<text  x="858.18" y="303.5" ></text>
</g>
<g >
<title>do_mmap (1,295,787 samples, 0.48%)</title><rect x="24.4" y="277" width="5.7" height="15.0" fill="rgb(225,87,87)" rx="2" ry="2" />
<text  x="27.39" y="287.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::_Vector_base (1,036,509 samples, 0.38%)</title><rect x="1111.6" y="229" width="4.5" height="15.0" fill="rgb(210,210,63)" rx="2" ry="2" />
<text  x="1114.60" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::vector (1,036,509 samples, 0.38%)</title><rect x="1111.6" y="245" width="4.5" height="15.0" fill="rgb(212,212,63)" rx="2" ry="2" />
<text  x="1114.60" y="255.5" ></text>
</g>
<g >
<title>mmap_region (1,295,787 samples, 0.48%)</title><rect x="24.4" y="261" width="5.7" height="15.0" fill="rgb(228,92,92)" rx="2" ry="2" />
<text  x="27.39" y="271.5" ></text>
</g>
<g >
<title>History&lt;double, double&gt;::at_time (121,476,608 samples, 45.07%)</title><rect x="154.1" y="277" width="531.8" height="15.0" fill="rgb(209,209,62)" rx="2" ry="2" />
<text  x="157.07" y="287.5" >History&lt;double, double&gt;::at_time</text>
</g>
<g >
<title>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::_Vector_impl_data::_Vector_impl_data (1,131,802 samples, 0.42%)</title><rect x="1170.1" y="197" width="5.0" height="15.0" fill="rgb(206,206,61)" rx="2" ry="2" />
<text  x="1173.10" y="207.5" ></text>
</g>
<g >
<title>History&lt;double, double&gt;::save (25,868,826 samples, 9.60%)</title><rect x="820.2" y="325" width="113.3" height="15.0" fill="rgb(198,198,58)" rx="2" ry="2" />
<text  x="823.23" y="335.5" >History&lt;doubl..</text>
</g>
<g >
<title>unmap_vmas (1,104,901 samples, 0.41%)</title><rect x="1184.8" y="309" width="4.9" height="15.0" fill="rgb(242,111,111)" rx="2" ry="2" />
<text  x="1187.82" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;* std::__addressof&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; (1,144,556 samples, 0.42%)</title><rect x="1101.6" y="277" width="5.1" height="15.0" fill="rgb(191,191,56)" rx="2" ry="2" />
<text  x="1104.64" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;* std::vector&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::allocator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt;::_M_allocate_and_copy&lt;__gnu_cxx::__normal_iterator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; const*, std::vector&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::allocator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt; &gt; &gt; (4,529,534 samples, 1.68%)</title><rect x="1160.2" y="341" width="19.8" height="15.0" fill="rgb(194,194,57)" rx="2" ry="2" />
<text  x="1163.17" y="351.5" ></text>
</g>
<g >
<title>CompoundRingBuffer&lt;std::array&lt;double, 5ul&gt;, double&gt;::operator[] (2,278,082 samples, 0.85%)</title><rect x="523.2" y="245" width="10.0" height="15.0" fill="rgb(206,206,61)" rx="2" ry="2" />
<text  x="526.24" y="255.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::_Vector_base (1,123,325 samples, 0.42%)</title><rect x="1013.1" y="149" width="4.9" height="15.0" fill="rgb(210,210,63)" rx="2" ry="2" />
<text  x="1016.05" y="159.5" ></text>
</g>
<g >
<title>std::remove_reference&lt;std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::_Vector_impl&amp;&gt;::type&amp;&amp; std::move&lt;std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::_Vector_impl&amp;&gt; (1,036,509 samples, 0.38%)</title><rect x="1111.6" y="213" width="4.5" height="15.0" fill="rgb(227,227,68)" rx="2" ry="2" />
<text  x="1114.60" y="223.5" ></text>
</g>
<g >
<title>[ld-linux-x86-64.so.2] (3,287,143 samples, 1.22%)</title><rect x="10.0" y="421" width="14.4" height="15.0" fill="rgb(242,112,112)" rx="2" ry="2" />
<text  x="13.00" y="431.5" ></text>
</g>
<g >
<title>bprm_execve (1,295,787 samples, 0.48%)</title><rect x="24.4" y="341" width="5.7" height="15.0" fill="rgb(214,71,71)" rx="2" ry="2" />
<text  x="27.39" y="351.5" ></text>
</g>
<g >
<title>RingBuffer&lt;std::array&lt;double, 5ul&gt; &gt;::operator[] (1,068,206 samples, 0.40%)</title><rect x="879.4" y="293" width="4.6" height="15.0" fill="rgb(199,199,58)" rx="2" ry="2" />
<text  x="882.36" y="303.5" ></text>
</g>
<g >
<title>std::array&lt;double, 5ul&gt;* std::__uninitialized_default_n_a&lt;std::array&lt;double, 5ul&gt;*, unsigned long, std::array&lt;double, 5ul&gt; &gt; (3,495,507 samples, 1.30%)</title><rect x="903.8" y="277" width="15.3" height="15.0" fill="rgb(203,203,60)" rx="2" ry="2" />
<text  x="906.84" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::operator[] (2,216,328 samples, 0.82%)</title><rect x="754.3" y="293" width="9.7" height="15.0" fill="rgb(222,222,67)" rx="2" ry="2" />
<text  x="757.27" y="303.5" ></text>
</g>
<g >
<title>do_execveat_common.isra.0 (1,295,787 samples, 0.48%)</title><rect x="24.4" y="357" width="5.7" height="15.0" fill="rgb(229,92,92)" rx="2" ry="2" />
<text  x="27.39" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;std::array&lt;double, 5ul&gt;, std::allocator&lt;std::array&lt;double, 5ul&gt; &gt; &gt;::vector (7,953,924 samples, 2.95%)</title><rect x="889.2" y="309" width="34.8" height="15.0" fill="rgb(215,215,64)" rx="2" ry="2" />
<text  x="892.15" y="319.5" >st..</text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::allocator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt;::operator[] (1,143,004 samples, 0.42%)</title><rect x="815.2" y="309" width="5.0" height="15.0" fill="rgb(180,180,51)" rx="2" ry="2" />
<text  x="818.22" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;std::array&lt;double, 5ul&gt;, std::allocator&lt;std::array&lt;double, 5ul&gt; &gt; &gt;::operator[] (3,320,592 samples, 1.23%)</title><rect x="589.1" y="213" width="14.6" height="15.0" fill="rgb(226,226,68)" rx="2" ry="2" />
<text  x="592.14" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::size (1,257,453 samples, 0.47%)</title><rect x="670.9" y="229" width="5.5" height="15.0" fill="rgb(207,207,61)" rx="2" ry="2" />
<text  x="673.86" y="239.5" ></text>
</g>
<g >
<title>all (269,514,185 samples, 100%)</title><rect x="10.0" y="453" width="1180.0" height="15.0" fill="rgb(209,63,63)" rx="2" ry="2" />
<text  x="13.00" y="463.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::_Vector_impl_data::_M_swap_data (1,111,451 samples, 0.41%)</title><rect x="973.8" y="309" width="4.9" height="15.0" fill="rgb(201,201,59)" rx="2" ry="2" />
<text  x="976.79" y="319.5" ></text>
</g>
<g >
<title>__x64_sys_exit_group (1,104,901 samples, 0.41%)</title><rect x="1184.8" y="389" width="4.9" height="15.0" fill="rgb(210,64,64)" rx="2" ry="2" />
<text  x="1187.82" y="399.5" ></text>
</g>
<g >
<title>__mmput (1,104,901 samples, 0.41%)</title><rect x="1184.8" y="341" width="4.9" height="15.0" fill="rgb(248,120,120)" rx="2" ry="2" />
<text  x="1187.82" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::vector (5,828,505 samples, 2.16%)</title><rect x="948.3" y="325" width="25.5" height="15.0" fill="rgb(212,212,63)" rx="2" ry="2" />
<text  x="951.27" y="335.5" >s..</text>
</g>
<g >
<title>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::_Vector_base (1,131,802 samples, 0.42%)</title><rect x="1170.1" y="229" width="5.0" height="15.0" fill="rgb(210,210,63)" rx="2" ry="2" />
<text  x="1173.10" y="239.5" ></text>
</g>
<g >
<title>vm_mmap_pgoff (1,295,787 samples, 0.48%)</title><rect x="24.4" y="293" width="5.7" height="15.0" fill="rgb(235,102,102)" rx="2" ry="2" />
<text  x="27.39" y="303.5" ></text>
</g>
<g >
<title>pow (2,117,552 samples, 0.79%)</title><rect x="738.8" y="277" width="9.3" height="15.0" fill="rgb(254,128,128)" rx="2" ry="2" />
<text  x="741.79" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::~vector (1,126,532 samples, 0.42%)</title><rect x="1130.8" y="277" width="5.0" height="15.0" fill="rgb(197,197,58)" rx="2" ry="2" />
<text  x="1133.84" y="287.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::array&lt;double, 5ul&gt;, std::allocator&lt;std::array&lt;double, 5ul&gt; &gt; &gt;::_Vector_base (1,077,057 samples, 0.40%)</title><rect x="889.2" y="293" width="4.7" height="15.0" fill="rgb(214,214,64)" rx="2" ry="2" />
<text  x="892.15" y="303.5" ></text>
</g>
<g >
<title>exit_mmap (1,104,901 samples, 0.41%)</title><rect x="1184.8" y="325" width="4.9" height="15.0" fill="rgb(234,99,99)" rx="2" ry="2" />
<text  x="1187.82" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;std::array&lt;double, 5ul&gt;, std::allocator&lt;std::array&lt;double, 5ul&gt; &gt; &gt;::~vector (2,172,539 samples, 0.81%)</title><rect x="924.0" y="309" width="9.5" height="15.0" fill="rgb(200,200,59)" rx="2" ry="2" />
<text  x="926.98" y="319.5" ></text>
</g>
<g >
<title>[ld-linux-x86-64.so.2] (3,287,143 samples, 1.22%)</title><rect x="10.0" y="405" width="14.4" height="15.0" fill="rgb(242,112,112)" rx="2" ry="2" />
<text  x="13.00" y="415.5" ></text>
</g>
<g >
<title>RingBuffer&lt;double&gt;::advance (3,627,771 samples, 1.35%)</title><rect x="839.3" y="293" width="15.9" height="15.0" fill="rgb(210,210,62)" rx="2" ry="2" />
<text  x="842.30" y="303.5" ></text>
</g>
<g >
<title>RingBuffer&lt;double&gt;::wrap (1,137,889 samples, 0.42%)</title><rect x="420.8" y="245" width="4.9" height="15.0" fill="rgb(220,220,66)" rx="2" ry="2" />
<text  x="423.75" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; const*, std::vector&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::allocator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;*&gt; (4,529,534 samples, 1.68%)</title><rect x="1160.2" y="309" width="19.8" height="15.0" fill="rgb(220,220,66)" rx="2" ry="2" />
<text  x="1163.17" y="319.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::_Vector_base (3,496,373 samples, 1.30%)</title><rect x="958.5" y="309" width="15.3" height="15.0" fill="rgb(210,210,63)" rx="2" ry="2" />
<text  x="961.48" y="319.5" ></text>
</g>
<g >
<title>double* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;double const, double&gt; (1,120,808 samples, 0.42%)</title><rect x="1008.1" y="37" width="5.0" height="15.0" fill="rgb(178,178,51)" rx="2" ry="2" />
<text  x="1011.15" y="47.5" ></text>
</g>
<g >
<title>elf_load (1,295,787 samples, 0.48%)</title><rect x="24.4" y="309" width="5.7" height="15.0" fill="rgb(253,127,127)" rx="2" ry="2" />
<text  x="27.39" y="319.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::_Vector_impl_data::_M_copy_data (2,307,570 samples, 0.86%)</title><rect x="1027.5" y="293" width="10.1" height="15.0" fill="rgb(201,201,59)" rx="2" ry="2" />
<text  x="1030.47" y="303.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;*&gt; (2,185,616 samples, 0.81%)</title><rect x="1145.7" y="261" width="9.6" height="15.0" fill="rgb(185,185,53)" rx="2" ry="2" />
<text  x="1148.70" y="271.5" ></text>
</g>
<g >
<title>std::array&lt;double, 5ul&gt;* std::__uninitialized_default_n&lt;std::array&lt;double, 5ul&gt;*, unsigned long&gt; (3,495,507 samples, 1.30%)</title><rect x="903.8" y="261" width="15.3" height="15.0" fill="rgb(215,215,64)" rx="2" ry="2" />
<text  x="906.84" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::allocator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt;::operator= (4,529,534 samples, 1.68%)</title><rect x="1160.2" y="357" width="19.8" height="15.0" fill="rgb(229,229,69)" rx="2" ry="2" />
<text  x="1163.17" y="367.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::_M_get_Tp_allocator (1,133,132 samples, 0.42%)</title><rect x="1165.1" y="229" width="5.0" height="15.0" fill="rgb(199,199,58)" rx="2" ry="2" />
<text  x="1168.14" y="239.5" ></text>
</g>
<g >
<title>do_exit (1,104,901 samples, 0.41%)</title><rect x="1184.8" y="357" width="4.9" height="15.0" fill="rgb(229,92,92)" rx="2" ry="2" />
<text  x="1187.82" y="367.5" ></text>
</g>
<g >
<title>[ld-linux-x86-64.so.2] (3,287,143 samples, 1.22%)</title><rect x="10.0" y="357" width="14.4" height="15.0" fill="rgb(242,112,112)" rx="2" ry="2" />
<text  x="13.00" y="367.5" ></text>
</g>
<g >
<title>operator new (1,143,020 samples, 0.42%)</title><rect x="958.5" y="245" width="5.0" height="15.0" fill="rgb(212,67,67)" rx="2" ry="2" />
<text  x="961.48" y="255.5" ></text>
</g>
<g >
<title>__x64_sys_execve (78,819 samples, 0.03%)</title><rect x="1189.7" y="373" width="0.3" height="15.0" fill="rgb(246,117,117)" rx="2" ry="2" />
<text  x="1192.65" y="383.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::_Vector_impl::_Vector_impl (2,353,353 samples, 0.87%)</title><rect x="963.5" y="293" width="10.3" height="15.0" fill="rgb(178,178,51)" rx="2" ry="2" />
<text  x="966.48" y="303.5" ></text>
</g>
<g >
<title>RingBuffer&lt;double&gt;::wrap (1,137,821 samples, 0.42%)</title><rect x="865.0" y="277" width="5.0" height="15.0" fill="rgb(220,220,66)" rx="2" ry="2" />
<text  x="868.04" y="287.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1,104,901 samples, 0.41%)</title><rect x="1184.8" y="421" width="4.9" height="15.0" fill="rgb(215,72,72)" rx="2" ry="2" />
<text  x="1187.82" y="431.5" ></text>
</g>
<g >
<title>do_group_exit (1,104,901 samples, 0.41%)</title><rect x="1184.8" y="373" width="4.9" height="15.0" fill="rgb(216,73,73)" rx="2" ry="2" />
<text  x="1187.82" y="383.5" ></text>
</g>
<g >
<title>CompoundRingBuffer&lt;std::array&lt;double, 5ul&gt;, double&gt;::update (12,415,358 samples, 4.61%)</title><rect x="834.8" y="309" width="54.4" height="15.0" fill="rgb(199,199,58)" rx="2" ry="2" />
<text  x="837.79" y="319.5" >Compo..</text>
</g>
<g >
<title>[ld-linux-x86-64.so.2] (3,287,143 samples, 1.22%)</title><rect x="10.0" y="389" width="14.4" height="15.0" fill="rgb(242,112,112)" rx="2" ry="2" />
<text  x="13.00" y="399.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;1ul, std::vector&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::allocator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt;, false&gt;::_Head_base&lt;std::vector&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::allocator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt;&amp;&gt; (4,486,403 samples, 1.66%)</title><rect x="998.3" y="277" width="19.7" height="15.0" fill="rgb(186,186,54)" rx="2" ry="2" />
<text  x="1001.33" y="287.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;*&gt; (3,387,701 samples, 1.26%)</title><rect x="1125.9" y="309" width="14.8" height="15.0" fill="rgb(185,185,53)" rx="2" ry="2" />
<text  x="1128.89" y="319.5" ></text>
</g>
<g >
<title>RingBuffer&lt;double&gt;::wrap (6,538,992 samples, 2.43%)</title><rect x="295.6" y="229" width="28.7" height="15.0" fill="rgb(220,220,66)" rx="2" ry="2" />
<text  x="298.63" y="239.5" >Ri..</text>
</g>
<g >
<title>std::array&lt;double, 5ul&gt;::operator[] (3,635,184 samples, 1.35%)</title><rect x="614.0" y="245" width="15.9" height="15.0" fill="rgb(218,218,65)" rx="2" ry="2" />
<text  x="616.99" y="255.5" ></text>
</g>
<g >
<title>DDEint&lt;&amp; (253,676,806 samples, 94.12%)</title><rect x="30.1" y="357" width="1110.6" height="15.0" fill="rgb(214,70,70)" rx="2" ry="2" />
<text  x="33.07" y="367.5" >DDEint&lt;&amp;</text>
</g>
<g >
<title>[libc.so.6] (1,126,532 samples, 0.42%)</title><rect x="1130.8" y="213" width="5.0" height="15.0" fill="rgb(220,79,79)" rx="2" ry="2" />
<text  x="1133.84" y="223.5" ></text>
</g>
<g >
<title>double* std::__copy_move_a&lt;false, __gnu_cxx::__normal_iterator&lt;double const*, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;, double*&gt; (2,241,755 samples, 0.83%)</title><rect x="1003.2" y="85" width="9.9" height="15.0" fill="rgb(180,180,52)" rx="2" ry="2" />
<text  x="1006.24" y="95.5" ></text>
</g>
<g >
<title>do_execveat_common.isra.0 (78,819 samples, 0.03%)</title><rect x="1189.7" y="357" width="0.3" height="15.0" fill="rgb(229,92,92)" rx="2" ry="2" />
<text  x="1192.65" y="367.5" ></text>
</g>
<g >
<title>void std::__relocate_object_a&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::allocator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt; (3,264,451 samples, 1.21%)</title><rect x="1111.6" y="261" width="14.3" height="15.0" fill="rgb(186,186,54)" rx="2" ry="2" />
<text  x="1114.60" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::_M_range_check (2,200,301 samples, 0.82%)</title><rect x="538.2" y="213" width="9.6" height="15.0" fill="rgb(193,193,56)" rx="2" ry="2" />
<text  x="541.17" y="223.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::allocator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt; &gt;::_Tuple_impl&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;&amp;, std::vector&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::allocator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt;&amp;, void&gt; (4,486,403 samples, 1.66%)</title><rect x="998.3" y="309" width="19.7" height="15.0" fill="rgb(186,186,54)" rx="2" ry="2" />
<text  x="1001.33" y="319.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::_M_create_storage (1,123,325 samples, 0.42%)</title><rect x="1013.1" y="133" width="4.9" height="15.0" fill="rgb(208,208,62)" rx="2" ry="2" />
<text  x="1016.05" y="143.5" ></text>
</g>
<g >
<title>[ld-linux-x86-64.so.2] (3,287,143 samples, 1.22%)</title><rect x="10.0" y="341" width="14.4" height="15.0" fill="rgb(242,112,112)" rx="2" ry="2" />
<text  x="13.00" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::operator= (5,588,223 samples, 2.07%)</title><rect x="1018.0" y="341" width="24.4" height="15.0" fill="rgb(217,217,65)" rx="2" ry="2" />
<text  x="1020.97" y="351.5" >s..</text>
</g>
<g >
<title>std::__new_allocator&lt;double&gt;::allocate (2,220,784 samples, 0.82%)</title><rect x="1081.9" y="261" width="9.7" height="15.0" fill="rgb(223,223,67)" rx="2" ry="2" />
<text  x="1084.91" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::~vector (1,093,515 samples, 0.41%)</title><rect x="1150.5" y="229" width="4.8" height="15.0" fill="rgb(197,197,58)" rx="2" ry="2" />
<text  x="1153.48" y="239.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::_M_create_storage (2,220,784 samples, 0.82%)</title><rect x="1081.9" y="293" width="9.7" height="15.0" fill="rgb(208,208,62)" rx="2" ry="2" />
<text  x="1084.91" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::~vector (2,227,942 samples, 0.83%)</title><rect x="1116.1" y="245" width="9.8" height="15.0" fill="rgb(197,197,58)" rx="2" ry="2" />
<text  x="1119.14" y="255.5" ></text>
</g>
<g >
<title>handle_mm_fault (1,139,796 samples, 0.42%)</title><rect x="1091.6" y="213" width="5.0" height="15.0" fill="rgb(232,97,97)" rx="2" ry="2" />
<text  x="1094.64" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;* std::__relocate_a&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;*, std::vector&lt;double, std::allocator&lt;double&gt; &gt;*, std::allocator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt; (5,538,772 samples, 2.06%)</title><rect x="1101.6" y="293" width="24.3" height="15.0" fill="rgb(198,198,58)" rx="2" ry="2" />
<text  x="1104.64" y="303.5" >s..</text>
</g>
<g >
<title>obj_cgroup_charge (1,295,787 samples, 0.48%)</title><rect x="24.4" y="197" width="5.7" height="15.0" fill="rgb(218,76,76)" rx="2" ry="2" />
<text  x="27.39" y="207.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;*&gt; (1,098,977 samples, 0.41%)</title><rect x="1180.0" y="341" width="4.8" height="15.0" fill="rgb(175,175,50)" rx="2" ry="2" />
<text  x="1183.01" y="351.5" ></text>
</g>
<g >
<title>malloc (1,123,325 samples, 0.42%)</title><rect x="1013.1" y="69" width="4.9" height="15.0" fill="rgb(228,91,91)" rx="2" ry="2" />
<text  x="1016.05" y="79.5" ></text>
</g>
<g >
<title>cv_dde (149,354,607 samples, 55.42%)</title><rect x="100.4" y="293" width="653.9" height="15.0" fill="rgb(253,127,127)" rx="2" ry="2" />
<text  x="103.35" y="303.5" >cv_dde</text>
</g>
<g >
<title>double* std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;double const*, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;, double*&gt; (2,241,755 samples, 0.83%)</title><rect x="1003.2" y="117" width="9.9" height="15.0" fill="rgb(211,211,63)" rx="2" ry="2" />
<text  x="1006.24" y="127.5" ></text>
</g>
<g >
<title>main (263,747,535 samples, 97.86%)</title><rect x="30.1" y="373" width="1154.7" height="15.0" fill="rgb(242,112,112)" rx="2" ry="2" />
<text  x="33.07" y="383.5" >main</text>
</g>
<g >
<title>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::_M_deallocate (1,126,532 samples, 0.42%)</title><rect x="1130.8" y="245" width="5.0" height="15.0" fill="rgb(213,213,64)" rx="2" ry="2" />
<text  x="1133.84" y="255.5" ></text>
</g>
<g >
<title>RingBuffer&lt;double&gt;::operator[] (41,884,925 samples, 15.54%)</title><rect x="237.4" y="245" width="183.4" height="15.0" fill="rgb(228,228,69)" rx="2" ry="2" />
<text  x="240.37" y="255.5" >RingBuffer&lt;double&gt;::ope..</text>
</g>
<g >
<title>std::ostream::sentry::sentry (1,135,150 samples, 0.42%)</title><rect x="1140.7" y="341" width="5.0" height="15.0" fill="rgb(226,226,68)" rx="2" ry="2" />
<text  x="1143.73" y="351.5" ></text>
</g>
<g >
<title>load_elf_binary (1,295,787 samples, 0.48%)</title><rect x="24.4" y="325" width="5.7" height="15.0" fill="rgb(220,79,79)" rx="2" ry="2" />
<text  x="27.39" y="335.5" ></text>
</g>
<g >
<title>RingBuffer&lt;std::array&lt;double, 5ul&gt; &gt;::operator[] (12,761,559 samples, 4.74%)</title><rect x="547.8" y="245" width="55.9" height="15.0" fill="rgb(199,199,58)" rx="2" ry="2" />
<text  x="550.80" y="255.5" >RingB..</text>
</g>
<g >
<title>void std::_Construct&lt;std::array&lt;double, 5ul&gt;&gt; (1,180,229 samples, 0.44%)</title><rect x="914.0" y="229" width="5.1" height="15.0" fill="rgb(178,178,51)" rx="2" ry="2" />
<text  x="916.97" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;RingBuffer&lt;std::array&lt;double, 5ul&gt; &gt;, std::allocator&lt;RingBuffer&lt;std::array&lt;double, 5ul&gt; &gt; &gt; &gt;::operator[] (2,278,082 samples, 0.85%)</title><rect x="523.2" y="229" width="10.0" height="15.0" fill="rgb(187,187,54)" rx="2" ry="2" />
<text  x="526.24" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::at (2,200,301 samples, 0.82%)</title><rect x="538.2" y="229" width="9.6" height="15.0" fill="rgb(191,191,56)" rx="2" ry="2" />
<text  x="541.17" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;std::array&lt;double, 5ul&gt;, std::allocator&lt;std::array&lt;double, 5ul&gt; &gt; &gt;::_S_check_init_len (1,104,477 samples, 0.41%)</title><rect x="919.1" y="293" width="4.9" height="15.0" fill="rgb(209,209,62)" rx="2" ry="2" />
<text  x="922.14" y="303.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::_Vector_base (3,360,580 samples, 1.25%)</title><rect x="1081.9" y="309" width="14.7" height="15.0" fill="rgb(210,210,63)" rx="2" ry="2" />
<text  x="1084.91" y="319.5" ></text>
</g>
<g >
<title>std::tuple&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::allocator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt; &gt;::~tuple (2,185,616 samples, 0.81%)</title><rect x="1145.7" y="357" width="9.6" height="15.0" fill="rgb(218,218,65)" rx="2" ry="2" />
<text  x="1148.70" y="367.5" ></text>
</g>
<g >
<title>std::tuple&lt;std::__strip_reference_wrapper&lt;std::decay&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;&amp;&gt;::type&gt;::__type, std::__strip_reference_wrapper&lt;std::decay&lt;std::vector&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::allocator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt;&amp;&gt;::type&gt;::__type&gt; std::make_tuple&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;&amp;, std::vector&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::allocator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt;&amp;&gt; (4,486,403 samples, 1.66%)</title><rect x="998.3" y="341" width="19.7" height="15.0" fill="rgb(204,204,60)" rx="2" ry="2" />
<text  x="1001.33" y="351.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;double&gt;::allocate (1,143,020 samples, 0.42%)</title><rect x="958.5" y="261" width="5.0" height="15.0" fill="rgb(223,223,67)" rx="2" ry="2" />
<text  x="961.48" y="271.5" ></text>
</g>
<g >
<title>void std::_Construct&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt; const&amp;&gt; (3,395,339 samples, 1.26%)</title><rect x="1165.1" y="261" width="14.9" height="15.0" fill="rgb(215,215,64)" rx="2" ry="2" />
<text  x="1168.14" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::size (1,135,609 samples, 0.42%)</title><rect x="870.0" y="245" width="5.0" height="15.0" fill="rgb(207,207,61)" rx="2" ry="2" />
<text  x="873.02" y="255.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::allocator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt; &gt;::~_Tuple_impl (2,185,616 samples, 0.81%)</title><rect x="1145.7" y="341" width="9.6" height="15.0" fill="rgb(214,214,64)" rx="2" ry="2" />
<text  x="1148.70" y="351.5" ></text>
</g>
<g >
<title>double* std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;double const*, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;, double*, double&gt; (2,281,561 samples, 0.85%)</title><rect x="1071.9" y="309" width="10.0" height="15.0" fill="rgb(194,194,56)" rx="2" ry="2" />
<text  x="1074.93" y="319.5" ></text>
</g>
<g >
<title>std::tuple&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::allocator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt; &gt;::tuple&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;&amp;, std::vector&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::allocator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt;&amp;, true&gt; (4,486,403 samples, 1.66%)</title><rect x="998.3" y="325" width="19.7" height="15.0" fill="rgb(200,200,59)" rx="2" ry="2" />
<text  x="1001.33" y="335.5" ></text>
</g>
<g >
<title>double* std::__copy_move_a2&lt;false, double const*, double*&gt; (2,241,755 samples, 0.83%)</title><rect x="1003.2" y="53" width="9.9" height="15.0" fill="rgb(205,205,61)" rx="2" ry="2" />
<text  x="1006.24" y="63.5" ></text>
</g>
<g >
<title>malloc (1,143,020 samples, 0.42%)</title><rect x="958.5" y="229" width="5.0" height="15.0" fill="rgb(228,91,91)" rx="2" ry="2" />
<text  x="961.48" y="239.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::_Vector_base (2,169,140 samples, 0.80%)</title><rect x="1018.0" y="309" width="9.5" height="15.0" fill="rgb(210,210,63)" rx="2" ry="2" />
<text  x="1020.97" y="319.5" ></text>
</g>
<g >
<title>std::array&lt;double, 5ul&gt;* std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;std::array&lt;double, 5ul&gt;*, unsigned long&gt; (2,328,222 samples, 0.86%)</title><rect x="908.9" y="245" width="10.2" height="15.0" fill="rgb(218,218,65)" rx="2" ry="2" />
<text  x="911.95" y="255.5" ></text>
</g>
<g >
<title>DoPri_5&lt;&amp; (180,474,460 samples, 66.96%)</title><rect x="30.1" y="325" width="790.1" height="15.0" fill="rgb(234,100,100)" rx="2" ry="2" />
<text  x="33.07" y="335.5" >DoPri_5&lt;&amp;</text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::allocator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt;::~vector (1,098,977 samples, 0.41%)</title><rect x="1180.0" y="357" width="4.8" height="15.0" fill="rgb(209,209,62)" rx="2" ry="2" />
<text  x="1183.01" y="367.5" ></text>
</g>
<g >
<title>__x64_sys_execve (1,295,787 samples, 0.48%)</title><rect x="24.4" y="373" width="5.7" height="15.0" fill="rgb(246,117,117)" rx="2" ry="2" />
<text  x="27.39" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::operator[] (1,142,907 samples, 0.42%)</title><rect x="665.9" y="229" width="5.0" height="15.0" fill="rgb(222,222,67)" rx="2" ry="2" />
<text  x="668.85" y="239.5" ></text>
</g>
<g >
<title>__libc_start_main (263,747,535 samples, 97.86%)</title><rect x="30.1" y="405" width="1154.7" height="15.0" fill="rgb(234,99,99)" rx="2" ry="2" />
<text  x="33.07" y="415.5" >__libc_start_main</text>
</g>
<g >
<title>double* std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;double const*, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;, double*, double&gt; (1,116,176 samples, 0.41%)</title><rect x="1042.4" y="325" width="4.9" height="15.0" fill="rgb(194,194,56)" rx="2" ry="2" />
<text  x="1045.44" y="335.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::_Vector_impl_data::_Vector_impl_data (1,139,796 samples, 0.42%)</title><rect x="1091.6" y="277" width="5.0" height="15.0" fill="rgb(206,206,61)" rx="2" ry="2" />
<text  x="1094.64" y="287.5" ></text>
</g>
<g >
<title>History&lt;double, double&gt;::interpolate (47,206,719 samples, 17.52%)</title><rect x="430.8" y="261" width="206.6" height="15.0" fill="rgb(187,187,54)" rx="2" ry="2" />
<text  x="433.75" y="271.5" >History&lt;double, double&gt;::in..</text>
</g>
<g >
<title>std::__new_allocator&lt;std::array&lt;double, 5ul&gt; &gt;::allocate (1,077,057 samples, 0.40%)</title><rect x="889.2" y="261" width="4.7" height="15.0" fill="rgb(193,193,56)" rx="2" ry="2" />
<text  x="892.15" y="271.5" ></text>
</g>
<g >
<title>double* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;double const*, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;, double*&gt; (1,145,369 samples, 0.42%)</title><rect x="1076.9" y="293" width="5.0" height="15.0" fill="rgb(205,205,61)" rx="2" ry="2" />
<text  x="1079.90" y="303.5" ></text>
</g>
<g >
<title>double* std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;double const*, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;, double*&gt; (1,116,176 samples, 0.41%)</title><rect x="1042.4" y="293" width="4.9" height="15.0" fill="rgb(211,211,63)" rx="2" ry="2" />
<text  x="1045.44" y="303.5" ></text>
</g>
<g >
<title>load_elf_binary (78,819 samples, 0.03%)</title><rect x="1189.7" y="325" width="0.3" height="15.0" fill="rgb(220,79,79)" rx="2" ry="2" />
<text  x="1192.65" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::~vector (3,344,735 samples, 1.24%)</title><rect x="1047.3" y="341" width="14.7" height="15.0" fill="rgb(197,197,58)" rx="2" ry="2" />
<text  x="1050.32" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;std::array&lt;double, 5ul&gt;, std::allocator&lt;std::array&lt;double, 5ul&gt; &gt; &gt;::at (1,068,206 samples, 0.40%)</title><rect x="879.4" y="277" width="4.6" height="15.0" fill="rgb(194,194,57)" rx="2" ry="2" />
<text  x="882.36" y="287.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;double*&gt; (1,131,977 samples, 0.42%)</title><rect x="1135.8" y="277" width="4.9" height="15.0" fill="rgb(193,193,56)" rx="2" ry="2" />
<text  x="1138.77" y="287.5" ></text>
</g>
<g >
<title>__handle_mm_fault (1,139,796 samples, 0.42%)</title><rect x="1091.6" y="197" width="5.0" height="15.0" fill="rgb(202,53,53)" rx="2" ry="2" />
<text  x="1094.64" y="207.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;double&gt;::~__new_allocator (1,102,174 samples, 0.41%)</title><rect x="1057.1" y="309" width="4.9" height="15.0" fill="rgb(181,181,52)" rx="2" ry="2" />
<text  x="1060.14" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::vector (3,395,339 samples, 1.26%)</title><rect x="1165.1" y="245" width="14.9" height="15.0" fill="rgb(212,212,63)" rx="2" ry="2" />
<text  x="1168.14" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::allocator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt;::~vector (3,387,701 samples, 1.26%)</title><rect x="1125.9" y="341" width="14.8" height="15.0" fill="rgb(209,209,62)" rx="2" ry="2" />
<text  x="1128.89" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;* std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; const*, std::vector&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::allocator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;*, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; (4,529,534 samples, 1.68%)</title><rect x="1160.2" y="325" width="19.8" height="15.0" fill="rgb(183,183,53)" rx="2" ry="2" />
<text  x="1163.17" y="335.5" ></text>
</g>
<g >
<title>perf_iterate_ctx (74,879 samples, 0.03%)</title><rect x="1189.7" y="277" width="0.3" height="15.0" fill="rgb(200,51,51)" rx="2" ry="2" />
<text  x="1192.67" y="287.5" ></text>
</g>
<g >
<title>DDEint&lt;&amp; (152,884,518 samples, 56.73%)</title><rect x="94.6" y="309" width="669.4" height="15.0" fill="rgb(214,70,70)" rx="2" ry="2" />
<text  x="97.60" y="319.5" >DDEint&lt;&amp;</text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;double const*, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;::__normal_iterator (1,130,405 samples, 0.42%)</title><rect x="1175.1" y="213" width="4.9" height="15.0" fill="rgb(224,224,67)" rx="2" ry="2" />
<text  x="1178.06" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;std::array&lt;double, 5ul&gt;, std::allocator&lt;std::array&lt;double, 5ul&gt; &gt; &gt;::_M_default_initialize (4,603,453 samples, 1.71%)</title><rect x="899.0" y="293" width="20.1" height="15.0" fill="rgb(208,208,62)" rx="2" ry="2" />
<text  x="901.98" y="303.5" ></text>
</g>
<g >
<title>cv_model (269,435,366 samples, 99.97%)</title><rect x="10.0" y="437" width="1179.7" height="15.0" fill="rgb(228,91,91)" rx="2" ry="2" />
<text  x="13.00" y="447.5" >cv_model</text>
</g>
<g >
<title>RingBuffer&lt;double&gt;::operator[] (3,331,997 samples, 1.24%)</title><rect x="533.2" y="245" width="14.6" height="15.0" fill="rgb(228,228,69)" rx="2" ry="2" />
<text  x="536.21" y="255.5" ></text>
</g>
<g >
<title>[libm.so.6] (6,082,816 samples, 2.26%)</title><rect x="764.0" y="309" width="26.6" height="15.0" fill="rgb(204,55,55)" rx="2" ry="2" />
<text  x="766.97" y="319.5" >[..</text>
</g>
<g >
<title>[unknown] (1,295,787 samples, 0.48%)</title><rect x="24.4" y="421" width="5.7" height="15.0" fill="rgb(205,58,58)" rx="2" ry="2" />
<text  x="27.39" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;std::array&lt;double, 5ul&gt;, std::allocator&lt;std::array&lt;double, 5ul&gt; &gt; &gt;::size (1,068,206 samples, 0.40%)</title><rect x="879.4" y="245" width="4.6" height="15.0" fill="rgb(210,210,62)" rx="2" ry="2" />
<text  x="882.36" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::operator[] (2,291,619 samples, 0.85%)</title><rect x="805.2" y="309" width="10.0" height="15.0" fill="rgb(222,222,67)" rx="2" ry="2" />
<text  x="808.19" y="319.5" ></text>
</g>
<g >
<title>void std::swap&lt;double, std::allocator&lt;double&gt; &gt; (3,325,725 samples, 1.23%)</title><rect x="973.8" y="325" width="14.5" height="15.0" fill="rgb(203,203,60)" rx="2" ry="2" />
<text  x="976.79" y="335.5" ></text>
</g>
<g >
<title>unmap_page_range (1,104,901 samples, 0.41%)</title><rect x="1184.8" y="293" width="4.9" height="15.0" fill="rgb(201,51,51)" rx="2" ry="2" />
<text  x="1187.82" y="303.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, std::vector&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::allocator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt; &gt;::~_Tuple_impl (2,185,616 samples, 0.81%)</title><rect x="1145.7" y="325" width="9.6" height="15.0" fill="rgb(217,217,65)" rx="2" ry="2" />
<text  x="1148.70" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::operator[] (1,057,273 samples, 0.39%)</title><rect x="943.6" y="325" width="4.7" height="15.0" fill="rgb(222,222,67)" rx="2" ry="2" />
<text  x="946.64" y="335.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;double&gt;::deallocate (1,126,532 samples, 0.42%)</title><rect x="1130.8" y="229" width="5.0" height="15.0" fill="rgb(224,224,68)" rx="2" ry="2" />
<text  x="1133.84" y="239.5" ></text>
</g>
<g >
<title>double* std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;double const*, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;, double*, double&gt; (2,241,755 samples, 0.83%)</title><rect x="1003.2" y="149" width="9.9" height="15.0" fill="rgb(194,194,56)" rx="2" ry="2" />
<text  x="1006.24" y="159.5" ></text>
</g>
<g >
<title>[libc.so.6] (1,143,020 samples, 0.42%)</title><rect x="958.5" y="213" width="5.0" height="15.0" fill="rgb(220,79,79)" rx="2" ry="2" />
<text  x="961.48" y="223.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;1ul, std::vector&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::allocator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt;, false&gt;::~_Head_base (2,185,616 samples, 0.81%)</title><rect x="1145.7" y="309" width="9.6" height="15.0" fill="rgb(215,215,64)" rx="2" ry="2" />
<text  x="1148.70" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::vector (1,116,176 samples, 0.41%)</title><rect x="1042.4" y="341" width="4.9" height="15.0" fill="rgb(212,212,63)" rx="2" ry="2" />
<text  x="1045.44" y="351.5" ></text>
</g>
<g >
<title>double* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;double const*, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;, double*&gt; (2,241,755 samples, 0.83%)</title><rect x="1003.2" y="133" width="9.9" height="15.0" fill="rgb(205,205,61)" rx="2" ry="2" />
<text  x="1006.24" y="143.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;double&gt;::allocate (1,123,325 samples, 0.42%)</title><rect x="1013.1" y="101" width="4.9" height="15.0" fill="rgb(223,223,67)" rx="2" ry="2" />
<text  x="1016.05" y="111.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; const*, std::vector&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::allocator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt; &gt;::base (1,134,195 samples, 0.42%)</title><rect x="1160.2" y="245" width="4.9" height="15.0" fill="rgb(190,190,55)" rx="2" ry="2" />
<text  x="1163.17" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::operator[] (2,267,339 samples, 0.84%)</title><rect x="405.7" y="213" width="10.0" height="15.0" fill="rgb(222,222,67)" rx="2" ry="2" />
<text  x="408.74" y="223.5" ></text>
</g>
<g >
<title>do_syscall_64 (1,295,787 samples, 0.48%)</title><rect x="24.4" y="389" width="5.7" height="15.0" fill="rgb(204,57,57)" rx="2" ry="2" />
<text  x="27.39" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::begin (1,130,405 samples, 0.42%)</title><rect x="1175.1" y="229" width="4.9" height="15.0" fill="rgb(176,176,50)" rx="2" ry="2" />
<text  x="1178.06" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;std::array&lt;double, 5ul&gt;, std::allocator&lt;std::array&lt;double, 5ul&gt; &gt; &gt;::at (9,129,844 samples, 3.39%)</title><rect x="563.7" y="229" width="40.0" height="15.0" fill="rgb(194,194,57)" rx="2" ry="2" />
<text  x="566.70" y="239.5" >std..</text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::operator[] (1,121,452 samples, 0.42%)</title><rect x="1155.3" y="357" width="4.9" height="15.0" fill="rgb(222,222,67)" rx="2" ry="2" />
<text  x="1158.26" y="367.5" ></text>
</g>
<g >
<title>operator new (1,123,325 samples, 0.42%)</title><rect x="1013.1" y="85" width="4.9" height="15.0" fill="rgb(212,67,67)" rx="2" ry="2" />
<text  x="1016.05" y="95.5" ></text>
</g>
<g >
<title>_raw_spin_lock (1,139,796 samples, 0.42%)</title><rect x="1091.6" y="149" width="5.0" height="15.0" fill="rgb(238,105,105)" rx="2" ry="2" />
<text  x="1094.64" y="159.5" ></text>
</g>
<g >
<title>perf-exec (78,819 samples, 0.03%)</title><rect x="1189.7" y="437" width="0.3" height="15.0" fill="rgb(229,93,93)" rx="2" ry="2" />
<text  x="1192.65" y="447.5" ></text>
</g>
<g >
<title>RingBuffer&lt;std::array&lt;double, 5ul&gt; &gt;::wrap (2,355,143 samples, 0.87%)</title><rect x="603.7" y="245" width="10.3" height="15.0" fill="rgb(190,190,55)" rx="2" ry="2" />
<text  x="606.67" y="255.5" ></text>
</g>
<g >
<title>vm_area_alloc (1,295,787 samples, 0.48%)</title><rect x="24.4" y="245" width="5.7" height="15.0" fill="rgb(248,120,120)" rx="2" ry="2" />
<text  x="27.39" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;RingBuffer&lt;std::array&lt;double, 5ul&gt; &gt;, std::allocator&lt;RingBuffer&lt;std::array&lt;double, 5ul&gt; &gt; &gt; &gt;::size (1,169,137 samples, 0.43%)</title><rect x="884.0" y="293" width="5.2" height="15.0" fill="rgb(226,226,68)" rx="2" ry="2" />
<text  x="887.03" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::allocator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt;::_S_relocate (5,538,772 samples, 2.06%)</title><rect x="1101.6" y="309" width="24.3" height="15.0" fill="rgb(193,193,56)" rx="2" ry="2" />
<text  x="1104.64" y="319.5" >s..</text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, std::vector&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::allocator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt; &gt;::_Tuple_impl&lt;std::vector&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::allocator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt;&amp;&gt; (4,486,403 samples, 1.66%)</title><rect x="998.3" y="293" width="19.7" height="15.0" fill="rgb(188,188,54)" rx="2" ry="2" />
<text  x="1001.33" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::at (20,877,283 samples, 7.75%)</title><rect x="324.3" y="229" width="91.4" height="15.0" fill="rgb(191,191,56)" rx="2" ry="2" />
<text  x="327.26" y="239.5" >std::vecto..</text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::_M_range_check (15,362,600 samples, 5.70%)</title><rect x="338.5" y="213" width="67.2" height="15.0" fill="rgb(193,193,56)" rx="2" ry="2" />
<text  x="341.47" y="223.5" >std::ve..</text>
</g>
<g >
<title>do_syscall_64 (78,819 samples, 0.03%)</title><rect x="1189.7" y="389" width="0.3" height="15.0" fill="rgb(204,57,57)" rx="2" ry="2" />
<text  x="1192.65" y="399.5" ></text>
</g>
<g >
<title>CompoundRingBuffer&lt;std::array&lt;double, 5ul&gt;, double&gt;::bisect (57,396,000 samples, 21.30%)</title><rect x="179.5" y="261" width="251.3" height="15.0" fill="rgb(208,208,62)" rx="2" ry="2" />
<text  x="182.46" y="271.5" >CompoundRingBuffer&lt;std::array&lt;dou..</text>
</g>
<g >
<title>do_syscall_64 (1,104,901 samples, 0.41%)</title><rect x="1184.8" y="405" width="4.9" height="15.0" fill="rgb(204,57,57)" rx="2" ry="2" />
<text  x="1187.82" y="415.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1,295,787 samples, 0.48%)</title><rect x="24.4" y="405" width="5.7" height="15.0" fill="rgb(215,72,72)" rx="2" ry="2" />
<text  x="27.39" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::vector (3,365,080 samples, 1.25%)</title><rect x="1003.2" y="165" width="14.8" height="15.0" fill="rgb(212,212,63)" rx="2" ry="2" />
<text  x="1006.24" y="175.5" ></text>
</g>
<g >
<title>_start (263,747,535 samples, 97.86%)</title><rect x="30.1" y="421" width="1154.7" height="15.0" fill="rgb(244,114,114)" rx="2" ry="2" />
<text  x="33.07" y="431.5" >_start</text>
</g>
<g >
<title>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::~_Vector_base (1,126,532 samples, 0.42%)</title><rect x="1130.8" y="261" width="5.0" height="15.0" fill="rgb(195,195,57)" rx="2" ry="2" />
<text  x="1133.84" y="271.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::_M_allocate (2,220,784 samples, 0.82%)</title><rect x="1081.9" y="277" width="9.7" height="15.0" fill="rgb(212,212,63)" rx="2" ry="2" />
<text  x="1084.91" y="287.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::_Vector_impl::_Vector_impl (1,139,796 samples, 0.42%)</title><rect x="1091.6" y="293" width="5.0" height="15.0" fill="rgb(178,178,51)" rx="2" ry="2" />
<text  x="1094.64" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::swap (2,214,274 samples, 0.82%)</title><rect x="978.7" y="309" width="9.6" height="15.0" fill="rgb(207,207,61)" rx="2" ry="2" />
<text  x="981.65" y="319.5" ></text>
</g>
<g >
<title>[unknown] (78,819 samples, 0.03%)</title><rect x="1189.7" y="421" width="0.3" height="15.0" fill="rgb(205,58,58)" rx="2" ry="2" />
<text  x="1192.65" y="431.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;*, std::vector&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::allocator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt; &gt;::base (1,138,580 samples, 0.42%)</title><rect x="988.3" y="341" width="5.0" height="15.0" fill="rgb(208,208,62)" rx="2" ry="2" />
<text  x="991.35" y="351.5" ></text>
</g>
<g >
<title>cv_dde (1,089,346 samples, 0.40%)</title><rect x="790.6" y="309" width="4.8" height="15.0" fill="rgb(253,127,127)" rx="2" ry="2" />
<text  x="793.60" y="319.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;*&gt; (2,185,616 samples, 0.81%)</title><rect x="1145.7" y="277" width="9.6" height="15.0" fill="rgb(175,175,50)" rx="2" ry="2" />
<text  x="1148.70" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;std::array&lt;double, 5ul&gt;, std::allocator&lt;std::array&lt;double, 5ul&gt; &gt; &gt;::size (3,485,908 samples, 1.29%)</title><rect x="573.9" y="197" width="15.2" height="15.0" fill="rgb(210,210,62)" rx="2" ry="2" />
<text  x="576.87" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::at (1,135,609 samples, 0.42%)</title><rect x="870.0" y="277" width="5.0" height="15.0" fill="rgb(191,191,56)" rx="2" ry="2" />
<text  x="873.02" y="287.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::array&lt;double, 5ul&gt;, std::allocator&lt;std::array&lt;double, 5ul&gt; &gt; &gt;::_M_create_storage (1,077,057 samples, 0.40%)</title><rect x="889.2" y="277" width="4.7" height="15.0" fill="rgb(211,211,63)" rx="2" ry="2" />
<text  x="892.15" y="287.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::_Vector_impl::~_Vector_impl (1,098,717 samples, 0.41%)</title><rect x="1116.1" y="213" width="4.8" height="15.0" fill="rgb(218,218,65)" rx="2" ry="2" />
<text  x="1119.14" y="223.5" ></text>
</g>
<g >
<title>perf_event_exec (78,819 samples, 0.03%)</title><rect x="1189.7" y="293" width="0.3" height="15.0" fill="rgb(214,71,71)" rx="2" ry="2" />
<text  x="1192.65" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;* std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; const*, std::vector&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::allocator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;*, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; (4,486,403 samples, 1.66%)</title><rect x="998.3" y="245" width="19.7" height="15.0" fill="rgb(183,183,53)" rx="2" ry="2" />
<text  x="1001.33" y="255.5" ></text>
</g>
<g >
<title>bprm_execve (78,819 samples, 0.03%)</title><rect x="1189.7" y="341" width="0.3" height="15.0" fill="rgb(214,71,71)" rx="2" ry="2" />
<text  x="1192.65" y="351.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::_Vector_impl_data::_M_swap_data (2,307,570 samples, 0.86%)</title><rect x="1027.5" y="309" width="10.1" height="15.0" fill="rgb(201,201,59)" rx="2" ry="2" />
<text  x="1030.47" y="319.5" ></text>
</g>
<g >
<title>pow (2,318,537 samples, 0.86%)</title><rect x="933.5" y="325" width="10.1" height="15.0" fill="rgb(254,128,128)" rx="2" ry="2" />
<text  x="936.49" y="335.5" ></text>
</g>
<g >
<title>RingBuffer&lt;std::array&lt;double, 5ul&gt; &gt;::wrap (996,368 samples, 0.37%)</title><rect x="875.0" y="277" width="4.4" height="15.0" fill="rgb(190,190,55)" rx="2" ry="2" />
<text  x="877.99" y="287.5" ></text>
</g>
<g >
<title>RingBuffer&lt;std::array&lt;double, 5ul&gt; &gt;::operator[] (1,087,524 samples, 0.40%)</title><rect x="681.2" y="261" width="4.7" height="15.0" fill="rgb(199,199,58)" rx="2" ry="2" />
<text  x="684.17" y="271.5" ></text>
</g>
<g >
<title>pow (2,242,763 samples, 0.83%)</title><rect x="795.4" y="309" width="9.8" height="15.0" fill="rgb(254,128,128)" rx="2" ry="2" />
<text  x="798.37" y="319.5" ></text>
</g>
<g >
<title>double* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;double const*, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;, double*&gt; (1,116,176 samples, 0.41%)</title><rect x="1042.4" y="309" width="4.9" height="15.0" fill="rgb(205,205,61)" rx="2" ry="2" />
<text  x="1045.44" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;* std::__do_uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; const*, std::vector&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::allocator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;*&gt; (4,486,403 samples, 1.66%)</title><rect x="998.3" y="197" width="19.7" height="15.0" fill="rgb(179,179,51)" rx="2" ry="2" />
<text  x="1001.33" y="207.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;*&gt; (1,098,977 samples, 0.41%)</title><rect x="1180.0" y="325" width="4.8" height="15.0" fill="rgb(185,185,53)" rx="2" ry="2" />
<text  x="1183.01" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;* std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; const*, std::vector&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::allocator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;*&gt; (4,486,403 samples, 1.66%)</title><rect x="998.3" y="213" width="19.7" height="15.0" fill="rgb(188,188,54)" rx="2" ry="2" />
<text  x="1001.33" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::vector (1,111,513 samples, 0.41%)</title><rect x="1037.6" y="309" width="4.8" height="15.0" fill="rgb(212,212,63)" rx="2" ry="2" />
<text  x="1040.57" y="319.5" ></text>
</g>
<g >
<title>do_anonymous_page (1,139,796 samples, 0.42%)</title><rect x="1091.6" y="181" width="5.0" height="15.0" fill="rgb(237,104,104)" rx="2" ry="2" />
<text  x="1094.64" y="191.5" ></text>
</g>
<g >
<title>void std::_Construct&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt; const&amp;&gt; (3,365,080 samples, 1.25%)</title><rect x="1003.2" y="181" width="14.8" height="15.0" fill="rgb(215,215,64)" rx="2" ry="2" />
<text  x="1006.24" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::allocator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt;::vector (4,486,403 samples, 1.66%)</title><rect x="998.3" y="261" width="19.7" height="15.0" fill="rgb(224,224,68)" rx="2" ry="2" />
<text  x="1001.33" y="271.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (1,139,796 samples, 0.42%)</title><rect x="1091.6" y="261" width="5.0" height="15.0" fill="rgb(222,82,82)" rx="2" ry="2" />
<text  x="1094.64" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;* std::__relocate_a_1&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;*, std::vector&lt;double, std::allocator&lt;double&gt; &gt;*, std::allocator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt; (4,394,216 samples, 1.63%)</title><rect x="1106.7" y="277" width="19.2" height="15.0" fill="rgb(220,220,66)" rx="2" ry="2" />
<text  x="1109.65" y="287.5" ></text>
</g>
<g >
<title>void std::vector&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::allocator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt;::_M_realloc_append&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; const&amp;&gt; (5,538,772 samples, 2.06%)</title><rect x="1101.6" y="325" width="24.3" height="15.0" fill="rgb(214,214,64)" rx="2" ry="2" />
<text  x="1104.64" y="335.5" >v..</text>
</g>
<g >
<title>double* std::copy&lt;__gnu_cxx::__normal_iterator&lt;double const*, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;, double*&gt; (1,116,176 samples, 0.41%)</title><rect x="1042.4" y="277" width="4.9" height="15.0" fill="rgb(221,221,66)" rx="2" ry="2" />
<text  x="1045.44" y="287.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;double&gt; (1,135,150 samples, 0.42%)</title><rect x="1140.7" y="357" width="5.0" height="15.0" fill="rgb(218,218,65)" rx="2" ry="2" />
<text  x="1143.73" y="367.5" ></text>
</g>
<g >
<title>[ld-linux-x86-64.so.2] (3,287,143 samples, 1.22%)</title><rect x="10.0" y="325" width="14.4" height="15.0" fill="rgb(242,112,112)" rx="2" ry="2" />
<text  x="13.00" y="335.5" ></text>
</g>
<g >
<title>[ld-linux-x86-64.so.2] (3,287,143 samples, 1.22%)</title><rect x="10.0" y="373" width="14.4" height="15.0" fill="rgb(242,112,112)" rx="2" ry="2" />
<text  x="13.00" y="383.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::_M_create_storage (1,143,020 samples, 0.42%)</title><rect x="958.5" y="293" width="5.0" height="15.0" fill="rgb(208,208,62)" rx="2" ry="2" />
<text  x="961.48" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::size (1,137,384 samples, 0.42%)</title><rect x="542.8" y="197" width="5.0" height="15.0" fill="rgb(207,207,61)" rx="2" ry="2" />
<text  x="545.82" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::vector (7,885,164 samples, 2.93%)</title><rect x="1067.1" y="325" width="34.5" height="15.0" fill="rgb(212,212,63)" rx="2" ry="2" />
<text  x="1070.12" y="335.5" >st..</text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::allocator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt;::push_back (14,600,550 samples, 5.42%)</title><rect x="1062.0" y="341" width="63.9" height="15.0" fill="rgb(179,179,51)" rx="2" ry="2" />
<text  x="1064.97" y="351.5" >std::ve..</text>
</g>
<g >
<title>[libc.so.6] (263,747,535 samples, 97.86%)</title><rect x="30.1" y="389" width="1154.7" height="15.0" fill="rgb(220,79,79)" rx="2" ry="2" />
<text  x="33.07" y="399.5" >[libc.so.6]</text>
</g>
<g >
<title>std::vector&lt;std::array&lt;double, 5ul&gt;, std::allocator&lt;std::array&lt;double, 5ul&gt; &gt; &gt;::_M_range_check (5,809,252 samples, 2.16%)</title><rect x="563.7" y="213" width="25.4" height="15.0" fill="rgb(196,196,57)" rx="2" ry="2" />
<text  x="566.70" y="223.5" >s..</text>
</g>
<g >
<title>double* std::copy&lt;__gnu_cxx::__normal_iterator&lt;double const*, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;, double*&gt; (2,241,755 samples, 0.83%)</title><rect x="1003.2" y="101" width="9.9" height="15.0" fill="rgb(221,221,66)" rx="2" ry="2" />
<text  x="1006.24" y="111.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::array&lt;double, 5ul&gt;, std::allocator&lt;std::array&lt;double, 5ul&gt; &gt; &gt;::_Vector_impl::_Vector_impl (1,168,937 samples, 0.43%)</title><rect x="893.9" y="293" width="5.1" height="15.0" fill="rgb(181,181,52)" rx="2" ry="2" />
<text  x="896.87" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::allocator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt;::~vector (2,185,616 samples, 0.81%)</title><rect x="1145.7" y="293" width="9.6" height="15.0" fill="rgb(209,209,62)" rx="2" ry="2" />
<text  x="1148.70" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::operator[] (1,417,211 samples, 0.53%)</title><rect x="748.1" y="277" width="6.2" height="15.0" fill="rgb(222,222,67)" rx="2" ry="2" />
<text  x="751.06" y="287.5" ></text>
</g>
<g >
<title>RingBuffer&lt;std::array&lt;double, 5ul&gt; &gt;::wrap (1,333,940 samples, 0.49%)</title><rect x="557.9" y="229" width="5.8" height="15.0" fill="rgb(190,190,55)" rx="2" ry="2" />
<text  x="560.86" y="239.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::~_Vector_base (1,098,717 samples, 0.41%)</title><rect x="1116.1" y="229" width="4.8" height="15.0" fill="rgb(195,195,57)" rx="2" ry="2" />
<text  x="1119.14" y="239.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::_Vector_impl::_Vector_impl (1,111,513 samples, 0.41%)</title><rect x="1037.6" y="293" width="4.8" height="15.0" fill="rgb(178,178,51)" rx="2" ry="2" />
<text  x="1040.57" y="303.5" ></text>
</g>
<g >
<title>RingBuffer&lt;std::array&lt;double, 5ul&gt; &gt;::advance (996,368 samples, 0.37%)</title><rect x="875.0" y="293" width="4.4" height="15.0" fill="rgb(180,180,52)" rx="2" ry="2" />
<text  x="877.99" y="303.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::operator!=&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; const*, std::vector&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::allocator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt; &gt; (1,134,195 samples, 0.42%)</title><rect x="1160.2" y="261" width="4.9" height="15.0" fill="rgb(186,186,54)" rx="2" ry="2" />
<text  x="1163.17" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;RingBuffer&lt;std::array&lt;double, 5ul&gt; &gt;, std::allocator&lt;RingBuffer&lt;std::array&lt;double, 5ul&gt; &gt; &gt; &gt;::operator[] (1,720,613 samples, 0.64%)</title><rect x="629.9" y="245" width="7.5" height="15.0" fill="rgb(187,187,54)" rx="2" ry="2" />
<text  x="632.90" y="255.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;true&gt;::__destroy&lt;double*&gt; (1,129,225 samples, 0.42%)</title><rect x="1120.9" y="213" width="5.0" height="15.0" fill="rgb(186,186,54)" rx="2" ry="2" />
<text  x="1123.95" y="223.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; (1,093,515 samples, 0.41%)</title><rect x="1150.5" y="245" width="4.8" height="15.0" fill="rgb(191,191,55)" rx="2" ry="2" />
<text  x="1153.48" y="255.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;*&gt; (3,387,701 samples, 1.26%)</title><rect x="1125.9" y="325" width="14.8" height="15.0" fill="rgb(175,175,50)" rx="2" ry="2" />
<text  x="1128.89" y="335.5" ></text>
</g>
<g >
<title>begin_new_exec (78,819 samples, 0.03%)</title><rect x="1189.7" y="309" width="0.3" height="15.0" fill="rgb(244,114,114)" rx="2" ry="2" />
<text  x="1192.65" y="319.5" ></text>
</g>
<g >
<title>do_user_addr_fault (1,139,796 samples, 0.42%)</title><rect x="1091.6" y="229" width="5.0" height="15.0" fill="rgb(225,87,87)" rx="2" ry="2" />
<text  x="1094.64" y="239.5" ></text>
</g>
<g >
<title>[libm.so.6] (12,073,175 samples, 4.48%)</title><rect x="685.9" y="277" width="52.9" height="15.0" fill="rgb(204,55,55)" rx="2" ry="2" />
<text  x="688.93" y="287.5" >[libm..</text>
</g>
<g >
<title>__memcg_slab_post_alloc_hook (1,295,787 samples, 0.48%)</title><rect x="24.4" y="213" width="5.7" height="15.0" fill="rgb(202,53,53)" rx="2" ry="2" />
<text  x="27.39" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::at (4,412,785 samples, 1.64%)</title><rect x="657.0" y="245" width="19.4" height="15.0" fill="rgb(191,191,56)" rx="2" ry="2" />
<text  x="660.04" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::_M_move_assign (5,588,223 samples, 2.07%)</title><rect x="1018.0" y="325" width="24.4" height="15.0" fill="rgb(175,175,50)" rx="2" ry="2" />
<text  x="1020.97" y="335.5" >s..</text>
</g>
<g >
<title>[libc.so.6] (1,123,325 samples, 0.42%)</title><rect x="1013.1" y="53" width="4.9" height="15.0" fill="rgb(220,79,79)" rx="2" ry="2" />
<text  x="1016.05" y="63.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;* std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; const*, std::vector&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::allocator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;*&gt; (4,529,534 samples, 1.68%)</title><rect x="1160.2" y="293" width="19.8" height="15.0" fill="rgb(188,188,54)" rx="2" ry="2" />
<text  x="1163.17" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;std::array&lt;double, 5ul&gt;, std::allocator&lt;std::array&lt;double, 5ul&gt; &gt; &gt;::_S_max_size (1,104,477 samples, 0.41%)</title><rect x="919.1" y="277" width="4.9" height="15.0" fill="rgb(229,229,69)" rx="2" ry="2" />
<text  x="922.14" y="287.5" ></text>
</g>
<g >
<title>kmem_cache_alloc_noprof (1,295,787 samples, 0.48%)</title><rect x="24.4" y="229" width="5.7" height="15.0" fill="rgb(247,119,119)" rx="2" ry="2" />
<text  x="27.39" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::size (9,854,435 samples, 3.66%)</title><rect x="362.6" y="197" width="43.1" height="15.0" fill="rgb(207,207,61)" rx="2" ry="2" />
<text  x="365.59" y="207.5" >std:..</text>
</g>
<g >
<title>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::_Vector_impl::~_Vector_impl (1,107,416 samples, 0.41%)</title><rect x="1052.3" y="309" width="4.8" height="15.0" fill="rgb(218,218,65)" rx="2" ry="2" />
<text  x="1055.29" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;* std::__do_uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; const*, std::vector&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::allocator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;*&gt; (4,529,534 samples, 1.68%)</title><rect x="1160.2" y="277" width="19.8" height="15.0" fill="rgb(179,179,51)" rx="2" ry="2" />
<text  x="1163.17" y="287.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::~_Vector_base (2,209,590 samples, 0.82%)</title><rect x="1052.3" y="325" width="9.7" height="15.0" fill="rgb(195,195,57)" rx="2" ry="2" />
<text  x="1055.29" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::operator[] (1,097,528 samples, 0.41%)</title><rect x="676.4" y="245" width="4.8" height="15.0" fill="rgb(222,222,67)" rx="2" ry="2" />
<text  x="679.36" y="255.5" ></text>
</g>
<g >
<title>double* std::__copy_move_a1&lt;false, double const*, double*&gt; (2,241,755 samples, 0.83%)</title><rect x="1003.2" y="69" width="9.9" height="15.0" fill="rgb(212,212,63)" rx="2" ry="2" />
<text  x="1006.24" y="79.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::_Vector_impl_data::_Vector_impl_data (1,107,321 samples, 0.41%)</title><rect x="968.9" y="277" width="4.9" height="15.0" fill="rgb(206,206,61)" rx="2" ry="2" />
<text  x="971.94" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; const*, std::vector&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::allocator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;*&gt; (4,486,403 samples, 1.66%)</title><rect x="998.3" y="229" width="19.7" height="15.0" fill="rgb(220,220,66)" rx="2" ry="2" />
<text  x="1001.33" y="239.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::_M_allocate (1,143,020 samples, 0.42%)</title><rect x="958.5" y="277" width="5.0" height="15.0" fill="rgb(212,212,63)" rx="2" ry="2" />
<text  x="961.48" y="287.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; (2,258,509 samples, 0.84%)</title><rect x="1130.8" y="293" width="9.9" height="15.0" fill="rgb(191,191,55)" rx="2" ry="2" />
<text  x="1133.84" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;std::array&lt;double, 5ul&gt;, std::allocator&lt;std::array&lt;double, 5ul&gt; &gt; &gt;::_M_range_check (1,068,206 samples, 0.40%)</title><rect x="879.4" y="261" width="4.6" height="15.0" fill="rgb(196,196,57)" rx="2" ry="2" />
<text  x="882.36" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::operator[] (1,163,092 samples, 0.43%)</title><rect x="415.7" y="229" width="5.1" height="15.0" fill="rgb(222,222,67)" rx="2" ry="2" />
<text  x="418.66" y="239.5" ></text>
</g>
<g >
<title>RingBuffer&lt;double&gt;::operator[] (9,988,883 samples, 3.71%)</title><rect x="637.4" y="261" width="43.8" height="15.0" fill="rgb(228,228,69)" rx="2" ry="2" />
<text  x="640.43" y="271.5" >Ring..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (78,819 samples, 0.03%)</title><rect x="1189.7" y="405" width="0.3" height="15.0" fill="rgb(215,72,72)" rx="2" ry="2" />
<text  x="1192.65" y="415.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::_Vector_impl::_Vector_impl (1,145,457 samples, 0.43%)</title><rect x="1096.6" y="309" width="5.0" height="15.0" fill="rgb(178,178,51)" rx="2" ry="2" />
<text  x="1099.63" y="319.5" ></text>
</g>
</g>
</svg>
