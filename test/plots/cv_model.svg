<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="438" onload="init(evt)" viewBox="0 0 1200 438" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="438.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >cv_model</text>
<text id="details" x="10.00" y="421" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="421" > </text>
<g id="frames">
<g >
<title>double* std::__copy_move_a&lt;false, __gnu_cxx::__normal_iterator&lt;double const*, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;, double*&gt; (927,877 samples, 0.80%)</title><rect x="1119.5" y="85" width="9.4" height="15.0" fill="rgb(180,180,52)" rx="2" ry="2" />
<text  x="1122.51" y="95.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::_Vector_base (889,072 samples, 0.76%)</title><rect x="174.8" y="213" width="9.0" height="15.0" fill="rgb(210,210,63)" rx="2" ry="2" />
<text  x="177.82" y="223.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (1,233,175 samples, 1.06%)</title><rect x="773.2" y="213" width="12.5" height="15.0" fill="rgb(226,88,88)" rx="2" ry="2" />
<text  x="776.18" y="223.5" ></text>
</g>
<g >
<title>[ld-linux-x86-64.so.2] (4,649,569 samples, 3.99%)</title><rect x="10.0" y="309" width="47.1" height="15.0" fill="rgb(242,112,112)" rx="2" ry="2" />
<text  x="13.00" y="319.5" >[ld-..</text>
</g>
<g >
<title>free_unref_folios (775,307 samples, 0.67%)</title><rect x="1181.7" y="181" width="7.8" height="15.0" fill="rgb(205,57,57)" rx="2" ry="2" />
<text  x="1184.70" y="191.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;::allocate (920,332 samples, 0.79%)</title><rect x="1091.5" y="213" width="9.3" height="15.0" fill="rgb(198,198,58)" rx="2" ry="2" />
<text  x="1094.47" y="223.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::array&lt;double, 5ul&gt;, std::allocator&lt;std::array&lt;double, 5ul&gt; &gt; &gt;::_Vector_base (903,383 samples, 0.78%)</title><rect x="912.9" y="245" width="9.2" height="15.0" fill="rgb(214,214,64)" rx="2" ry="2" />
<text  x="915.95" y="255.5" ></text>
</g>
<g >
<title>DDEint&lt;&amp; (9,093,173 samples, 7.80%)</title><rect x="91.7" y="277" width="92.1" height="15.0" fill="rgb(214,70,70)" rx="2" ry="2" />
<text  x="94.72" y="287.5" >DDEint&lt;&amp;</text>
</g>
<g >
<title>load_elf_binary (681,325 samples, 0.58%)</title><rect x="57.1" y="261" width="6.9" height="15.0" fill="rgb(220,79,79)" rx="2" ry="2" />
<text  x="60.09" y="271.5" ></text>
</g>
<g >
<title>double* std::copy&lt;__gnu_cxx::__normal_iterator&lt;double const*, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;, double*&gt; (927,877 samples, 0.80%)</title><rect x="1119.5" y="101" width="9.4" height="15.0" fill="rgb(221,221,66)" rx="2" ry="2" />
<text  x="1122.51" y="111.5" ></text>
</g>
<g >
<title>__x64_sys_exit_group (775,307 samples, 0.67%)</title><rect x="1181.7" y="325" width="7.8" height="15.0" fill="rgb(210,64,64)" rx="2" ry="2" />
<text  x="1184.70" y="335.5" ></text>
</g>
<g >
<title>double* std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;double const*, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;, double*&gt; (887,038 samples, 0.76%)</title><rect x="1038.0" y="229" width="9.0" height="15.0" fill="rgb(211,211,63)" rx="2" ry="2" />
<text  x="1040.97" y="239.5" ></text>
</g>
<g >
<title>clockevents_program_event (1,233,175 samples, 1.06%)</title><rect x="773.2" y="197" width="12.5" height="15.0" fill="rgb(243,113,113)" rx="2" ry="2" />
<text  x="776.18" y="207.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::allocator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt;::_M_create_storage (920,332 samples, 0.79%)</title><rect x="1091.5" y="245" width="9.3" height="15.0" fill="rgb(220,220,66)" rx="2" ry="2" />
<text  x="1094.47" y="255.5" ></text>
</g>
<g >
<title>[ld-linux-x86-64.so.2] (4,649,569 samples, 3.99%)</title><rect x="10.0" y="325" width="47.1" height="15.0" fill="rgb(242,112,112)" rx="2" ry="2" />
<text  x="13.00" y="335.5" >[ld-..</text>
</g>
<g >
<title>std::vector&lt;std::array&lt;double, 5ul&gt;, std::allocator&lt;std::array&lt;double, 5ul&gt; &gt; &gt;::~vector (901,405 samples, 0.77%)</title><rect x="932.8" y="261" width="9.2" height="15.0" fill="rgb(200,200,59)" rx="2" ry="2" />
<text  x="935.83" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;* std::__uninitialized_fill_n_a&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;*, unsigned long, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; (2,776,213 samples, 2.38%)</title><rect x="1100.8" y="245" width="28.1" height="15.0" fill="rgb(212,212,63)" rx="2" ry="2" />
<text  x="1103.79" y="255.5" >s..</text>
</g>
<g >
<title>expand_downwards (681,325 samples, 0.58%)</title><rect x="57.1" y="229" width="6.9" height="15.0" fill="rgb(252,126,126)" rx="2" ry="2" />
<text  x="60.09" y="239.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (775,307 samples, 0.67%)</title><rect x="1181.7" y="357" width="7.8" height="15.0" fill="rgb(215,72,72)" rx="2" ry="2" />
<text  x="1184.70" y="367.5" ></text>
</g>
<g >
<title>RingBuffer&lt;std::array&lt;double, 5ul&gt; &gt;::operator[] (901,698 samples, 0.77%)</title><rect x="885.5" y="245" width="9.2" height="15.0" fill="rgb(199,199,58)" rx="2" ry="2" />
<text  x="888.53" y="255.5" ></text>
</g>
<g >
<title>operator new (920,332 samples, 0.79%)</title><rect x="1091.5" y="197" width="9.3" height="15.0" fill="rgb(212,67,67)" rx="2" ry="2" />
<text  x="1094.47" y="207.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::allocator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt;::_M_allocate (920,332 samples, 0.79%)</title><rect x="1091.5" y="229" width="9.3" height="15.0" fill="rgb(224,224,67)" rx="2" ry="2" />
<text  x="1094.47" y="239.5" ></text>
</g>
<g >
<title>[libc.so.6] (920,332 samples, 0.79%)</title><rect x="1091.5" y="149" width="9.3" height="15.0" fill="rgb(220,79,79)" rx="2" ry="2" />
<text  x="1094.47" y="159.5" ></text>
</g>
<g >
<title>[libc.so.6] (920,332 samples, 0.79%)</title><rect x="1091.5" y="165" width="9.3" height="15.0" fill="rgb(220,79,79)" rx="2" ry="2" />
<text  x="1094.47" y="175.5" ></text>
</g>
<g >
<title>__x64_sys_execve (44,481 samples, 0.04%)</title><rect x="1189.5" y="309" width="0.5" height="15.0" fill="rgb(246,117,117)" rx="2" ry="2" />
<text  x="1192.55" y="319.5" ></text>
</g>
<g >
<title>RingBuffer&lt;double&gt;::operator[] (2,697,871 samples, 2.32%)</title><rect x="690.6" y="213" width="27.3" height="15.0" fill="rgb(228,228,69)" rx="2" ry="2" />
<text  x="693.57" y="223.5" >R..</text>
</g>
<g >
<title>[ld-linux-x86-64.so.2] (4,649,569 samples, 3.99%)</title><rect x="10.0" y="293" width="47.1" height="15.0" fill="rgb(242,112,112)" rx="2" ry="2" />
<text  x="13.00" y="303.5" >[ld-..</text>
</g>
<g >
<title>cv_model (116,464,083 samples, 99.96%)</title><rect x="10.0" y="373" width="1179.5" height="15.0" fill="rgb(228,91,91)" rx="2" ry="2" />
<text  x="13.00" y="383.5" >cv_model</text>
</g>
<g >
<title>[ld-linux-x86-64.so.2] (4,649,569 samples, 3.99%)</title><rect x="10.0" y="357" width="47.1" height="15.0" fill="rgb(242,112,112)" rx="2" ry="2" />
<text  x="13.00" y="367.5" >[ld-..</text>
</g>
<g >
<title>__mmput (775,307 samples, 0.67%)</title><rect x="1181.7" y="277" width="7.8" height="15.0" fill="rgb(248,120,120)" rx="2" ry="2" />
<text  x="1184.70" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::~vector (933,516 samples, 0.80%)</title><rect x="1155.8" y="293" width="9.5" height="15.0" fill="rgb(197,197,58)" rx="2" ry="2" />
<text  x="1158.82" y="303.5" ></text>
</g>
<g >
<title>std::deque&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::allocator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt;::pop_front (1,862,062 samples, 1.60%)</title><rect x="942.0" y="261" width="18.8" height="15.0" fill="rgb(199,199,59)" rx="2" ry="2" />
<text  x="944.96" y="271.5" ></text>
</g>
<g >
<title>operator delete (894,850 samples, 0.77%)</title><rect x="1019.5" y="197" width="9.0" height="15.0" fill="rgb(246,118,118)" rx="2" ry="2" />
<text  x="1022.47" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;std::array&lt;double, 5ul&gt;, std::allocator&lt;std::array&lt;double, 5ul&gt; &gt; &gt;::vector (1,963,285 samples, 1.69%)</title><rect x="912.9" y="261" width="19.9" height="15.0" fill="rgb(215,215,64)" rx="2" ry="2" />
<text  x="915.95" y="271.5" ></text>
</g>
<g >
<title>do_group_exit (775,307 samples, 0.67%)</title><rect x="1181.7" y="309" width="7.8" height="15.0" fill="rgb(216,73,73)" rx="2" ry="2" />
<text  x="1184.70" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::allocator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt;::_M_fill_initialize (2,776,213 samples, 2.38%)</title><rect x="1100.8" y="261" width="28.1" height="15.0" fill="rgb(222,222,67)" rx="2" ry="2" />
<text  x="1103.79" y="271.5" >s..</text>
</g>
<g >
<title>_start (110,357,882 samples, 94.72%)</title><rect x="64.0" y="357" width="1117.7" height="15.0" fill="rgb(244,114,114)" rx="2" ry="2" />
<text  x="66.99" y="367.5" >_start</text>
</g>
<g >
<title>[libc.so.6] (854,414 samples, 0.73%)</title><rect x="1128.9" y="293" width="8.7" height="15.0" fill="rgb(220,79,79)" rx="2" ry="2" />
<text  x="1131.91" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;std::array&lt;double, 5ul&gt;, std::allocator&lt;std::array&lt;double, 5ul&gt; &gt; &gt;::_M_range_check (833,546 samples, 0.72%)</title><rect x="663.9" y="165" width="8.5" height="15.0" fill="rgb(196,196,57)" rx="2" ry="2" />
<text  x="666.92" y="175.5" ></text>
</g>
<g >
<title>do_syscall_64 (681,325 samples, 0.58%)</title><rect x="57.1" y="325" width="6.9" height="15.0" fill="rgb(204,57,57)" rx="2" ry="2" />
<text  x="60.09" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::operator[] (2,714,039 samples, 2.33%)</title><rect x="529.5" y="165" width="27.5" height="15.0" fill="rgb(222,222,67)" rx="2" ry="2" />
<text  x="532.51" y="175.5" >s..</text>
</g>
<g >
<title>bprm_execve (44,481 samples, 0.04%)</title><rect x="1189.5" y="277" width="0.5" height="15.0" fill="rgb(214,71,71)" rx="2" ry="2" />
<text  x="1192.55" y="287.5" ></text>
</g>
<g >
<title>[ld-linux-x86-64.so.2] (2,385,457 samples, 2.05%)</title><rect x="10.0" y="277" width="24.2" height="15.0" fill="rgb(242,112,112)" rx="2" ry="2" />
<text  x="13.00" y="287.5" >[..</text>
</g>
<g >
<title>std::vector&lt;std::array&lt;double, 5ul&gt;, std::allocator&lt;std::array&lt;double, 5ul&gt; &gt; &gt;::at (2,631,133 samples, 2.26%)</title><rect x="663.9" y="181" width="26.7" height="15.0" fill="rgb(194,194,57)" rx="2" ry="2" />
<text  x="666.92" y="191.5" >s..</text>
</g>
<g >
<title>do_syscall_64 (44,481 samples, 0.04%)</title><rect x="1189.5" y="325" width="0.5" height="15.0" fill="rgb(204,57,57)" rx="2" ry="2" />
<text  x="1192.55" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;std::array&lt;double, 5ul&gt;, std::allocator&lt;std::array&lt;double, 5ul&gt; &gt; &gt;::_S_check_init_len (1,059,902 samples, 0.91%)</title><rect x="922.1" y="245" width="10.7" height="15.0" fill="rgb(209,209,62)" rx="2" ry="2" />
<text  x="925.10" y="255.5" ></text>
</g>
<g >
<title>RingBuffer&lt;std::array&lt;double, 5ul&gt; &gt;::advance (897,814 samples, 0.77%)</title><rect x="876.4" y="245" width="9.1" height="15.0" fill="rgb(180,180,52)" rx="2" ry="2" />
<text  x="879.44" y="255.5" ></text>
</g>
<g >
<title>[ld-linux-x86-64.so.2] (4,649,569 samples, 3.99%)</title><rect x="10.0" y="341" width="47.1" height="15.0" fill="rgb(242,112,112)" rx="2" ry="2" />
<text  x="13.00" y="351.5" >[ld-..</text>
</g>
<g >
<title>perf_iterate_sb.constprop.0 (681,325 samples, 0.58%)</title><rect x="57.1" y="197" width="6.9" height="15.0" fill="rgb(227,89,89)" rx="2" ry="2" />
<text  x="60.09" y="207.5" ></text>
</g>
<g >
<title>kmalloc_trace_noprof (2,264,112 samples, 1.94%)</title><rect x="34.2" y="85" width="22.9" height="15.0" fill="rgb(243,113,113)" rx="2" ry="2" />
<text  x="37.16" y="95.5" >k..</text>
</g>
<g >
<title>__intel_pmu_enable_all.isra.0 (44,481 samples, 0.04%)</title><rect x="1189.5" y="197" width="0.5" height="15.0" fill="rgb(238,105,105)" rx="2" ry="2" />
<text  x="1192.55" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::~vector (894,850 samples, 0.77%)</title><rect x="1019.5" y="245" width="9.0" height="15.0" fill="rgb(197,197,58)" rx="2" ry="2" />
<text  x="1022.47" y="255.5" ></text>
</g>
<g >
<title>all (116,508,564 samples, 100%)</title><rect x="10.0" y="389" width="1180.0" height="15.0" fill="rgb(209,63,63)" rx="2" ry="2" />
<text  x="13.00" y="399.5" ></text>
</g>
<g >
<title>__mmap (920,332 samples, 0.79%)</title><rect x="1091.5" y="117" width="9.3" height="15.0" fill="rgb(225,86,86)" rx="2" ry="2" />
<text  x="1094.47" y="127.5" ></text>
</g>
<g >
<title>RingBuffer&lt;double&gt;::wrap (922,212 samples, 0.79%)</title><rect x="848.7" y="229" width="9.3" height="15.0" fill="rgb(220,220,66)" rx="2" ry="2" />
<text  x="851.70" y="239.5" ></text>
</g>
<g >
<title>RingBuffer&lt;double&gt;::operator[] (16,280,889 samples, 13.97%)</title><rect x="392.1" y="197" width="164.9" height="15.0" fill="rgb(228,228,69)" rx="2" ry="2" />
<text  x="395.11" y="207.5" >RingBuffer&lt;double&gt;::o..</text>
</g>
<g >
<title>main (110,357,882 samples, 94.72%)</title><rect x="64.0" y="309" width="1117.7" height="15.0" fill="rgb(242,112,112)" rx="2" ry="2" />
<text  x="66.99" y="319.5" >main</text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::size (916,547 samples, 0.79%)</title><rect x="627.3" y="165" width="9.3" height="15.0" fill="rgb(207,207,61)" rx="2" ry="2" />
<text  x="630.27" y="175.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;*&gt; (1,621,796 samples, 1.39%)</title><rect x="1165.3" y="261" width="16.4" height="15.0" fill="rgb(185,185,53)" rx="2" ry="2" />
<text  x="1168.27" y="271.5" ></text>
</g>
<g >
<title>[libc.so.6] (902,786 samples, 0.77%)</title><rect x="1146.7" y="197" width="9.1" height="15.0" fill="rgb(220,79,79)" rx="2" ry="2" />
<text  x="1149.67" y="207.5" ></text>
</g>
<g >
<title>[libm.so.6] (925,392 samples, 0.79%)</title><rect x="119.1" y="261" width="9.4" height="15.0" fill="rgb(204,55,55)" rx="2" ry="2" />
<text  x="122.10" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;std::array&lt;double, 5ul&gt;, std::allocator&lt;std::array&lt;double, 5ul&gt; &gt; &gt;::operator[] (881,595 samples, 0.76%)</title><rect x="672.4" y="165" width="8.9" height="15.0" fill="rgb(226,226,68)" rx="2" ry="2" />
<text  x="675.36" y="175.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (1,233,175 samples, 1.06%)</title><rect x="773.2" y="245" width="12.5" height="15.0" fill="rgb(216,74,74)" rx="2" ry="2" />
<text  x="776.18" y="255.5" ></text>
</g>
<g >
<title>double* std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;double const*, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;, double*, double&gt; (1,853,379 samples, 1.59%)</title><rect x="1110.1" y="149" width="18.8" height="15.0" fill="rgb(194,194,56)" rx="2" ry="2" />
<text  x="1113.14" y="159.5" ></text>
</g>
<g >
<title>double* std::__copy_move_a1&lt;false, double const*, double*&gt; (920,977 samples, 0.79%)</title><rect x="165.5" y="133" width="9.3" height="15.0" fill="rgb(212,212,63)" rx="2" ry="2" />
<text  x="168.49" y="143.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::_Vector_impl_data::_M_swap_data (4,889,500 samples, 4.20%)</title><rect x="970.0" y="245" width="49.5" height="15.0" fill="rgb(201,201,59)" rx="2" ry="2" />
<text  x="972.95" y="255.5" >std:..</text>
</g>
<g >
<title>mmap_region (2,264,112 samples, 1.94%)</title><rect x="34.2" y="117" width="22.9" height="15.0" fill="rgb(228,92,92)" rx="2" ry="2" />
<text  x="37.16" y="127.5" >m..</text>
</g>
<g >
<title>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::_Vector_impl_data::_M_copy_data (3,052,653 samples, 2.62%)</title><rect x="979.2" y="229" width="30.9" height="15.0" fill="rgb(201,201,59)" rx="2" ry="2" />
<text  x="982.18" y="239.5" >st..</text>
</g>
<g >
<title>__irq_exit_rcu (930,800 samples, 0.80%)</title><rect x="951.4" y="197" width="9.4" height="15.0" fill="rgb(224,85,85)" rx="2" ry="2" />
<text  x="954.39" y="207.5" ></text>
</g>
<g >
<title>perf_event_mmap (681,325 samples, 0.58%)</title><rect x="57.1" y="213" width="6.9" height="15.0" fill="rgb(226,89,89)" rx="2" ry="2" />
<text  x="60.09" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::~vector (795,299 samples, 0.68%)</title><rect x="1173.6" y="229" width="8.1" height="15.0" fill="rgb(197,197,58)" rx="2" ry="2" />
<text  x="1176.64" y="239.5" ></text>
</g>
<g >
<title>native_write_msr (44,481 samples, 0.04%)</title><rect x="1189.5" y="181" width="0.5" height="15.0" fill="rgb(236,102,102)" rx="2" ry="2" />
<text  x="1192.55" y="191.5" ></text>
</g>
<g >
<title>_dl_catch_exception (2,264,112 samples, 1.94%)</title><rect x="34.2" y="277" width="22.9" height="15.0" fill="rgb(253,127,127)" rx="2" ry="2" />
<text  x="37.16" y="287.5" >_..</text>
</g>
<g >
<title>bprm_execve (681,325 samples, 0.58%)</title><rect x="57.1" y="277" width="6.9" height="15.0" fill="rgb(214,71,71)" rx="2" ry="2" />
<text  x="60.09" y="287.5" ></text>
</g>
<g >
<title>std::queue&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::deque&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::allocator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt; &gt;::push (3,633,535 samples, 3.12%)</title><rect x="147.0" y="261" width="36.8" height="15.0" fill="rgb(219,219,66)" rx="2" ry="2" />
<text  x="150.02" y="271.5" >std..</text>
</g>
<g >
<title>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::_Vector_impl_data::_Vector_impl_data (925,223 samples, 0.79%)</title><rect x="1010.1" y="229" width="9.4" height="15.0" fill="rgb(206,206,61)" rx="2" ry="2" />
<text  x="1013.10" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::at (11,797,145 samples, 10.13%)</title><rect x="437.5" y="181" width="119.5" height="15.0" fill="rgb(191,191,56)" rx="2" ry="2" />
<text  x="440.52" y="191.5" >std::vector&lt;do..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (681,325 samples, 0.58%)</title><rect x="57.1" y="341" width="6.9" height="15.0" fill="rgb(215,72,72)" rx="2" ry="2" />
<text  x="60.09" y="351.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (930,800 samples, 0.80%)</title><rect x="951.4" y="213" width="9.4" height="15.0" fill="rgb(216,74,74)" rx="2" ry="2" />
<text  x="954.39" y="223.5" ></text>
</g>
<g >
<title>[unknown] (681,325 samples, 0.58%)</title><rect x="57.1" y="357" width="6.9" height="15.0" fill="rgb(205,58,58)" rx="2" ry="2" />
<text  x="60.09" y="367.5" ></text>
</g>
<g >
<title>History&lt;double, double&gt;::interpolate (13,187,723 samples, 11.32%)</title><rect x="557.0" y="213" width="133.6" height="15.0" fill="rgb(187,187,54)" rx="2" ry="2" />
<text  x="560.00" y="223.5" >History&lt;double, ..</text>
</g>
<g >
<title>RingBuffer&lt;std::array&lt;double, 5ul&gt; &gt;::operator[] (5,333,380 samples, 4.58%)</title><rect x="636.6" y="197" width="54.0" height="15.0" fill="rgb(199,199,58)" rx="2" ry="2" />
<text  x="639.55" y="207.5" >RingB..</text>
</g>
<g >
<title>memset_orig (2,264,112 samples, 1.94%)</title><rect x="34.2" y="69" width="22.9" height="15.0" fill="rgb(246,117,117)" rx="2" ry="2" />
<text  x="37.16" y="79.5" >m..</text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (1,233,175 samples, 1.06%)</title><rect x="773.2" y="261" width="12.5" height="15.0" fill="rgb(230,94,94)" rx="2" ry="2" />
<text  x="776.18" y="271.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::~_Vector_base (795,299 samples, 0.68%)</title><rect x="1173.6" y="213" width="8.1" height="15.0" fill="rgb(195,195,57)" rx="2" ry="2" />
<text  x="1176.64" y="223.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::allocator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt;::_Vector_base (920,332 samples, 0.79%)</title><rect x="1091.5" y="261" width="9.3" height="15.0" fill="rgb(223,223,67)" rx="2" ry="2" />
<text  x="1094.47" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::operator[] (899,271 samples, 0.77%)</title><rect x="1137.6" y="293" width="9.1" height="15.0" fill="rgb(222,222,67)" rx="2" ry="2" />
<text  x="1140.57" y="303.5" ></text>
</g>
<g >
<title>double* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;double const*, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;, double*&gt; (887,038 samples, 0.76%)</title><rect x="1038.0" y="245" width="9.0" height="15.0" fill="rgb(205,205,61)" rx="2" ry="2" />
<text  x="1040.97" y="255.5" ></text>
</g>
<g >
<title>RingBuffer&lt;std::array&lt;double, 5ul&gt; &gt;::wrap (1,811,990 samples, 1.56%)</title><rect x="645.6" y="181" width="18.3" height="15.0" fill="rgb(190,190,55)" rx="2" ry="2" />
<text  x="648.57" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::at (1,816,126 samples, 1.56%)</title><rect x="858.0" y="229" width="18.4" height="15.0" fill="rgb(191,191,56)" rx="2" ry="2" />
<text  x="861.04" y="239.5" ></text>
</g>
<g >
<title>RingBuffer&lt;double&gt;::operator[] (1,816,126 samples, 1.56%)</title><rect x="858.0" y="245" width="18.4" height="15.0" fill="rgb(228,228,69)" rx="2" ry="2" />
<text  x="861.04" y="255.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; (1,621,796 samples, 1.39%)</title><rect x="1165.3" y="245" width="16.4" height="15.0" fill="rgb(191,191,55)" rx="2" ry="2" />
<text  x="1168.27" y="255.5" ></text>
</g>
<g >
<title>[libc.so.6] (920,332 samples, 0.79%)</title><rect x="1091.5" y="133" width="9.3" height="15.0" fill="rgb(220,79,79)" rx="2" ry="2" />
<text  x="1094.47" y="143.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;* std::uninitialized_fill_n&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;*, unsigned long, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; (2,776,213 samples, 2.38%)</title><rect x="1100.8" y="229" width="28.1" height="15.0" fill="rgb(186,186,54)" rx="2" ry="2" />
<text  x="1103.79" y="239.5" >s..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2,264,112 samples, 1.94%)</title><rect x="34.2" y="197" width="22.9" height="15.0" fill="rgb(215,72,72)" rx="2" ry="2" />
<text  x="37.16" y="207.5" >e..</text>
</g>
<g >
<title>do_exit (775,307 samples, 0.67%)</title><rect x="1181.7" y="293" width="7.8" height="15.0" fill="rgb(229,92,92)" rx="2" ry="2" />
<text  x="1184.70" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;std::array&lt;double, 5ul&gt;, std::allocator&lt;std::array&lt;double, 5ul&gt; &gt; &gt;::size (915,992 samples, 0.79%)</title><rect x="681.3" y="165" width="9.3" height="15.0" fill="rgb(210,210,62)" rx="2" ry="2" />
<text  x="684.29" y="175.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::~_Vector_base (894,850 samples, 0.77%)</title><rect x="1019.5" y="229" width="9.0" height="15.0" fill="rgb(195,195,57)" rx="2" ry="2" />
<text  x="1022.47" y="239.5" ></text>
</g>
<g >
<title>double* std::copy&lt;__gnu_cxx::__normal_iterator&lt;double const*, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;, double*&gt; (887,038 samples, 0.76%)</title><rect x="1038.0" y="213" width="9.0" height="15.0" fill="rgb(221,221,66)" rx="2" ry="2" />
<text  x="1040.97" y="223.5" ></text>
</g>
<g >
<title>[libc.so.6] (110,357,882 samples, 94.72%)</title><rect x="64.0" y="325" width="1117.7" height="15.0" fill="rgb(220,79,79)" rx="2" ry="2" />
<text  x="66.99" y="335.5" >[libc.so.6]</text>
</g>
<g >
<title>do_execveat_common.isra.0 (681,325 samples, 0.58%)</title><rect x="57.1" y="293" width="6.9" height="15.0" fill="rgb(229,92,92)" rx="2" ry="2" />
<text  x="60.09" y="303.5" ></text>
</g>
<g >
<title>CompoundRingBuffer&lt;std::array&lt;double, 5ul&gt;, double&gt;::update (7,186,443 samples, 6.17%)</title><rect x="830.8" y="261" width="72.8" height="15.0" fill="rgb(199,199,58)" rx="2" ry="2" />
<text  x="833.79" y="271.5" >Compound..</text>
</g>
<g >
<title>std::_Vector_base&lt;std::array&lt;double, 5ul&gt;, std::allocator&lt;std::array&lt;double, 5ul&gt; &gt; &gt;::_M_create_storage (903,383 samples, 0.78%)</title><rect x="912.9" y="229" width="9.2" height="15.0" fill="rgb(211,211,63)" rx="2" ry="2" />
<text  x="915.95" y="239.5" ></text>
</g>
<g >
<title>ksys_mmap_pgoff (2,264,112 samples, 1.94%)</title><rect x="34.2" y="165" width="22.9" height="15.0" fill="rgb(244,114,114)" rx="2" ry="2" />
<text  x="37.16" y="175.5" >k..</text>
</g>
<g >
<title>[ld-linux-x86-64.so.2] (2,264,112 samples, 1.94%)</title><rect x="34.2" y="229" width="22.9" height="15.0" fill="rgb(242,112,112)" rx="2" ry="2" />
<text  x="37.16" y="239.5" >[..</text>
</g>
<g >
<title>perf_iterate_ctx (681,325 samples, 0.58%)</title><rect x="57.1" y="181" width="6.9" height="15.0" fill="rgb(200,51,51)" rx="2" ry="2" />
<text  x="60.09" y="191.5" ></text>
</g>
<g >
<title>perf_ctx_enable (44,481 samples, 0.04%)</title><rect x="1189.5" y="213" width="0.5" height="15.0" fill="rgb(225,86,86)" rx="2" ry="2" />
<text  x="1192.55" y="223.5" ></text>
</g>
<g >
<title>double* std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;double const*, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;, double*, double&gt; (1,825,559 samples, 1.57%)</title><rect x="156.3" y="213" width="18.5" height="15.0" fill="rgb(194,194,56)" rx="2" ry="2" />
<text  x="159.33" y="223.5" ></text>
</g>
<g >
<title>[ld-linux-x86-64.so.2] (2,264,112 samples, 1.94%)</title><rect x="34.2" y="245" width="22.9" height="15.0" fill="rgb(242,112,112)" rx="2" ry="2" />
<text  x="37.16" y="255.5" >[..</text>
</g>
<g >
<title>do_mmap (2,264,112 samples, 1.94%)</title><rect x="34.2" y="133" width="22.9" height="15.0" fill="rgb(225,87,87)" rx="2" ry="2" />
<text  x="37.16" y="143.5" >d..</text>
</g>
<g >
<title>std::__new_allocator&lt;double&gt;::allocate (902,786 samples, 0.77%)</title><rect x="1146.7" y="245" width="9.1" height="15.0" fill="rgb(223,223,67)" rx="2" ry="2" />
<text  x="1149.67" y="255.5" ></text>
</g>
<g >
<title>CompoundRingBuffer&lt;std::array&lt;double, 5ul&gt;, double&gt;::bisect (868,325 samples, 0.75%)</title><rect x="302.1" y="229" width="8.8" height="15.0" fill="rgb(208,208,62)" rx="2" ry="2" />
<text  x="305.12" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::_M_range_check (860,523 samples, 0.74%)</title><rect x="709.2" y="181" width="8.7" height="15.0" fill="rgb(193,193,56)" rx="2" ry="2" />
<text  x="712.18" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::vector (1,853,379 samples, 1.59%)</title><rect x="1110.1" y="165" width="18.8" height="15.0" fill="rgb(212,212,63)" rx="2" ry="2" />
<text  x="1113.14" y="175.5" ></text>
</g>
<g >
<title>exit_mmap (775,307 samples, 0.67%)</title><rect x="1181.7" y="261" width="7.8" height="15.0" fill="rgb(234,99,99)" rx="2" ry="2" />
<text  x="1184.70" y="271.5" ></text>
</g>
<g >
<title>History&lt;double, double&gt;::at_time (41,098,954 samples, 35.28%)</title><rect x="310.9" y="229" width="416.3" height="15.0" fill="rgb(209,209,62)" rx="2" ry="2" />
<text  x="313.91" y="239.5" >History&lt;double, double&gt;::at_time</text>
</g>
<g >
<title>void std::vector&lt;double, std::allocator&lt;double&gt; &gt;::_M_realloc_append&lt;double const&amp;&gt; (902,786 samples, 0.77%)</title><rect x="1146.7" y="277" width="9.1" height="15.0" fill="rgb(219,219,66)" rx="2" ry="2" />
<text  x="1149.67" y="287.5" ></text>
</g>
<g >
<title>std::queue&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::deque&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::allocator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt; &gt;::pop (1,862,062 samples, 1.60%)</title><rect x="942.0" y="277" width="18.8" height="15.0" fill="rgb(197,197,58)" rx="2" ry="2" />
<text  x="944.96" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;* std::__uninitialized_fill_n&lt;false&gt;::__uninit_fill_n&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;*, unsigned long, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; (2,776,213 samples, 2.38%)</title><rect x="1100.8" y="213" width="28.1" height="15.0" fill="rgb(215,215,64)" rx="2" ry="2" />
<text  x="1103.79" y="223.5" >s..</text>
</g>
<g >
<title>std::deque&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::allocator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt;::push_back (3,633,535 samples, 3.12%)</title><rect x="147.0" y="245" width="36.8" height="15.0" fill="rgb(202,202,59)" rx="2" ry="2" />
<text  x="150.02" y="255.5" >std..</text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (930,800 samples, 0.80%)</title><rect x="951.4" y="229" width="9.4" height="15.0" fill="rgb(230,94,94)" rx="2" ry="2" />
<text  x="954.39" y="239.5" ></text>
</g>
<g >
<title>malloc (920,332 samples, 0.79%)</title><rect x="1091.5" y="181" width="9.3" height="15.0" fill="rgb(228,91,91)" rx="2" ry="2" />
<text  x="1094.47" y="191.5" ></text>
</g>
<g >
<title>double* std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;double const, double&gt; (927,877 samples, 0.80%)</title><rect x="1119.5" y="37" width="9.4" height="15.0" fill="rgb(178,178,51)" rx="2" ry="2" />
<text  x="1122.51" y="47.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::vector (3,633,535 samples, 3.12%)</title><rect x="147.0" y="229" width="36.8" height="15.0" fill="rgb(212,212,63)" rx="2" ry="2" />
<text  x="150.02" y="239.5" >std..</text>
</g>
<g >
<title>RingBuffer&lt;std::array&lt;double, 5ul&gt; &gt;::operator[] (925,348 samples, 0.79%)</title><rect x="903.6" y="261" width="9.3" height="15.0" fill="rgb(199,199,58)" rx="2" ry="2" />
<text  x="906.58" y="271.5" ></text>
</g>
<g >
<title>void std::_Construct&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt; const&amp;&gt; (1,853,379 samples, 1.59%)</title><rect x="1110.1" y="181" width="18.8" height="15.0" fill="rgb(215,215,64)" rx="2" ry="2" />
<text  x="1113.14" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::at (2,697,871 samples, 2.32%)</title><rect x="690.6" y="197" width="27.3" height="15.0" fill="rgb(191,191,56)" rx="2" ry="2" />
<text  x="693.57" y="207.5" >s..</text>
</g>
<g >
<title>[libc.so.6] (902,786 samples, 0.77%)</title><rect x="1146.7" y="181" width="9.1" height="15.0" fill="rgb(220,79,79)" rx="2" ry="2" />
<text  x="1149.67" y="191.5" ></text>
</g>
<g >
<title>setup_arg_pages (681,325 samples, 0.58%)</title><rect x="57.1" y="245" width="6.9" height="15.0" fill="rgb(219,78,78)" rx="2" ry="2" />
<text  x="60.09" y="255.5" ></text>
</g>
<g >
<title>DDEint_dopri_5&lt;&amp; (63,879,486 samples, 54.83%)</title><rect x="183.8" y="277" width="647.0" height="15.0" fill="rgb(246,117,117)" rx="2" ry="2" />
<text  x="186.82" y="287.5" >DDEint_dopri_5&lt;&amp;</text>
</g>
<g >
<title>malloc (902,786 samples, 0.77%)</title><rect x="1146.7" y="213" width="9.1" height="15.0" fill="rgb(228,91,91)" rx="2" ry="2" />
<text  x="1149.67" y="223.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (44,481 samples, 0.04%)</title><rect x="1189.5" y="341" width="0.5" height="15.0" fill="rgb(215,72,72)" rx="2" ry="2" />
<text  x="1192.55" y="351.5" ></text>
</g>
<g >
<title>RingBuffer&lt;double&gt;::wrap (904,575 samples, 0.78%)</title><rect x="428.4" y="181" width="9.1" height="15.0" fill="rgb(220,220,66)" rx="2" ry="2" />
<text  x="431.36" y="191.5" ></text>
</g>
<g >
<title>DDEint&lt;&amp; (51,992,790 samples, 44.63%)</title><rect x="246.6" y="261" width="526.6" height="15.0" fill="rgb(214,70,70)" rx="2" ry="2" />
<text  x="249.59" y="271.5" >DDEint&lt;&amp;</text>
</g>
<g >
<title>double* std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;double const*, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;, double*&gt; (927,877 samples, 0.80%)</title><rect x="1119.5" y="117" width="9.4" height="15.0" fill="rgb(211,211,63)" rx="2" ry="2" />
<text  x="1122.51" y="127.5" ></text>
</g>
<g >
<title>[libc.so.6] (920,977 samples, 0.79%)</title><rect x="165.5" y="101" width="9.3" height="15.0" fill="rgb(220,79,79)" rx="2" ry="2" />
<text  x="168.49" y="111.5" ></text>
</g>
<g >
<title>double* std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;double const*, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;, double*&gt; (1,825,559 samples, 1.57%)</title><rect x="156.3" y="181" width="18.5" height="15.0" fill="rgb(211,211,63)" rx="2" ry="2" />
<text  x="159.33" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::_M_range_check (910,121 samples, 0.78%)</title><rect x="867.2" y="213" width="9.2" height="15.0" fill="rgb(193,193,56)" rx="2" ry="2" />
<text  x="870.22" y="223.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::_M_get_Tp_allocator (2,606,337 samples, 2.24%)</title><rect x="1047.0" y="261" width="26.4" height="15.0" fill="rgb(199,199,58)" rx="2" ry="2" />
<text  x="1049.96" y="271.5" >s..</text>
</g>
<g >
<title>perf_event_exec (44,481 samples, 0.04%)</title><rect x="1189.5" y="229" width="0.5" height="15.0" fill="rgb(214,71,71)" rx="2" ry="2" />
<text  x="1192.55" y="239.5" ></text>
</g>
<g >
<title>cv_dde (51,992,790 samples, 44.63%)</title><rect x="246.6" y="245" width="526.6" height="15.0" fill="rgb(253,127,127)" rx="2" ry="2" />
<text  x="249.59" y="255.5" >cv_dde</text>
</g>
<g >
<title>do_syscall_64 (920,332 samples, 0.79%)</title><rect x="1091.5" y="85" width="9.3" height="15.0" fill="rgb(204,57,57)" rx="2" ry="2" />
<text  x="1094.47" y="95.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::operator= (6,685,793 samples, 5.74%)</title><rect x="960.8" y="277" width="67.7" height="15.0" fill="rgb(217,217,65)" rx="2" ry="2" />
<text  x="963.82" y="287.5" >std::ve..</text>
</g>
<g >
<title>double* std::__copy_move_a2&lt;false, double const*, double*&gt; (927,877 samples, 0.80%)</title><rect x="1119.5" y="53" width="9.4" height="15.0" fill="rgb(205,205,61)" rx="2" ry="2" />
<text  x="1122.51" y="63.5" ></text>
</g>
<g >
<title>[libm.so.6] (4,543,370 samples, 3.90%)</title><rect x="727.2" y="229" width="46.0" height="15.0" fill="rgb(204,55,55)" rx="2" ry="2" />
<text  x="730.16" y="239.5" >[lib..</text>
</g>
<g >
<title>free_unref_page_commit (775,307 samples, 0.67%)</title><rect x="1181.7" y="165" width="7.8" height="15.0" fill="rgb(246,118,118)" rx="2" ry="2" />
<text  x="1184.70" y="175.5" ></text>
</g>
<g >
<title>[unknown] (44,481 samples, 0.04%)</title><rect x="1189.5" y="357" width="0.5" height="15.0" fill="rgb(205,58,58)" rx="2" ry="2" />
<text  x="1192.55" y="367.5" ></text>
</g>
<g >
<title>x64_sys_call (920,332 samples, 0.79%)</title><rect x="1091.5" y="69" width="9.3" height="15.0" fill="rgb(246,117,117)" rx="2" ry="2" />
<text  x="1094.47" y="79.5" ></text>
</g>
<g >
<title>CompoundRingBuffer&lt;std::array&lt;double, 5ul&gt;, double&gt;::bisect (24,298,003 samples, 20.86%)</title><rect x="310.9" y="213" width="246.1" height="15.0" fill="rgb(208,208,62)" rx="2" ry="2" />
<text  x="313.91" y="223.5" >CompoundRingBuffer&lt;std::array&lt;do..</text>
</g>
<g >
<title>do_syscall_64 (775,307 samples, 0.67%)</title><rect x="1181.7" y="341" width="7.8" height="15.0" fill="rgb(204,57,57)" rx="2" ry="2" />
<text  x="1184.70" y="351.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::_M_get_Tp_allocator (826,497 samples, 0.71%)</title><rect x="1165.3" y="229" width="8.3" height="15.0" fill="rgb(199,199,58)" rx="2" ry="2" />
<text  x="1168.27" y="239.5" ></text>
</g>
<g >
<title>double* std::__copy_move_a&lt;false, __gnu_cxx::__normal_iterator&lt;double const*, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;, double*&gt; (887,038 samples, 0.76%)</title><rect x="1038.0" y="197" width="9.0" height="15.0" fill="rgb(180,180,52)" rx="2" ry="2" />
<text  x="1040.97" y="207.5" ></text>
</g>
<g >
<title>perf_event_mmap_output (681,325 samples, 0.58%)</title><rect x="57.1" y="165" width="6.9" height="15.0" fill="rgb(210,65,65)" rx="2" ry="2" />
<text  x="60.09" y="175.5" ></text>
</g>
<g >
<title>[ld-linux-x86-64.so.2] (2,264,112 samples, 1.94%)</title><rect x="34.2" y="213" width="22.9" height="15.0" fill="rgb(242,112,112)" rx="2" ry="2" />
<text  x="37.16" y="223.5" >[..</text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::allocator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt;::~vector (1,621,796 samples, 1.39%)</title><rect x="1165.3" y="293" width="16.4" height="15.0" fill="rgb(209,209,62)" rx="2" ry="2" />
<text  x="1168.27" y="303.5" ></text>
</g>
<g >
<title>__x64_sys_execve (681,325 samples, 0.58%)</title><rect x="57.1" y="309" width="6.9" height="15.0" fill="rgb(246,117,117)" rx="2" ry="2" />
<text  x="60.09" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::operator[] (4,455,382 samples, 3.82%)</title><rect x="785.7" y="261" width="45.1" height="15.0" fill="rgb(222,222,67)" rx="2" ry="2" />
<text  x="788.67" y="271.5" >std:..</text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::vector (6,214,339 samples, 5.33%)</title><rect x="1028.5" y="277" width="63.0" height="15.0" fill="rgb(212,212,63)" rx="2" ry="2" />
<text  x="1031.53" y="287.5" >std::v..</text>
</g>
<g >
<title>std::vector&lt;std::array&lt;double, 5ul&gt;, std::allocator&lt;std::array&lt;double, 5ul&gt; &gt; &gt;::_S_max_size (1,059,902 samples, 0.91%)</title><rect x="922.1" y="229" width="10.7" height="15.0" fill="rgb(229,229,69)" rx="2" ry="2" />
<text  x="925.10" y="239.5" ></text>
</g>
<g >
<title>__libc_start_main (110,357,882 samples, 94.72%)</title><rect x="64.0" y="341" width="1117.7" height="15.0" fill="rgb(234,99,99)" rx="2" ry="2" />
<text  x="66.99" y="351.5" >__libc_start_main</text>
</g>
<g >
<title>RingBuffer&lt;double&gt;::advance (922,212 samples, 0.79%)</title><rect x="848.7" y="245" width="9.3" height="15.0" fill="rgb(210,210,62)" rx="2" ry="2" />
<text  x="851.70" y="255.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (920,332 samples, 0.79%)</title><rect x="1091.5" y="101" width="9.3" height="15.0" fill="rgb(215,72,72)" rx="2" ry="2" />
<text  x="1094.47" y="111.5" ></text>
</g>
<g >
<title>do_execveat_common.isra.0 (44,481 samples, 0.04%)</title><rect x="1189.5" y="293" width="0.5" height="15.0" fill="rgb(229,92,92)" rx="2" ry="2" />
<text  x="1192.55" y="303.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;*&gt; (1,621,796 samples, 1.39%)</title><rect x="1165.3" y="277" width="16.4" height="15.0" fill="rgb(175,175,50)" rx="2" ry="2" />
<text  x="1168.27" y="287.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::_M_create_storage (901,166 samples, 0.77%)</title><rect x="1082.3" y="245" width="9.2" height="15.0" fill="rgb(208,208,62)" rx="2" ry="2" />
<text  x="1085.35" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;RingBuffer&lt;std::array&lt;double, 5ul&gt; &gt;, std::allocator&lt;RingBuffer&lt;std::array&lt;double, 5ul&gt; &gt; &gt; &gt;::size (880,028 samples, 0.76%)</title><rect x="894.7" y="245" width="8.9" height="15.0" fill="rgb(226,226,68)" rx="2" ry="2" />
<text  x="897.66" y="255.5" ></text>
</g>
<g >
<title>__tlb_batch_free_encoded_pages (775,307 samples, 0.67%)</title><rect x="1181.7" y="229" width="7.8" height="15.0" fill="rgb(200,51,51)" rx="2" ry="2" />
<text  x="1184.70" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::at (1,798,211 samples, 1.54%)</title><rect x="618.3" y="181" width="18.3" height="15.0" fill="rgb(191,191,56)" rx="2" ry="2" />
<text  x="621.34" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::_M_range_check (6,348,195 samples, 5.45%)</title><rect x="465.2" y="165" width="64.3" height="15.0" fill="rgb(193,193,56)" rx="2" ry="2" />
<text  x="468.22" y="175.5" >std::ve..</text>
</g>
<g >
<title>perf_event_mmap (2,264,112 samples, 1.94%)</title><rect x="34.2" y="101" width="22.9" height="15.0" fill="rgb(226,89,89)" rx="2" ry="2" />
<text  x="37.16" y="111.5" >p..</text>
</g>
<g >
<title>[libm.so.6] (1,831,349 samples, 1.57%)</title><rect x="128.5" y="245" width="18.5" height="15.0" fill="rgb(204,55,55)" rx="2" ry="2" />
<text  x="131.47" y="255.5" ></text>
</g>
<g >
<title>perf-exec (44,481 samples, 0.04%)</title><rect x="1189.5" y="373" width="0.5" height="15.0" fill="rgb(229,93,93)" rx="2" ry="2" />
<text  x="1192.55" y="383.5" ></text>
</g>
<g >
<title>__gnu_cxx::__promote_2&lt;decltype  (1,831,349 samples, 1.57%)</title><rect x="128.5" y="261" width="18.5" height="15.0" fill="rgb(225,225,68)" rx="2" ry="2" />
<text  x="131.47" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::push_back (902,786 samples, 0.77%)</title><rect x="1146.7" y="293" width="9.1" height="15.0" fill="rgb(222,222,67)" rx="2" ry="2" />
<text  x="1149.67" y="303.5" ></text>
</g>
<g >
<title>vm_mmap_pgoff (2,264,112 samples, 1.94%)</title><rect x="34.2" y="149" width="22.9" height="15.0" fill="rgb(235,102,102)" rx="2" ry="2" />
<text  x="37.16" y="159.5" >v..</text>
</g>
<g >
<title>RingBuffer&lt;double&gt;::operator[] (1,798,211 samples, 1.54%)</title><rect x="618.3" y="197" width="18.3" height="15.0" fill="rgb(228,228,69)" rx="2" ry="2" />
<text  x="621.34" y="207.5" ></text>
</g>
<g >
<title>DDEint_dopri_5&lt;&amp; (104,269,764 samples, 89.50%)</title><rect x="72.9" y="293" width="1056.0" height="15.0" fill="rgb(246,117,117)" rx="2" ry="2" />
<text  x="75.87" y="303.5" >DDEint_dopri_5&lt;&amp;</text>
</g>
<g >
<title>__sysvec_apic_timer_interrupt (1,233,175 samples, 1.06%)</title><rect x="773.2" y="229" width="12.5" height="15.0" fill="rgb(241,110,110)" rx="2" ry="2" />
<text  x="776.18" y="239.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::~_Vector_base (930,800 samples, 0.80%)</title><rect x="951.4" y="245" width="9.4" height="15.0" fill="rgb(195,195,57)" rx="2" ry="2" />
<text  x="954.39" y="255.5" ></text>
</g>
<g >
<title>double* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;double const*, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;, double*&gt; (1,825,559 samples, 1.57%)</title><rect x="156.3" y="197" width="18.5" height="15.0" fill="rgb(205,205,61)" rx="2" ry="2" />
<text  x="159.33" y="207.5" ></text>
</g>
<g >
<title>free_pages_and_swap_cache (775,307 samples, 0.67%)</title><rect x="1181.7" y="213" width="7.8" height="15.0" fill="rgb(219,78,78)" rx="2" ry="2" />
<text  x="1184.70" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::_M_move_assign (5,784,350 samples, 4.96%)</title><rect x="970.0" y="261" width="58.5" height="15.0" fill="rgb(175,175,50)" rx="2" ry="2" />
<text  x="972.95" y="271.5" >std::v..</text>
</g>
<g >
<title>do_syscall_64 (2,264,112 samples, 1.94%)</title><rect x="34.2" y="181" width="22.9" height="15.0" fill="rgb(204,57,57)" rx="2" ry="2" />
<text  x="37.16" y="191.5" >d..</text>
</g>
<g >
<title>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::_M_deallocate (894,850 samples, 0.77%)</title><rect x="1019.5" y="213" width="9.0" height="15.0" fill="rgb(213,213,64)" rx="2" ry="2" />
<text  x="1022.47" y="223.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::_Vector_base (1,789,088 samples, 1.54%)</title><rect x="1073.4" y="261" width="18.1" height="15.0" fill="rgb(210,210,63)" rx="2" ry="2" />
<text  x="1076.35" y="271.5" ></text>
</g>
<g >
<title>operator new (902,786 samples, 0.77%)</title><rect x="1146.7" y="229" width="9.1" height="15.0" fill="rgb(212,67,67)" rx="2" ry="2" />
<text  x="1149.67" y="239.5" ></text>
</g>
<g >
<title>double* std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;double const*, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;, double*, double&gt; (887,038 samples, 0.76%)</title><rect x="1038.0" y="261" width="9.0" height="15.0" fill="rgb(194,194,56)" rx="2" ry="2" />
<text  x="1040.97" y="271.5" ></text>
</g>
<g >
<title>begin_new_exec (44,481 samples, 0.04%)</title><rect x="1189.5" y="245" width="0.5" height="15.0" fill="rgb(244,114,114)" rx="2" ry="2" />
<text  x="1192.55" y="255.5" ></text>
</g>
<g >
<title>RingBuffer&lt;std::array&lt;double, 5ul&gt; &gt;::wrap (897,814 samples, 0.77%)</title><rect x="876.4" y="229" width="9.1" height="15.0" fill="rgb(190,190,55)" rx="2" ry="2" />
<text  x="879.44" y="239.5" ></text>
</g>
<g >
<title>RingBuffer&lt;double&gt;::wrap (915,357 samples, 0.79%)</title><rect x="717.9" y="213" width="9.3" height="15.0" fill="rgb(220,220,66)" rx="2" ry="2" />
<text  x="720.89" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::size (910,121 samples, 0.78%)</title><rect x="867.2" y="197" width="9.2" height="15.0" fill="rgb(207,207,61)" rx="2" ry="2" />
<text  x="870.22" y="207.5" ></text>
</g>
<g >
<title>double* std::__copy_move_a2&lt;false, double const*, double*&gt; (920,977 samples, 0.79%)</title><rect x="165.5" y="117" width="9.3" height="15.0" fill="rgb(205,205,61)" rx="2" ry="2" />
<text  x="168.49" y="127.5" ></text>
</g>
<g >
<title>load_elf_binary (44,481 samples, 0.04%)</title><rect x="1189.5" y="261" width="0.5" height="15.0" fill="rgb(220,79,79)" rx="2" ry="2" />
<text  x="1192.55" y="271.5" ></text>
</g>
<g >
<title>folios_put_refs (775,307 samples, 0.67%)</title><rect x="1181.7" y="197" width="7.8" height="15.0" fill="rgb(254,129,129)" rx="2" ry="2" />
<text  x="1184.70" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::size (881,664 samples, 0.76%)</title><rect x="618.3" y="149" width="9.0" height="15.0" fill="rgb(207,207,61)" rx="2" ry="2" />
<text  x="621.34" y="159.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::_M_range_check (881,664 samples, 0.76%)</title><rect x="618.3" y="165" width="9.0" height="15.0" fill="rgb(193,193,56)" rx="2" ry="2" />
<text  x="621.34" y="175.5" ></text>
</g>
<g >
<title>double* std::__copy_move_a1&lt;false, double const*, double*&gt; (927,877 samples, 0.80%)</title><rect x="1119.5" y="69" width="9.4" height="15.0" fill="rgb(212,212,63)" rx="2" ry="2" />
<text  x="1122.51" y="79.5" ></text>
</g>
<g >
<title>handle_softirqs (930,800 samples, 0.80%)</title><rect x="951.4" y="181" width="9.4" height="15.0" fill="rgb(237,104,104)" rx="2" ry="2" />
<text  x="954.39" y="191.5" ></text>
</g>
<g >
<title>double* std::copy&lt;__gnu_cxx::__normal_iterator&lt;double const*, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;, double*&gt; (1,825,559 samples, 1.57%)</title><rect x="156.3" y="165" width="18.5" height="15.0" fill="rgb(221,221,66)" rx="2" ry="2" />
<text  x="159.33" y="175.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::_M_allocate (902,786 samples, 0.77%)</title><rect x="1146.7" y="261" width="9.1" height="15.0" fill="rgb(212,212,63)" rx="2" ry="2" />
<text  x="1149.67" y="271.5" ></text>
</g>
<g >
<title>double* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;double const*, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;, double*&gt; (1,853,379 samples, 1.59%)</title><rect x="1110.1" y="133" width="18.8" height="15.0" fill="rgb(205,205,61)" rx="2" ry="2" />
<text  x="1113.14" y="143.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;* std::__do_uninit_fill_n&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;*, unsigned long, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; (2,776,213 samples, 2.38%)</title><rect x="1100.8" y="197" width="28.1" height="15.0" fill="rgb(201,201,59)" rx="2" ry="2" />
<text  x="1103.79" y="207.5" >s..</text>
</g>
<g >
<title>History&lt;double, double&gt;::save (10,976,481 samples, 9.42%)</title><rect x="830.8" y="277" width="111.2" height="15.0" fill="rgb(198,198,58)" rx="2" ry="2" />
<text  x="833.79" y="287.5" >History&lt;doubl..</text>
</g>
<g >
<title>[ld-linux-x86-64.so.2] (2,264,112 samples, 1.94%)</title><rect x="34.2" y="261" width="22.9" height="15.0" fill="rgb(242,112,112)" rx="2" ry="2" />
<text  x="37.16" y="271.5" >[..</text>
</g>
<g >
<title>tlb_finish_mmu (775,307 samples, 0.67%)</title><rect x="1181.7" y="245" width="7.8" height="15.0" fill="rgb(250,123,123)" rx="2" ry="2" />
<text  x="1184.70" y="255.5" ></text>
</g>
<g >
<title>double* std::__copy_move_a&lt;false, __gnu_cxx::__normal_iterator&lt;double const*, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;, double*&gt; (1,825,559 samples, 1.57%)</title><rect x="156.3" y="149" width="18.5" height="15.0" fill="rgb(180,180,52)" rx="2" ry="2" />
<text  x="159.33" y="159.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::allocator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt;::vector (3,696,545 samples, 3.17%)</title><rect x="1091.5" y="277" width="37.4" height="15.0" fill="rgb(224,224,68)" rx="2" ry="2" />
<text  x="1094.47" y="287.5" >std..</text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::size (3,645,250 samples, 3.13%)</title><rect x="492.6" y="149" width="36.9" height="15.0" fill="rgb(207,207,61)" rx="2" ry="2" />
<text  x="495.60" y="159.5" >std..</text>
</g>
</g>
</svg>
