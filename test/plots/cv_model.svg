<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="454" onload="init(evt)" viewBox="0 0 1200 454" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="454.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >cv_model</text>
<text id="details" x="10.00" y="437" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="437" > </text>
<g id="frames">
<g >
<title>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::_Vector_base (3,433,296 samples, 2.87%)</title><rect x="1112.2" y="165" width="33.9" height="15.0" fill="rgb(210,210,63)" rx="2" ry="2" />
<text  x="1115.20" y="175.5" >st..</text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::operator= (3,158,634 samples, 2.64%)</title><rect x="1002.0" y="293" width="31.2" height="15.0" fill="rgb(217,217,65)" rx="2" ry="2" />
<text  x="1005.04" y="303.5" >st..</text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::vector (3,433,296 samples, 2.87%)</title><rect x="1112.2" y="181" width="33.9" height="15.0" fill="rgb(212,212,63)" rx="2" ry="2" />
<text  x="1115.20" y="191.5" >st..</text>
</g>
<g >
<title>std::vector&lt;std::array&lt;double, 5ul&gt;, std::allocator&lt;std::array&lt;double, 5ul&gt; &gt; &gt;::operator[] (1,921,557 samples, 1.61%)</title><rect x="646.8" y="197" width="19.0" height="15.0" fill="rgb(226,226,68)" rx="2" ry="2" />
<text  x="649.78" y="207.5" ></text>
</g>
<g >
<title>double* std::__copy_move_a&lt;false, __gnu_cxx::__normal_iterator&lt;double const*, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;, double*&gt; (2,524,594 samples, 2.11%)</title><rect x="1043.7" y="213" width="24.9" height="15.0" fill="rgb(180,180,52)" rx="2" ry="2" />
<text  x="1046.67" y="223.5" >d..</text>
</g>
<g >
<title>folios_put_refs (1,112,105 samples, 0.93%)</title><rect x="1178.6" y="213" width="11.0" height="15.0" fill="rgb(254,129,129)" rx="2" ry="2" />
<text  x="1181.58" y="223.5" ></text>
</g>
<g >
<title>schedule (18,306 samples, 0.02%)</title><rect x="729.8" y="181" width="0.2" height="15.0" fill="rgb(254,129,129)" rx="2" ry="2" />
<text  x="732.82" y="191.5" ></text>
</g>
<g >
<title>CompoundRingBuffer&lt;std::array&lt;double, 5ul&gt;, double&gt;::update (7,567,854 samples, 6.33%)</title><rect x="857.1" y="277" width="74.7" height="15.0" fill="rgb(199,199,58)" rx="2" ry="2" />
<text  x="860.10" y="287.5" >Compound..</text>
</g>
<g >
<title>RingBuffer&lt;double&gt;::wrap (1,039,374 samples, 0.87%)</title><rect x="330.1" y="197" width="10.3" height="15.0" fill="rgb(220,220,66)" rx="2" ry="2" />
<text  x="333.11" y="207.5" ></text>
</g>
<g >
<title>__intel_pmu_enable_all.isra.0 (45,049 samples, 0.04%)</title><rect x="1189.6" y="213" width="0.4" height="15.0" fill="rgb(238,105,105)" rx="2" ry="2" />
<text  x="1192.56" y="223.5" ></text>
</g>
<g >
<title>setup_arg_pages (705,684 samples, 0.59%)</title><rect x="57.6" y="261" width="7.0" height="15.0" fill="rgb(219,78,78)" rx="2" ry="2" />
<text  x="60.61" y="271.5" ></text>
</g>
<g >
<title>finish_task_switch.isra.0 (18,306 samples, 0.02%)</title><rect x="729.8" y="149" width="0.2" height="15.0" fill="rgb(245,115,115)" rx="2" ry="2" />
<text  x="732.82" y="159.5" ></text>
</g>
<g >
<title>RingBuffer&lt;double&gt;::operator[] (9,488,526 samples, 7.94%)</title><rect x="330.1" y="213" width="93.7" height="15.0" fill="rgb(228,228,69)" rx="2" ry="2" />
<text  x="333.11" y="223.5" >RingBuffer&lt;..</text>
</g>
<g >
<title>double* std::__copy_move_a2&lt;false, double const*, double*&gt; (2,524,594 samples, 2.11%)</title><rect x="1043.7" y="181" width="24.9" height="15.0" fill="rgb(205,205,61)" rx="2" ry="2" />
<text  x="1046.67" y="191.5" >d..</text>
</g>
<g >
<title>std::vector&lt;std::array&lt;double, 5ul&gt;, std::allocator&lt;std::array&lt;double, 5ul&gt; &gt; &gt;::at (5,829,221 samples, 4.88%)</title><rect x="589.2" y="197" width="57.6" height="15.0" fill="rgb(194,194,57)" rx="2" ry="2" />
<text  x="592.24" y="207.5" >std::v..</text>
</g>
<g >
<title>DDEint&lt;&amp; (65,371,384 samples, 54.69%)</title><rect x="181.7" y="277" width="645.4" height="15.0" fill="rgb(214,70,70)" rx="2" ry="2" />
<text  x="184.71" y="287.5" >DDEint&lt;&amp;</text>
</g>
<g >
<title>[libc.so.6] (112,845,208 samples, 94.41%)</title><rect x="64.6" y="341" width="1114.0" height="15.0" fill="rgb(220,79,79)" rx="2" ry="2" />
<text  x="67.58" y="351.5" >[libc.so.6]</text>
</g>
<g >
<title>std::_Vector_base&lt;std::array&lt;double, 5ul&gt;, std::allocator&lt;std::array&lt;double, 5ul&gt; &gt; &gt;::_M_create_storage (209,670 samples, 0.18%)</title><rect x="944.1" y="245" width="2.0" height="15.0" fill="rgb(211,211,63)" rx="2" ry="2" />
<text  x="947.06" y="255.5" ></text>
</g>
<g >
<title>[ld-linux-x86-64.so.2] (2,393,620 samples, 2.00%)</title><rect x="34.0" y="261" width="23.6" height="15.0" fill="rgb(242,112,112)" rx="2" ry="2" />
<text  x="36.98" y="271.5" >[..</text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::allocator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt;::~vector (1,098,635 samples, 0.92%)</title><rect x="1167.7" y="309" width="10.9" height="15.0" fill="rgb(209,209,62)" rx="2" ry="2" />
<text  x="1170.73" y="319.5" ></text>
</g>
<g >
<title>lru_gen_del_folio.constprop.0 (1,112,105 samples, 0.93%)</title><rect x="1178.6" y="181" width="11.0" height="15.0" fill="rgb(221,81,81)" rx="2" ry="2" />
<text  x="1181.58" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::at (2,845,109 samples, 2.38%)</title><rect x="528.0" y="197" width="28.1" height="15.0" fill="rgb(191,191,56)" rx="2" ry="2" />
<text  x="531.04" y="207.5" >s..</text>
</g>
<g >
<title>std::vector&lt;std::array&lt;double, 5ul&gt;, std::allocator&lt;std::array&lt;double, 5ul&gt; &gt; &gt;::operator[] (1,288,646 samples, 1.08%)</title><rect x="622.0" y="181" width="12.7" height="15.0" fill="rgb(226,226,68)" rx="2" ry="2" />
<text  x="624.98" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::vector (976,134 samples, 0.82%)</title><rect x="172.1" y="245" width="9.6" height="15.0" fill="rgb(212,212,63)" rx="2" ry="2" />
<text  x="175.07" y="255.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::~_Vector_base (1,098,635 samples, 0.92%)</title><rect x="1167.7" y="229" width="10.9" height="15.0" fill="rgb(195,195,57)" rx="2" ry="2" />
<text  x="1170.73" y="239.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::_Vector_impl::~_Vector_impl (1,116,036 samples, 0.93%)</title><rect x="979.8" y="245" width="11.0" height="15.0" fill="rgb(218,218,65)" rx="2" ry="2" />
<text  x="982.77" y="255.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::_Vector_impl::_Vector_impl (1,127,463 samples, 0.94%)</title><rect x="1090.9" y="261" width="11.1" height="15.0" fill="rgb(178,178,51)" rx="2" ry="2" />
<text  x="1093.88" y="271.5" ></text>
</g>
<g >
<title>RingBuffer&lt;double&gt;::operator[] (2,343,537 samples, 1.96%)</title><rect x="888.3" y="261" width="23.2" height="15.0" fill="rgb(228,228,69)" rx="2" ry="2" />
<text  x="891.34" y="271.5" >R..</text>
</g>
<g >
<title>std::array&lt;double, 5ul&gt;::operator[] (1,159,850 samples, 0.97%)</title><rect x="741.7" y="229" width="11.4" height="15.0" fill="rgb(218,218,65)" rx="2" ry="2" />
<text  x="744.68" y="239.5" ></text>
</g>
<g >
<title>operator new (209,670 samples, 0.18%)</title><rect x="944.1" y="213" width="2.0" height="15.0" fill="rgb(212,67,67)" rx="2" ry="2" />
<text  x="947.06" y="223.5" ></text>
</g>
<g >
<title>do_execveat_common.isra.0 (45,049 samples, 0.04%)</title><rect x="1189.6" y="309" width="0.4" height="15.0" fill="rgb(229,92,92)" rx="2" ry="2" />
<text  x="1192.56" y="319.5" ></text>
</g>
<g >
<title>void std::_Construct&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt; const&amp;&gt; (3,433,296 samples, 2.87%)</title><rect x="1112.2" y="197" width="33.9" height="15.0" fill="rgb(215,215,64)" rx="2" ry="2" />
<text  x="1115.20" y="207.5" >vo..</text>
</g>
<g >
<title>main (112,845,208 samples, 94.41%)</title><rect x="64.6" y="325" width="1114.0" height="15.0" fill="rgb(242,112,112)" rx="2" ry="2" />
<text  x="67.58" y="335.5" >main</text>
</g>
<g >
<title>[libm.so.6] (7,488,159 samples, 6.26%)</title><rect x="753.1" y="245" width="74.0" height="15.0" fill="rgb(204,55,55)" rx="2" ry="2" />
<text  x="756.13" y="255.5" >[libm.so..</text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::_M_range_check (6,369,290 samples, 5.33%)</title><rect x="340.4" y="181" width="62.8" height="15.0" fill="rgb(193,193,56)" rx="2" ry="2" />
<text  x="343.37" y="191.5" >std::v..</text>
</g>
<g >
<title>begin_new_exec (45,049 samples, 0.04%)</title><rect x="1189.6" y="261" width="0.4" height="15.0" fill="rgb(244,114,114)" rx="2" ry="2" />
<text  x="1192.56" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::operator[] (1,093,508 samples, 0.91%)</title><rect x="921.0" y="261" width="10.8" height="15.0" fill="rgb(222,222,67)" rx="2" ry="2" />
<text  x="924.02" y="271.5" ></text>
</g>
<g >
<title>bprm_execve (705,684 samples, 0.59%)</title><rect x="57.6" y="293" width="7.0" height="15.0" fill="rgb(214,71,71)" rx="2" ry="2" />
<text  x="60.61" y="303.5" ></text>
</g>
<g >
<title>RingBuffer&lt;double&gt;::wrap (1,095,840 samples, 0.92%)</title><rect x="556.1" y="213" width="10.8" height="15.0" fill="rgb(220,220,66)" rx="2" ry="2" />
<text  x="559.13" y="223.5" ></text>
</g>
<g >
<title>free_pages_and_swap_cache (1,112,105 samples, 0.93%)</title><rect x="1178.6" y="229" width="11.0" height="15.0" fill="rgb(219,78,78)" rx="2" ry="2" />
<text  x="1181.58" y="239.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;&amp;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;*&gt;::_M_set_node (1,099,301 samples, 0.92%)</title><rect x="968.9" y="245" width="10.9" height="15.0" fill="rgb(194,194,57)" rx="2" ry="2" />
<text  x="971.92" y="255.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (1,151,075 samples, 0.96%)</title><rect x="1134.7" y="53" width="11.4" height="15.0" fill="rgb(222,82,82)" rx="2" ry="2" />
<text  x="1137.73" y="63.5" ></text>
</g>
<g >
<title>std::vector&lt;std::array&lt;double, 5ul&gt;, std::allocator&lt;std::array&lt;double, 5ul&gt; &gt; &gt;::_M_default_initialize (1,154,404 samples, 0.97%)</title><rect x="946.1" y="261" width="11.4" height="15.0" fill="rgb(208,208,62)" rx="2" ry="2" />
<text  x="949.13" y="271.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::_M_deallocate (1,098,635 samples, 0.92%)</title><rect x="1167.7" y="213" width="10.9" height="15.0" fill="rgb(213,213,64)" rx="2" ry="2" />
<text  x="1170.73" y="223.5" ></text>
</g>
<g >
<title>[ld-linux-x86-64.so.2] (4,822,955 samples, 4.03%)</title><rect x="10.0" y="341" width="47.6" height="15.0" fill="rgb(242,112,112)" rx="2" ry="2" />
<text  x="13.00" y="351.5" >[ld-..</text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::_M_move_assign (3,158,634 samples, 2.64%)</title><rect x="1002.0" y="277" width="31.2" height="15.0" fill="rgb(175,175,50)" rx="2" ry="2" />
<text  x="1005.04" y="287.5" >st..</text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;* std::__uninitialized_fill_n&lt;false&gt;::__uninit_fill_n&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;*, unsigned long, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; (3,433,296 samples, 2.87%)</title><rect x="1112.2" y="229" width="33.9" height="15.0" fill="rgb(215,215,64)" rx="2" ry="2" />
<text  x="1115.20" y="239.5" >st..</text>
</g>
<g >
<title>std::array&lt;double, 5ul&gt;* std::__fill_n_a&lt;std::array&lt;double, 5ul&gt;*, unsigned long, std::array&lt;double, 5ul&gt; &gt; (1,154,404 samples, 0.97%)</title><rect x="946.1" y="181" width="11.4" height="15.0" fill="rgb(223,223,67)" rx="2" ry="2" />
<text  x="949.13" y="191.5" ></text>
</g>
<g >
<title>[ld-linux-x86-64.so.2] (4,822,955 samples, 4.03%)</title><rect x="10.0" y="373" width="47.6" height="15.0" fill="rgb(242,112,112)" rx="2" ry="2" />
<text  x="13.00" y="383.5" >[ld-..</text>
</g>
<g >
<title>__x64_sys_execve (45,049 samples, 0.04%)</title><rect x="1189.6" y="325" width="0.4" height="15.0" fill="rgb(246,117,117)" rx="2" ry="2" />
<text  x="1192.56" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::at (1,081,415 samples, 0.90%)</title><rect x="900.8" y="245" width="10.7" height="15.0" fill="rgb(191,191,56)" rx="2" ry="2" />
<text  x="903.80" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::operator[] (3,044,095 samples, 2.55%)</title><rect x="827.1" y="277" width="30.0" height="15.0" fill="rgb(222,222,67)" rx="2" ry="2" />
<text  x="830.05" y="287.5" >st..</text>
</g>
<g >
<title>_dl_catch_exception (2,393,620 samples, 2.00%)</title><rect x="34.0" y="293" width="23.6" height="15.0" fill="rgb(253,127,127)" rx="2" ry="2" />
<text  x="36.98" y="303.5" >_..</text>
</g>
<g >
<title>std::array&lt;double, 5ul&gt;* std::__uninitialized_default_n_a&lt;std::array&lt;double, 5ul&gt;*, unsigned long, std::array&lt;double, 5ul&gt; &gt; (1,154,404 samples, 0.97%)</title><rect x="946.1" y="245" width="11.4" height="15.0" fill="rgb(203,203,60)" rx="2" ry="2" />
<text  x="949.13" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::_M_range_check (1,081,415 samples, 0.90%)</title><rect x="900.8" y="229" width="10.7" height="15.0" fill="rgb(193,193,56)" rx="2" ry="2" />
<text  x="903.80" y="239.5" ></text>
</g>
<g >
<title>double* std::__copy_move_a1&lt;false, double const*, double*&gt; (2,524,594 samples, 2.11%)</title><rect x="1043.7" y="197" width="24.9" height="15.0" fill="rgb(212,212,63)" rx="2" ry="2" />
<text  x="1046.67" y="207.5" >d..</text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::vector (7,999,912 samples, 6.69%)</title><rect x="1033.2" y="293" width="79.0" height="15.0" fill="rgb(212,212,63)" rx="2" ry="2" />
<text  x="1036.22" y="303.5" >std::vect..</text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::size (1,031,484 samples, 0.86%)</title><rect x="1102.0" y="277" width="10.2" height="15.0" fill="rgb(207,207,61)" rx="2" ry="2" />
<text  x="1105.01" y="287.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::_M_create_storage (2,257,942 samples, 1.89%)</title><rect x="1068.6" y="261" width="22.3" height="15.0" fill="rgb(208,208,62)" rx="2" ry="2" />
<text  x="1071.59" y="271.5" >s..</text>
</g>
<g >
<title>[libm.so.6] (1,168,213 samples, 0.98%)</title><rect x="150.0" y="261" width="11.6" height="15.0" fill="rgb(204,55,55)" rx="2" ry="2" />
<text  x="153.02" y="271.5" ></text>
</g>
<g >
<title>std::deque&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::allocator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt;::begin (1,153,400 samples, 0.96%)</title><rect x="957.5" y="261" width="11.4" height="15.0" fill="rgb(211,211,63)" rx="2" ry="2" />
<text  x="960.53" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;RingBuffer&lt;std::array&lt;double, 5ul&gt; &gt;, std::allocator&lt;RingBuffer&lt;std::array&lt;double, 5ul&gt; &gt; &gt; &gt;::operator[] (2,177,341 samples, 1.82%)</title><rect x="506.5" y="197" width="21.5" height="15.0" fill="rgb(187,187,54)" rx="2" ry="2" />
<text  x="509.54" y="207.5" >s..</text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::_M_range_check (1,262,122 samples, 1.06%)</title><rect x="888.3" y="245" width="12.5" height="15.0" fill="rgb(193,193,56)" rx="2" ry="2" />
<text  x="891.34" y="255.5" ></text>
</g>
<g >
<title>expand_downwards (705,684 samples, 0.59%)</title><rect x="57.6" y="245" width="7.0" height="15.0" fill="rgb(252,126,126)" rx="2" ry="2" />
<text  x="60.61" y="255.5" ></text>
</g>
<g >
<title>[ld-linux-x86-64.so.2] (4,822,955 samples, 4.03%)</title><rect x="10.0" y="309" width="47.6" height="15.0" fill="rgb(242,112,112)" rx="2" ry="2" />
<text  x="13.00" y="319.5" >[ld-..</text>
</g>
<g >
<title>void std::_Destroy&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; (1,098,635 samples, 0.92%)</title><rect x="1167.7" y="261" width="10.9" height="15.0" fill="rgb(191,191,55)" rx="2" ry="2" />
<text  x="1170.73" y="271.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::operator&lt;&lt; &lt;std::char_traits&lt;char&gt; &gt; (1,083,744 samples, 0.91%)</title><rect x="1146.1" y="309" width="10.7" height="15.0" fill="rgb(208,208,62)" rx="2" ry="2" />
<text  x="1149.09" y="319.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::~_Vector_base (1,140,054 samples, 0.95%)</title><rect x="990.8" y="245" width="11.2" height="15.0" fill="rgb(195,195,57)" rx="2" ry="2" />
<text  x="993.79" y="255.5" ></text>
</g>
<g >
<title>__x64_sys_exit_group (1,112,105 samples, 0.93%)</title><rect x="1178.6" y="341" width="11.0" height="15.0" fill="rgb(210,64,64)" rx="2" ry="2" />
<text  x="1181.58" y="351.5" ></text>
</g>
<g >
<title>do_group_exit (1,112,105 samples, 0.93%)</title><rect x="1178.6" y="325" width="11.0" height="15.0" fill="rgb(216,73,73)" rx="2" ry="2" />
<text  x="1181.58" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::_M_range_check (1,469,717 samples, 1.23%)</title><rect x="541.6" y="181" width="14.5" height="15.0" fill="rgb(193,193,56)" rx="2" ry="2" />
<text  x="544.62" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;std::array&lt;double, 5ul&gt;, std::allocator&lt;std::array&lt;double, 5ul&gt; &gt; &gt;::at (966,538 samples, 0.81%)</title><rect x="911.5" y="245" width="9.5" height="15.0" fill="rgb(194,194,57)" rx="2" ry="2" />
<text  x="914.47" y="255.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (18,306 samples, 0.02%)</title><rect x="729.8" y="213" width="0.2" height="15.0" fill="rgb(230,94,94)" rx="2" ry="2" />
<text  x="732.82" y="223.5" ></text>
</g>
<g >
<title>double* std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;double const*, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;, double*, double&gt; (2,524,594 samples, 2.11%)</title><rect x="1043.7" y="277" width="24.9" height="15.0" fill="rgb(194,194,56)" rx="2" ry="2" />
<text  x="1046.67" y="287.5" >d..</text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::operator[] (1,100,292 samples, 0.92%)</title><rect x="412.9" y="197" width="10.9" height="15.0" fill="rgb(222,222,67)" rx="2" ry="2" />
<text  x="415.92" y="207.5" ></text>
</g>
<g >
<title>[ld-linux-x86-64.so.2] (2,429,335 samples, 2.03%)</title><rect x="10.0" y="293" width="24.0" height="15.0" fill="rgb(242,112,112)" rx="2" ry="2" />
<text  x="13.00" y="303.5" >[..</text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::push_back (1,108,468 samples, 0.93%)</title><rect x="1156.8" y="309" width="10.9" height="15.0" fill="rgb(222,222,67)" rx="2" ry="2" />
<text  x="1159.79" y="319.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::array&lt;double, 5ul&gt;, std::allocator&lt;std::array&lt;double, 5ul&gt; &gt; &gt;::_Vector_base (209,670 samples, 0.18%)</title><rect x="944.1" y="261" width="2.0" height="15.0" fill="rgb(214,214,64)" rx="2" ry="2" />
<text  x="947.06" y="271.5" ></text>
</g>
<g >
<title>perf_event_exec (45,049 samples, 0.04%)</title><rect x="1189.6" y="245" width="0.4" height="15.0" fill="rgb(214,71,71)" rx="2" ry="2" />
<text  x="1192.56" y="255.5" ></text>
</g>
<g >
<title>std::array&lt;double, 5ul&gt;* std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;std::array&lt;double, 5ul&gt;*, unsigned long&gt; (1,154,404 samples, 0.97%)</title><rect x="946.1" y="213" width="11.4" height="15.0" fill="rgb(218,218,65)" rx="2" ry="2" />
<text  x="949.13" y="223.5" ></text>
</g>
<g >
<title>load_elf_binary (705,684 samples, 0.59%)</title><rect x="57.6" y="277" width="7.0" height="15.0" fill="rgb(220,79,79)" rx="2" ry="2" />
<text  x="60.61" y="287.5" ></text>
</g>
<g >
<title>std::queue&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::deque&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::allocator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt; &gt;::push (976,134 samples, 0.82%)</title><rect x="172.1" y="277" width="9.6" height="15.0" fill="rgb(219,219,66)" rx="2" ry="2" />
<text  x="175.07" y="287.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (1,083,744 samples, 0.91%)</title><rect x="1146.1" y="277" width="10.7" height="15.0" fill="rgb(226,226,68)" rx="2" ry="2" />
<text  x="1149.09" y="287.5" ></text>
</g>
<g >
<title>exit_mmap (1,112,105 samples, 0.93%)</title><rect x="1178.6" y="277" width="11.0" height="15.0" fill="rgb(234,99,99)" rx="2" ry="2" />
<text  x="1181.58" y="287.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;double&gt;::allocate (3,433,296 samples, 2.87%)</title><rect x="1112.2" y="117" width="33.9" height="15.0" fill="rgb(223,223,67)" rx="2" ry="2" />
<text  x="1115.20" y="127.5" >st..</text>
</g>
<g >
<title>__schedule (18,306 samples, 0.02%)</title><rect x="729.8" y="165" width="0.2" height="15.0" fill="rgb(224,86,86)" rx="2" ry="2" />
<text  x="732.82" y="175.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::size (1,081,415 samples, 0.90%)</title><rect x="900.8" y="213" width="10.7" height="15.0" fill="rgb(207,207,61)" rx="2" ry="2" />
<text  x="903.80" y="223.5" ></text>
</g>
<g >
<title>std::array&lt;double, 5ul&gt;* std::fill_n&lt;std::array&lt;double, 5ul&gt;*, unsigned long, std::array&lt;double, 5ul&gt; &gt; (1,154,404 samples, 0.97%)</title><rect x="946.1" y="197" width="11.4" height="15.0" fill="rgb(188,188,54)" rx="2" ry="2" />
<text  x="949.13" y="207.5" ></text>
</g>
<g >
<title>cv_dde (65,371,384 samples, 54.69%)</title><rect x="181.7" y="261" width="645.4" height="15.0" fill="rgb(253,127,127)" rx="2" ry="2" />
<text  x="184.71" y="271.5" >cv_dde</text>
</g>
<g >
<title>[unknown] (45,049 samples, 0.04%)</title><rect x="1189.6" y="373" width="0.4" height="15.0" fill="rgb(205,58,58)" rx="2" ry="2" />
<text  x="1192.56" y="383.5" ></text>
</g>
<g >
<title>perf_ctx_enable (45,049 samples, 0.04%)</title><rect x="1189.6" y="229" width="0.4" height="15.0" fill="rgb(225,86,86)" rx="2" ry="2" />
<text  x="1192.56" y="239.5" ></text>
</g>
<g >
<title>native_write_msr (45,049 samples, 0.04%)</title><rect x="1189.6" y="197" width="0.4" height="15.0" fill="rgb(236,102,102)" rx="2" ry="2" />
<text  x="1192.56" y="207.5" ></text>
</g>
<g >
<title>[ld-linux-x86-64.so.2] (2,429,335 samples, 2.03%)</title><rect x="10.0" y="277" width="24.0" height="15.0" fill="rgb(242,112,112)" rx="2" ry="2" />
<text  x="13.00" y="287.5" >[..</text>
</g>
<g >
<title>sync_regs (1,151,075 samples, 0.96%)</title><rect x="1134.7" y="37" width="11.4" height="15.0" fill="rgb(225,86,86)" rx="2" ry="2" />
<text  x="1137.73" y="47.5" ></text>
</g>
<g >
<title>[ld-linux-x86-64.so.2] (4,822,955 samples, 4.03%)</title><rect x="10.0" y="357" width="47.6" height="15.0" fill="rgb(242,112,112)" rx="2" ry="2" />
<text  x="13.00" y="367.5" >[ld-..</text>
</g>
<g >
<title>_start (112,845,208 samples, 94.41%)</title><rect x="64.6" y="373" width="1114.0" height="15.0" fill="rgb(244,114,114)" rx="2" ry="2" />
<text  x="67.58" y="383.5" >_start</text>
</g>
<g >
<title>RingBuffer&lt;double&gt;::size (18,306 samples, 0.02%)</title><rect x="729.8" y="229" width="0.2" height="15.0" fill="rgb(212,212,63)" rx="2" ry="2" />
<text  x="732.82" y="239.5" ></text>
</g>
<g >
<title>double* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;double const*, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;, double*&gt; (2,524,594 samples, 2.11%)</title><rect x="1043.7" y="261" width="24.9" height="15.0" fill="rgb(205,205,61)" rx="2" ry="2" />
<text  x="1046.67" y="271.5" >d..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (45,049 samples, 0.04%)</title><rect x="1189.6" y="357" width="0.4" height="15.0" fill="rgb(215,72,72)" rx="2" ry="2" />
<text  x="1192.56" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::allocator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt;::vector (3,433,296 samples, 2.87%)</title><rect x="1112.2" y="293" width="33.9" height="15.0" fill="rgb(224,224,68)" rx="2" ry="2" />
<text  x="1115.20" y="303.5" >st..</text>
</g>
<g >
<title>RingBuffer&lt;std::array&lt;double, 5ul&gt; &gt;::operator[] (10,009,093 samples, 8.37%)</title><rect x="566.9" y="213" width="98.9" height="15.0" fill="rgb(199,199,58)" rx="2" ry="2" />
<text  x="569.94" y="223.5" >RingBuffer&lt;..</text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;* std::__do_uninit_fill_n&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;*, unsigned long, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; (3,433,296 samples, 2.87%)</title><rect x="1112.2" y="213" width="33.9" height="15.0" fill="rgb(201,201,59)" rx="2" ry="2" />
<text  x="1115.20" y="223.5" >st..</text>
</g>
<g >
<title>tlb_finish_mmu (1,112,105 samples, 0.93%)</title><rect x="1178.6" y="261" width="11.0" height="15.0" fill="rgb(250,123,123)" rx="2" ry="2" />
<text  x="1181.58" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;* std::__uninitialized_fill_n_a&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;*, unsigned long, std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; (3,433,296 samples, 2.87%)</title><rect x="1112.2" y="261" width="33.9" height="15.0" fill="rgb(212,212,63)" rx="2" ry="2" />
<text  x="1115.20" y="271.5" >st..</text>
</g>
<g >
<title>irqentry_exit_to_user_mode (18,306 samples, 0.02%)</title><rect x="729.8" y="197" width="0.2" height="15.0" fill="rgb(254,129,129)" rx="2" ry="2" />
<text  x="732.82" y="207.5" ></text>
</g>
<g >
<title>std::deque&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::allocator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt;::front (1,153,400 samples, 0.96%)</title><rect x="957.5" y="277" width="11.4" height="15.0" fill="rgb(175,175,50)" rx="2" ry="2" />
<text  x="960.53" y="287.5" ></text>
</g>
<g >
<title>operator new (3,433,296 samples, 2.87%)</title><rect x="1112.2" y="101" width="33.9" height="15.0" fill="rgb(212,67,67)" rx="2" ry="2" />
<text  x="1115.20" y="111.5" >op..</text>
</g>
<g >
<title>[ld-linux-x86-64.so.2] (2,393,620 samples, 2.00%)</title><rect x="34.0" y="277" width="23.6" height="15.0" fill="rgb(242,112,112)" rx="2" ry="2" />
<text  x="36.98" y="287.5" >[..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (705,684 samples, 0.59%)</title><rect x="57.6" y="357" width="7.0" height="15.0" fill="rgb(215,72,72)" rx="2" ry="2" />
<text  x="60.61" y="367.5" ></text>
</g>
<g >
<title>perf-exec (45,049 samples, 0.04%)</title><rect x="1189.6" y="389" width="0.4" height="15.0" fill="rgb(229,93,93)" rx="2" ry="2" />
<text  x="1192.56" y="399.5" ></text>
</g>
<g >
<title>std::deque&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::allocator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt;::push_back (976,134 samples, 0.82%)</title><rect x="172.1" y="261" width="9.6" height="15.0" fill="rgb(202,202,59)" rx="2" ry="2" />
<text  x="175.07" y="271.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::_M_create_storage (3,433,296 samples, 2.87%)</title><rect x="1112.2" y="149" width="33.9" height="15.0" fill="rgb(208,208,62)" rx="2" ry="2" />
<text  x="1115.20" y="159.5" >st..</text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::~vector (1,098,635 samples, 0.92%)</title><rect x="1167.7" y="245" width="10.9" height="15.0" fill="rgb(197,197,58)" rx="2" ry="2" />
<text  x="1170.73" y="255.5" ></text>
</g>
<g >
<title>double* std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;double const*, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;, double*&gt; (2,524,594 samples, 2.11%)</title><rect x="1043.7" y="245" width="24.9" height="15.0" fill="rgb(211,211,63)" rx="2" ry="2" />
<text  x="1046.67" y="255.5" >d..</text>
</g>
<g >
<title>DDEint&lt;&amp; (9,763,205 samples, 8.17%)</title><rect x="85.3" y="293" width="96.4" height="15.0" fill="rgb(214,70,70)" rx="2" ry="2" />
<text  x="88.33" y="303.5" >DDEint&lt;&amp;</text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;* std::uninitialized_fill_n&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;*, unsigned long, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; (3,433,296 samples, 2.87%)</title><rect x="1112.2" y="245" width="33.9" height="15.0" fill="rgb(186,186,54)" rx="2" ry="2" />
<text  x="1115.20" y="255.5" >st..</text>
</g>
<g >
<title>[libm.so.6] (3,303,818 samples, 2.76%)</title><rect x="117.4" y="277" width="32.6" height="15.0" fill="rgb(204,55,55)" rx="2" ry="2" />
<text  x="120.41" y="287.5" >[l..</text>
</g>
<g >
<title>[ld-linux-x86-64.so.2] (2,429,335 samples, 2.03%)</title><rect x="10.0" y="245" width="24.0" height="15.0" fill="rgb(242,112,112)" rx="2" ry="2" />
<text  x="13.00" y="255.5" >[..</text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::size (979,570 samples, 0.82%)</title><rect x="403.2" y="181" width="9.7" height="15.0" fill="rgb(207,207,61)" rx="2" ry="2" />
<text  x="406.25" y="191.5" ></text>
</g>
<g >
<title>std::deque&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::allocator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt;::pop_front (3,355,391 samples, 2.81%)</title><rect x="968.9" y="277" width="33.1" height="15.0" fill="rgb(199,199,59)" rx="2" ry="2" />
<text  x="971.92" y="287.5" >st..</text>
</g>
<g >
<title>std::array&lt;double, 5ul&gt;* std::__uninitialized_default_n&lt;std::array&lt;double, 5ul&gt;*, unsigned long&gt; (1,154,404 samples, 0.97%)</title><rect x="946.1" y="229" width="11.4" height="15.0" fill="rgb(215,215,64)" rx="2" ry="2" />
<text  x="949.13" y="239.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1,112,105 samples, 0.93%)</title><rect x="1178.6" y="373" width="11.0" height="15.0" fill="rgb(215,72,72)" rx="2" ry="2" />
<text  x="1181.58" y="383.5" ></text>
</g>
<g >
<title>CompoundRingBuffer&lt;std::array&lt;double, 5ul&gt;, double&gt;::bisect (15,860,214 samples, 13.27%)</title><rect x="267.2" y="229" width="156.6" height="15.0" fill="rgb(208,208,62)" rx="2" ry="2" />
<text  x="270.21" y="239.5" >CompoundRingBuffer&lt;s..</text>
</g>
<g >
<title>bprm_execve (45,049 samples, 0.04%)</title><rect x="1189.6" y="293" width="0.4" height="15.0" fill="rgb(214,71,71)" rx="2" ry="2" />
<text  x="1192.56" y="303.5" ></text>
</g>
<g >
<title>[ld-linux-x86-64.so.2] (4,822,955 samples, 4.03%)</title><rect x="10.0" y="325" width="47.6" height="15.0" fill="rgb(242,112,112)" rx="2" ry="2" />
<text  x="13.00" y="335.5" >[ld-..</text>
</g>
<g >
<title>std::vector&lt;std::array&lt;double, 5ul&gt;, std::allocator&lt;std::array&lt;double, 5ul&gt; &gt; &gt;::size (1,223,404 samples, 1.02%)</title><rect x="634.7" y="181" width="12.1" height="15.0" fill="rgb(210,210,62)" rx="2" ry="2" />
<text  x="637.71" y="191.5" ></text>
</g>
<g >
<title>double* std::copy&lt;__gnu_cxx::__normal_iterator&lt;double const*, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;, double*&gt; (2,524,594 samples, 2.11%)</title><rect x="1043.7" y="229" width="24.9" height="15.0" fill="rgb(221,221,66)" rx="2" ry="2" />
<text  x="1046.67" y="239.5" >d..</text>
</g>
<g >
<title>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::_Vector_impl_data::_M_swap_data (2,010,755 samples, 1.68%)</title><rect x="1013.4" y="261" width="19.8" height="15.0" fill="rgb(201,201,59)" rx="2" ry="2" />
<text  x="1016.37" y="271.5" ></text>
</g>
<g >
<title>__gnu_cxx::__promote_2&lt;decltype  (2,233,556 samples, 1.87%)</title><rect x="150.0" y="277" width="22.1" height="15.0" fill="rgb(225,225,68)" rx="2" ry="2" />
<text  x="153.02" y="287.5" >_..</text>
</g>
<g >
<title>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::_Vector_base (3,385,405 samples, 2.83%)</title><rect x="1068.6" y="277" width="33.4" height="15.0" fill="rgb(210,210,63)" rx="2" ry="2" />
<text  x="1071.59" y="287.5" >st..</text>
</g>
<g >
<title>do_syscall_64 (705,684 samples, 0.59%)</title><rect x="57.6" y="341" width="7.0" height="15.0" fill="rgb(204,57,57)" rx="2" ry="2" />
<text  x="60.61" y="351.5" ></text>
</g>
<g >
<title>do_exit (1,112,105 samples, 0.93%)</title><rect x="1178.6" y="309" width="11.0" height="15.0" fill="rgb(229,92,92)" rx="2" ry="2" />
<text  x="1181.58" y="319.5" ></text>
</g>
<g >
<title>__x64_sys_execve (705,684 samples, 0.59%)</title><rect x="57.6" y="325" width="7.0" height="15.0" fill="rgb(246,117,117)" rx="2" ry="2" />
<text  x="60.61" y="335.5" ></text>
</g>
<g >
<title>_raw_spin_unlock (705,684 samples, 0.59%)</title><rect x="57.6" y="229" width="7.0" height="15.0" fill="rgb(220,79,79)" rx="2" ry="2" />
<text  x="60.61" y="239.5" ></text>
</g>
<g >
<title>RingBuffer&lt;double&gt;::operator[] (2,167,796 samples, 1.81%)</title><rect x="708.4" y="229" width="21.4" height="15.0" fill="rgb(228,228,69)" rx="2" ry="2" />
<text  x="711.42" y="239.5" >R..</text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::at (7,348,860 samples, 6.15%)</title><rect x="340.4" y="197" width="72.5" height="15.0" fill="rgb(191,191,56)" rx="2" ry="2" />
<text  x="343.37" y="207.5" >std::vec..</text>
</g>
<g >
<title>void std::_Destroy&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;*&gt; (1,098,635 samples, 0.92%)</title><rect x="1167.7" y="293" width="10.9" height="15.0" fill="rgb(175,175,50)" rx="2" ry="2" />
<text  x="1170.73" y="303.5" ></text>
</g>
<g >
<title>std::array&lt;double, 5ul&gt;::operator[] (2,071,295 samples, 1.73%)</title><rect x="688.0" y="213" width="20.4" height="15.0" fill="rgb(218,218,65)" rx="2" ry="2" />
<text  x="690.98" y="223.5" ></text>
</g>
<g >
<title>__mmput (1,112,105 samples, 0.93%)</title><rect x="1178.6" y="293" width="11.0" height="15.0" fill="rgb(248,120,120)" rx="2" ry="2" />
<text  x="1181.58" y="303.5" ></text>
</g>
<g >
<title>DDEint_dopri_5&lt;&amp; (108,480,530 samples, 90.76%)</title><rect x="75.2" y="309" width="1070.9" height="15.0" fill="rgb(246,117,117)" rx="2" ry="2" />
<text  x="78.18" y="319.5" >DDEint_dopri_5&lt;&amp;</text>
</g>
<g >
<title>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::_Vector_impl_data::_Vector_impl_data (1,127,463 samples, 0.94%)</title><rect x="1090.9" y="245" width="11.1" height="15.0" fill="rgb(206,206,61)" rx="2" ry="2" />
<text  x="1093.88" y="255.5" ></text>
</g>
<g >
<title>do_execveat_common.isra.0 (705,684 samples, 0.59%)</title><rect x="57.6" y="309" width="7.0" height="15.0" fill="rgb(229,92,92)" rx="2" ry="2" />
<text  x="60.61" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::size (2,193,403 samples, 1.84%)</title><rect x="381.6" y="165" width="21.6" height="15.0" fill="rgb(207,207,61)" rx="2" ry="2" />
<text  x="384.59" y="175.5" >s..</text>
</g>
<g >
<title>[unknown] (705,684 samples, 0.59%)</title><rect x="57.6" y="373" width="7.0" height="15.0" fill="rgb(205,58,58)" rx="2" ry="2" />
<text  x="60.61" y="383.5" ></text>
</g>
<g >
<title>std::deque&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::allocator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt;::_M_pop_front_aux (1,099,301 samples, 0.92%)</title><rect x="968.9" y="261" width="10.9" height="15.0" fill="rgb(204,204,60)" rx="2" ry="2" />
<text  x="971.92" y="271.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::_M_allocate (3,433,296 samples, 2.87%)</title><rect x="1112.2" y="133" width="33.9" height="15.0" fill="rgb(212,212,63)" rx="2" ry="2" />
<text  x="1115.20" y="143.5" >st..</text>
</g>
<g >
<title>__gnu_cxx::__enable_if&lt;!std::__is_scalar&lt;std::array&lt;double, 5ul&gt; &gt;::__value, void&gt;::__type std::__fill_a1&lt;std::array&lt;double, 5ul&gt;*, std::array&lt;double, 5ul&gt; &gt; (1,154,404 samples, 0.97%)</title><rect x="946.1" y="149" width="11.4" height="15.0" fill="rgb(224,224,68)" rx="2" ry="2" />
<text  x="949.13" y="159.5" ></text>
</g>
<g >
<title>pow (1,065,343 samples, 0.89%)</title><rect x="161.6" y="261" width="10.5" height="15.0" fill="rgb(254,128,128)" rx="2" ry="2" />
<text  x="164.56" y="271.5" ></text>
</g>
<g >
<title>malloc (3,433,296 samples, 2.87%)</title><rect x="1112.2" y="85" width="33.9" height="15.0" fill="rgb(228,91,91)" rx="2" ry="2" />
<text  x="1115.20" y="95.5" >ma..</text>
</g>
<g >
<title>std::_Deque_iterator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;&amp;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;*&gt;::_Deque_iterator (1,153,400 samples, 0.96%)</title><rect x="957.5" y="245" width="11.4" height="15.0" fill="rgb(201,201,59)" rx="2" ry="2" />
<text  x="960.53" y="255.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (1,083,744 samples, 0.91%)</title><rect x="1146.1" y="293" width="10.7" height="15.0" fill="rgb(192,192,56)" rx="2" ry="2" />
<text  x="1149.09" y="303.5" ></text>
</g>
<g >
<title>void std::__fill_a&lt;std::array&lt;double, 5ul&gt;*, std::array&lt;double, 5ul&gt; &gt; (1,154,404 samples, 0.97%)</title><rect x="946.1" y="165" width="11.4" height="15.0" fill="rgb(184,184,53)" rx="2" ry="2" />
<text  x="949.13" y="175.5" ></text>
</g>
<g >
<title>cv_model (119,485,952 samples, 99.96%)</title><rect x="10.0" y="389" width="1179.6" height="15.0" fill="rgb(228,91,91)" rx="2" ry="2" />
<text  x="13.00" y="399.5" >cv_model</text>
</g>
<g >
<title>RingBuffer&lt;std::array&lt;double, 5ul&gt; &gt;::operator[] (1,182,398 samples, 0.99%)</title><rect x="730.0" y="229" width="11.7" height="15.0" fill="rgb(199,199,58)" rx="2" ry="2" />
<text  x="733.01" y="239.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::_Vector_impl_data::_Vector_impl_data (985,826 samples, 0.82%)</title><rect x="1023.5" y="245" width="9.7" height="15.0" fill="rgb(206,206,61)" rx="2" ry="2" />
<text  x="1026.49" y="255.5" ></text>
</g>
<g >
<title>all (119,531,001 samples, 100%)</title><rect x="10.0" y="405" width="1180.0" height="15.0" fill="rgb(209,63,63)" rx="2" ry="2" />
<text  x="13.00" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::~vector (2,256,090 samples, 1.89%)</title><rect x="979.8" y="261" width="22.2" height="15.0" fill="rgb(197,197,58)" rx="2" ry="2" />
<text  x="982.77" y="271.5" >s..</text>
</g>
<g >
<title>History&lt;double, double&gt;::save (10,173,178 samples, 8.51%)</title><rect x="857.1" y="293" width="100.4" height="15.0" fill="rgb(198,198,58)" rx="2" ry="2" />
<text  x="860.10" y="303.5" >History&lt;doub..</text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;*&gt; (1,098,635 samples, 0.92%)</title><rect x="1167.7" y="277" width="10.9" height="15.0" fill="rgb(185,185,53)" rx="2" ry="2" />
<text  x="1170.73" y="287.5" ></text>
</g>
<g >
<title>__libc_start_main (112,845,208 samples, 94.41%)</title><rect x="64.6" y="357" width="1114.0" height="15.0" fill="rgb(234,99,99)" rx="2" ry="2" />
<text  x="67.58" y="367.5" >__libc_start_main</text>
</g>
<g >
<title>RingBuffer&lt;std::array&lt;double, 5ul&gt; &gt;::operator[] (966,538 samples, 0.81%)</title><rect x="911.5" y="261" width="9.5" height="15.0" fill="rgb(199,199,58)" rx="2" ry="2" />
<text  x="914.47" y="271.5" ></text>
</g>
<g >
<title>std::queue&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::deque&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::allocator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt; &gt;::pop (3,355,391 samples, 2.81%)</title><rect x="968.9" y="293" width="33.1" height="15.0" fill="rgb(197,197,58)" rx="2" ry="2" />
<text  x="971.92" y="303.5" >st..</text>
</g>
<g >
<title>std::vector&lt;std::array&lt;double, 5ul&gt;, std::allocator&lt;std::array&lt;double, 5ul&gt; &gt; &gt;::_M_range_check (1,037,350 samples, 0.87%)</title><rect x="611.7" y="181" width="10.3" height="15.0" fill="rgb(196,196,57)" rx="2" ry="2" />
<text  x="614.74" y="191.5" ></text>
</g>
<g >
<title>RingBuffer&lt;double&gt;::operator[] (2,845,109 samples, 2.38%)</title><rect x="528.0" y="213" width="28.1" height="15.0" fill="rgb(228,228,69)" rx="2" ry="2" />
<text  x="531.04" y="223.5" >R..</text>
</g>
<g >
<title>__tlb_batch_free_encoded_pages (1,112,105 samples, 0.93%)</title><rect x="1178.6" y="245" width="11.0" height="15.0" fill="rgb(200,51,51)" rx="2" ry="2" />
<text  x="1181.58" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;std::array&lt;double, 5ul&gt;, std::allocator&lt;std::array&lt;double, 5ul&gt; &gt; &gt;::_M_range_check (966,538 samples, 0.81%)</title><rect x="911.5" y="229" width="9.5" height="15.0" fill="rgb(196,196,57)" rx="2" ry="2" />
<text  x="914.47" y="239.5" ></text>
</g>
<g >
<title>History&lt;double, double&gt;::at_time (50,286,829 samples, 42.07%)</title><rect x="256.7" y="245" width="496.4" height="15.0" fill="rgb(209,209,62)" rx="2" ry="2" />
<text  x="259.70" y="255.5" >History&lt;double, double&gt;::at_time</text>
</g>
<g >
<title>History&lt;double, double&gt;::interpolate (28,833,923 samples, 24.12%)</title><rect x="423.8" y="229" width="284.6" height="15.0" fill="rgb(187,187,54)" rx="2" ry="2" />
<text  x="426.78" y="239.5" >History&lt;double, double&gt;::interpolate</text>
</g>
<g >
<title>[ld-linux-x86-64.so.2] (2,429,335 samples, 2.03%)</title><rect x="10.0" y="261" width="24.0" height="15.0" fill="rgb(242,112,112)" rx="2" ry="2" />
<text  x="13.00" y="271.5" >[..</text>
</g>
<g >
<title>std::_Vector_base&lt;std::array&lt;double, 5ul&gt;, std::allocator&lt;std::array&lt;double, 5ul&gt; &gt; &gt;::_M_allocate (209,670 samples, 0.18%)</title><rect x="944.1" y="229" width="2.0" height="15.0" fill="rgb(215,215,64)" rx="2" ry="2" />
<text  x="947.06" y="239.5" ></text>
</g>
<g >
<title>do_syscall_64 (45,049 samples, 0.04%)</title><rect x="1189.6" y="341" width="0.4" height="15.0" fill="rgb(204,57,57)" rx="2" ry="2" />
<text  x="1192.56" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (2,288,769 samples, 1.91%)</title><rect x="1123.5" y="69" width="22.6" height="15.0" fill="rgb(220,79,79)" rx="2" ry="2" />
<text  x="1126.50" y="79.5" >[..</text>
</g>
<g >
<title>[ld-linux-x86-64.so.2] (2,393,620 samples, 2.00%)</title><rect x="34.0" y="245" width="23.6" height="15.0" fill="rgb(242,112,112)" rx="2" ry="2" />
<text  x="36.98" y="255.5" >[..</text>
</g>
<g >
<title>load_elf_binary (45,049 samples, 0.04%)</title><rect x="1189.6" y="277" width="0.4" height="15.0" fill="rgb(220,79,79)" rx="2" ry="2" />
<text  x="1192.56" y="287.5" ></text>
</g>
<g >
<title>DDEint_dopri_5&lt;&amp; (68,415,479 samples, 57.24%)</title><rect x="181.7" y="293" width="675.4" height="15.0" fill="rgb(246,117,117)" rx="2" ry="2" />
<text  x="184.71" y="303.5" >DDEint_dopri_5&lt;&amp;</text>
</g>
<g >
<title>CompoundRingBuffer&lt;std::array&lt;double, 5ul&gt;, double&gt;::operator[] (4,316,460 samples, 3.61%)</title><rect x="485.4" y="213" width="42.6" height="15.0" fill="rgb(206,206,61)" rx="2" ry="2" />
<text  x="488.43" y="223.5" >Comp..</text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::allocator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt;::_M_fill_initialize (3,433,296 samples, 2.87%)</title><rect x="1112.2" y="277" width="33.9" height="15.0" fill="rgb(222,222,67)" rx="2" ry="2" />
<text  x="1115.20" y="287.5" >st..</text>
</g>
<g >
<title>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::_Vector_impl_data::_M_copy_data (1,147,879 samples, 0.96%)</title><rect x="1002.0" y="261" width="11.4" height="15.0" fill="rgb(201,201,59)" rx="2" ry="2" />
<text  x="1005.04" y="271.5" ></text>
</g>
<g >
<title>std::queue&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::deque&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::allocator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt; &gt;::front (1,153,400 samples, 0.96%)</title><rect x="957.5" y="293" width="11.4" height="15.0" fill="rgb(188,188,54)" rx="2" ry="2" />
<text  x="960.53" y="303.5" ></text>
</g>
<g >
<title>do_syscall_64 (1,112,105 samples, 0.93%)</title><rect x="1178.6" y="357" width="11.0" height="15.0" fill="rgb(204,57,57)" rx="2" ry="2" />
<text  x="1181.58" y="367.5" ></text>
</g>
<g >
<title>RingBuffer&lt;std::array&lt;double, 5ul&gt; &gt;::wrap (2,251,199 samples, 1.88%)</title><rect x="665.8" y="213" width="22.2" height="15.0" fill="rgb(190,190,55)" rx="2" ry="2" />
<text  x="668.75" y="223.5" >R..</text>
</g>
<g >
<title>std::vector&lt;std::array&lt;double, 5ul&gt;, std::allocator&lt;std::array&lt;double, 5ul&gt; &gt; &gt;::vector (2,605,324 samples, 2.18%)</title><rect x="931.8" y="277" width="25.7" height="15.0" fill="rgb(215,215,64)" rx="2" ry="2" />
<text  x="934.81" y="287.5" >s..</text>
</g>
<g >
<title>__page_cache_release (1,112,105 samples, 0.93%)</title><rect x="1178.6" y="197" width="11.0" height="15.0" fill="rgb(249,121,121)" rx="2" ry="2" />
<text  x="1181.58" y="207.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::_Vector_impl_data::_M_copy_data (1,024,929 samples, 0.86%)</title><rect x="1013.4" y="245" width="10.1" height="15.0" fill="rgb(201,201,59)" rx="2" ry="2" />
<text  x="1016.37" y="255.5" ></text>
</g>
</g>
</svg>
